
W6100EVB_MXIDE_loopback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060f8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  080062dc  080062dc  000162dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066ec  080066ec  00020110  2**0
                  CONTENTS
  4 .ARM          00000000  080066ec  080066ec  00020110  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066ec  080066ec  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066ec  080066ec  000166ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066f0  080066f0  000166f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  080066f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000090c  20000110  08006804  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a1c  08006804  00020a1c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016720  00000000  00000000  00020139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033ee  00000000  00000000  00036859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  00039c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad8  00000000  00000000  0003a868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191e7  00000000  00000000  0003b340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001064e  00000000  00000000  00054527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008025f  00000000  00000000  00064b75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e4dd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037bc  00000000  00000000  000e4e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000110 	.word	0x20000110
 8000200:	00000000 	.word	0x00000000
 8000204:	080062c4 	.word	0x080062c4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000114 	.word	0x20000114
 8000220:	080062c4 	.word	0x080062c4

08000224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <HAL_Init+0x28>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a07      	ldr	r2, [pc, #28]	; (800024c <HAL_Init+0x28>)
 800022e:	f043 0310 	orr.w	r3, r3, #16
 8000232:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000234:	2003      	movs	r0, #3
 8000236:	f000 f943 	bl	80004c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f808 	bl	8000250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000240:	f002 fb50 	bl	80028e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000244:	2300      	movs	r3, #0
}
 8000246:	4618      	mov	r0, r3
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40022000 	.word	0x40022000

08000250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000258:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <HAL_InitTick+0x54>)
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <HAL_InitTick+0x58>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	4619      	mov	r1, r3
 8000262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000266:	fbb3 f3f1 	udiv	r3, r3, r1
 800026a:	fbb2 f3f3 	udiv	r3, r2, r3
 800026e:	4618      	mov	r0, r3
 8000270:	f000 f95b 	bl	800052a <HAL_SYSTICK_Config>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800027a:	2301      	movs	r3, #1
 800027c:	e00e      	b.n	800029c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2b0f      	cmp	r3, #15
 8000282:	d80a      	bhi.n	800029a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000284:	2200      	movs	r2, #0
 8000286:	6879      	ldr	r1, [r7, #4]
 8000288:	f04f 30ff 	mov.w	r0, #4294967295
 800028c:	f000 f923 	bl	80004d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000290:	4a06      	ldr	r2, [pc, #24]	; (80002ac <HAL_InitTick+0x5c>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000296:	2300      	movs	r3, #0
 8000298:	e000      	b.n	800029c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800029a:	2301      	movs	r3, #1
}
 800029c:	4618      	mov	r0, r3
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000070 	.word	0x20000070
 80002a8:	20000004 	.word	0x20000004
 80002ac:	20000000 	.word	0x20000000

080002b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <HAL_IncTick+0x1c>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	461a      	mov	r2, r3
 80002ba:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <HAL_IncTick+0x20>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4413      	add	r3, r2
 80002c0:	4a03      	ldr	r2, [pc, #12]	; (80002d0 <HAL_IncTick+0x20>)
 80002c2:	6013      	str	r3, [r2, #0]
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	20000004 	.word	0x20000004
 80002d0:	2000016c 	.word	0x2000016c

080002d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  return uwTick;
 80002d8:	4b02      	ldr	r3, [pc, #8]	; (80002e4 <HAL_GetTick+0x10>)
 80002da:	681b      	ldr	r3, [r3, #0]
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	2000016c 	.word	0x2000016c

080002e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002f0:	f7ff fff0 	bl	80002d4 <HAL_GetTick>
 80002f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000300:	d005      	beq.n	800030e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000302:	4b0a      	ldr	r3, [pc, #40]	; (800032c <HAL_Delay+0x44>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	461a      	mov	r2, r3
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	4413      	add	r3, r2
 800030c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800030e:	bf00      	nop
 8000310:	f7ff ffe0 	bl	80002d4 <HAL_GetTick>
 8000314:	4602      	mov	r2, r0
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	1ad3      	subs	r3, r2, r3
 800031a:	68fa      	ldr	r2, [r7, #12]
 800031c:	429a      	cmp	r2, r3
 800031e:	d8f7      	bhi.n	8000310 <HAL_Delay+0x28>
  {
  }
}
 8000320:	bf00      	nop
 8000322:	bf00      	nop
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000004 	.word	0x20000004

08000330 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000330:	b480      	push	{r7}
 8000332:	b085      	sub	sp, #20
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	f003 0307 	and.w	r3, r3, #7
 800033e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000340:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <NVIC_SetPriorityGrouping+0x44>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000346:	68ba      	ldr	r2, [r7, #8]
 8000348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800034c:	4013      	ands	r3, r2
 800034e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800035c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000362:	4a04      	ldr	r2, [pc, #16]	; (8000374 <NVIC_SetPriorityGrouping+0x44>)
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	60d3      	str	r3, [r2, #12]
}
 8000368:	bf00      	nop
 800036a:	3714      	adds	r7, #20
 800036c:	46bd      	mov	sp, r7
 800036e:	bc80      	pop	{r7}
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	e000ed00 	.word	0xe000ed00

08000378 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800037c:	4b04      	ldr	r3, [pc, #16]	; (8000390 <NVIC_GetPriorityGrouping+0x18>)
 800037e:	68db      	ldr	r3, [r3, #12]
 8000380:	0a1b      	lsrs	r3, r3, #8
 8000382:	f003 0307 	and.w	r3, r3, #7
}
 8000386:	4618      	mov	r0, r3
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	e000ed00 	.word	0xe000ed00

08000394 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	f003 021f 	and.w	r2, r3, #31
 80003a4:	4906      	ldr	r1, [pc, #24]	; (80003c0 <NVIC_EnableIRQ+0x2c>)
 80003a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003aa:	095b      	lsrs	r3, r3, #5
 80003ac:	2001      	movs	r0, #1
 80003ae:	fa00 f202 	lsl.w	r2, r0, r2
 80003b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80003b6:	bf00      	nop
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr
 80003c0:	e000e100 	.word	0xe000e100

080003c4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	6039      	str	r1, [r7, #0]
 80003ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80003d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	da0b      	bge.n	80003f0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	b2da      	uxtb	r2, r3
 80003dc:	490c      	ldr	r1, [pc, #48]	; (8000410 <NVIC_SetPriority+0x4c>)
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	f003 030f 	and.w	r3, r3, #15
 80003e4:	3b04      	subs	r3, #4
 80003e6:	0112      	lsls	r2, r2, #4
 80003e8:	b2d2      	uxtb	r2, r2
 80003ea:	440b      	add	r3, r1
 80003ec:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003ee:	e009      	b.n	8000404 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	b2da      	uxtb	r2, r3
 80003f4:	4907      	ldr	r1, [pc, #28]	; (8000414 <NVIC_SetPriority+0x50>)
 80003f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fa:	0112      	lsls	r2, r2, #4
 80003fc:	b2d2      	uxtb	r2, r2
 80003fe:	440b      	add	r3, r1
 8000400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000404:	bf00      	nop
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	e000ed00 	.word	0xe000ed00
 8000414:	e000e100 	.word	0xe000e100

08000418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000418:	b480      	push	{r7}
 800041a:	b089      	sub	sp, #36	; 0x24
 800041c:	af00      	add	r7, sp, #0
 800041e:	60f8      	str	r0, [r7, #12]
 8000420:	60b9      	str	r1, [r7, #8]
 8000422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	f003 0307 	and.w	r3, r3, #7
 800042a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800042c:	69fb      	ldr	r3, [r7, #28]
 800042e:	f1c3 0307 	rsb	r3, r3, #7
 8000432:	2b04      	cmp	r3, #4
 8000434:	bf28      	it	cs
 8000436:	2304      	movcs	r3, #4
 8000438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800043a:	69fb      	ldr	r3, [r7, #28]
 800043c:	3304      	adds	r3, #4
 800043e:	2b06      	cmp	r3, #6
 8000440:	d902      	bls.n	8000448 <NVIC_EncodePriority+0x30>
 8000442:	69fb      	ldr	r3, [r7, #28]
 8000444:	3b03      	subs	r3, #3
 8000446:	e000      	b.n	800044a <NVIC_EncodePriority+0x32>
 8000448:	2300      	movs	r3, #0
 800044a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800044c:	f04f 32ff 	mov.w	r2, #4294967295
 8000450:	69bb      	ldr	r3, [r7, #24]
 8000452:	fa02 f303 	lsl.w	r3, r2, r3
 8000456:	43da      	mvns	r2, r3
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	401a      	ands	r2, r3
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000460:	f04f 31ff 	mov.w	r1, #4294967295
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	fa01 f303 	lsl.w	r3, r1, r3
 800046a:	43d9      	mvns	r1, r3
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000470:	4313      	orrs	r3, r2
         );
}
 8000472:	4618      	mov	r0, r3
 8000474:	3724      	adds	r7, #36	; 0x24
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr

0800047c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	3b01      	subs	r3, #1
 8000488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800048c:	d301      	bcc.n	8000492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800048e:	2301      	movs	r3, #1
 8000490:	e00f      	b.n	80004b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000492:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <SysTick_Config+0x40>)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	3b01      	subs	r3, #1
 8000498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800049a:	210f      	movs	r1, #15
 800049c:	f04f 30ff 	mov.w	r0, #4294967295
 80004a0:	f7ff ff90 	bl	80003c4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004a4:	4b05      	ldr	r3, [pc, #20]	; (80004bc <SysTick_Config+0x40>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004aa:	4b04      	ldr	r3, [pc, #16]	; (80004bc <SysTick_Config+0x40>)
 80004ac:	2207      	movs	r2, #7
 80004ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004b0:	2300      	movs	r3, #0
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	e000e010 	.word	0xe000e010

080004c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004c8:	6878      	ldr	r0, [r7, #4]
 80004ca:	f7ff ff31 	bl	8000330 <NVIC_SetPriorityGrouping>
}
 80004ce:	bf00      	nop
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}

080004d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004d6:	b580      	push	{r7, lr}
 80004d8:	b086      	sub	sp, #24
 80004da:	af00      	add	r7, sp, #0
 80004dc:	4603      	mov	r3, r0
 80004de:	60b9      	str	r1, [r7, #8]
 80004e0:	607a      	str	r2, [r7, #4]
 80004e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80004e4:	2300      	movs	r3, #0
 80004e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80004e8:	f7ff ff46 	bl	8000378 <NVIC_GetPriorityGrouping>
 80004ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	68b9      	ldr	r1, [r7, #8]
 80004f2:	6978      	ldr	r0, [r7, #20]
 80004f4:	f7ff ff90 	bl	8000418 <NVIC_EncodePriority>
 80004f8:	4602      	mov	r2, r0
 80004fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004fe:	4611      	mov	r1, r2
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff ff5f 	bl	80003c4 <NVIC_SetPriority>
}
 8000506:	bf00      	nop
 8000508:	3718      	adds	r7, #24
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	b082      	sub	sp, #8
 8000512:	af00      	add	r7, sp, #0
 8000514:	4603      	mov	r3, r0
 8000516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800051c:	4618      	mov	r0, r3
 800051e:	f7ff ff39 	bl	8000394 <NVIC_EnableIRQ>
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b082      	sub	sp, #8
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	f7ff ffa2 	bl	800047c <SysTick_Config>
 8000538:	4603      	mov	r3, r0
}
 800053a:	4618      	mov	r0, r3
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
	...

08000544 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800054c:	2300      	movs	r3, #0
 800054e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000556:	2b02      	cmp	r3, #2
 8000558:	d005      	beq.n	8000566 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2204      	movs	r2, #4
 800055e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000560:	2301      	movs	r3, #1
 8000562:	73fb      	strb	r3, [r7, #15]
 8000564:	e0d6      	b.n	8000714 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f022 020e 	bic.w	r2, r2, #14
 8000574:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f022 0201 	bic.w	r2, r2, #1
 8000584:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	461a      	mov	r2, r3
 800058c:	4b64      	ldr	r3, [pc, #400]	; (8000720 <HAL_DMA_Abort_IT+0x1dc>)
 800058e:	429a      	cmp	r2, r3
 8000590:	d958      	bls.n	8000644 <HAL_DMA_Abort_IT+0x100>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a63      	ldr	r2, [pc, #396]	; (8000724 <HAL_DMA_Abort_IT+0x1e0>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d04f      	beq.n	800063c <HAL_DMA_Abort_IT+0xf8>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a61      	ldr	r2, [pc, #388]	; (8000728 <HAL_DMA_Abort_IT+0x1e4>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d048      	beq.n	8000638 <HAL_DMA_Abort_IT+0xf4>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a60      	ldr	r2, [pc, #384]	; (800072c <HAL_DMA_Abort_IT+0x1e8>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d040      	beq.n	8000632 <HAL_DMA_Abort_IT+0xee>
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a5e      	ldr	r2, [pc, #376]	; (8000730 <HAL_DMA_Abort_IT+0x1ec>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d038      	beq.n	800062c <HAL_DMA_Abort_IT+0xe8>
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a5d      	ldr	r2, [pc, #372]	; (8000734 <HAL_DMA_Abort_IT+0x1f0>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d030      	beq.n	8000626 <HAL_DMA_Abort_IT+0xe2>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a5b      	ldr	r2, [pc, #364]	; (8000738 <HAL_DMA_Abort_IT+0x1f4>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d028      	beq.n	8000620 <HAL_DMA_Abort_IT+0xdc>
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a53      	ldr	r2, [pc, #332]	; (8000720 <HAL_DMA_Abort_IT+0x1dc>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d020      	beq.n	800061a <HAL_DMA_Abort_IT+0xd6>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a57      	ldr	r2, [pc, #348]	; (800073c <HAL_DMA_Abort_IT+0x1f8>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d019      	beq.n	8000616 <HAL_DMA_Abort_IT+0xd2>
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a56      	ldr	r2, [pc, #344]	; (8000740 <HAL_DMA_Abort_IT+0x1fc>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d012      	beq.n	8000612 <HAL_DMA_Abort_IT+0xce>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a54      	ldr	r2, [pc, #336]	; (8000744 <HAL_DMA_Abort_IT+0x200>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d00a      	beq.n	800060c <HAL_DMA_Abort_IT+0xc8>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a53      	ldr	r2, [pc, #332]	; (8000748 <HAL_DMA_Abort_IT+0x204>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d102      	bne.n	8000606 <HAL_DMA_Abort_IT+0xc2>
 8000600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000604:	e01b      	b.n	800063e <HAL_DMA_Abort_IT+0xfa>
 8000606:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060a:	e018      	b.n	800063e <HAL_DMA_Abort_IT+0xfa>
 800060c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000610:	e015      	b.n	800063e <HAL_DMA_Abort_IT+0xfa>
 8000612:	2310      	movs	r3, #16
 8000614:	e013      	b.n	800063e <HAL_DMA_Abort_IT+0xfa>
 8000616:	2301      	movs	r3, #1
 8000618:	e011      	b.n	800063e <HAL_DMA_Abort_IT+0xfa>
 800061a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800061e:	e00e      	b.n	800063e <HAL_DMA_Abort_IT+0xfa>
 8000620:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000624:	e00b      	b.n	800063e <HAL_DMA_Abort_IT+0xfa>
 8000626:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800062a:	e008      	b.n	800063e <HAL_DMA_Abort_IT+0xfa>
 800062c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000630:	e005      	b.n	800063e <HAL_DMA_Abort_IT+0xfa>
 8000632:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000636:	e002      	b.n	800063e <HAL_DMA_Abort_IT+0xfa>
 8000638:	2310      	movs	r3, #16
 800063a:	e000      	b.n	800063e <HAL_DMA_Abort_IT+0xfa>
 800063c:	2301      	movs	r3, #1
 800063e:	4a43      	ldr	r2, [pc, #268]	; (800074c <HAL_DMA_Abort_IT+0x208>)
 8000640:	6053      	str	r3, [r2, #4]
 8000642:	e057      	b.n	80006f4 <HAL_DMA_Abort_IT+0x1b0>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a36      	ldr	r2, [pc, #216]	; (8000724 <HAL_DMA_Abort_IT+0x1e0>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d04f      	beq.n	80006ee <HAL_DMA_Abort_IT+0x1aa>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a35      	ldr	r2, [pc, #212]	; (8000728 <HAL_DMA_Abort_IT+0x1e4>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d048      	beq.n	80006ea <HAL_DMA_Abort_IT+0x1a6>
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a33      	ldr	r2, [pc, #204]	; (800072c <HAL_DMA_Abort_IT+0x1e8>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d040      	beq.n	80006e4 <HAL_DMA_Abort_IT+0x1a0>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a32      	ldr	r2, [pc, #200]	; (8000730 <HAL_DMA_Abort_IT+0x1ec>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d038      	beq.n	80006de <HAL_DMA_Abort_IT+0x19a>
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a30      	ldr	r2, [pc, #192]	; (8000734 <HAL_DMA_Abort_IT+0x1f0>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d030      	beq.n	80006d8 <HAL_DMA_Abort_IT+0x194>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a2f      	ldr	r2, [pc, #188]	; (8000738 <HAL_DMA_Abort_IT+0x1f4>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d028      	beq.n	80006d2 <HAL_DMA_Abort_IT+0x18e>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a26      	ldr	r2, [pc, #152]	; (8000720 <HAL_DMA_Abort_IT+0x1dc>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d020      	beq.n	80006cc <HAL_DMA_Abort_IT+0x188>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a2b      	ldr	r2, [pc, #172]	; (800073c <HAL_DMA_Abort_IT+0x1f8>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d019      	beq.n	80006c8 <HAL_DMA_Abort_IT+0x184>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a29      	ldr	r2, [pc, #164]	; (8000740 <HAL_DMA_Abort_IT+0x1fc>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d012      	beq.n	80006c4 <HAL_DMA_Abort_IT+0x180>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a28      	ldr	r2, [pc, #160]	; (8000744 <HAL_DMA_Abort_IT+0x200>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d00a      	beq.n	80006be <HAL_DMA_Abort_IT+0x17a>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a26      	ldr	r2, [pc, #152]	; (8000748 <HAL_DMA_Abort_IT+0x204>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d102      	bne.n	80006b8 <HAL_DMA_Abort_IT+0x174>
 80006b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b6:	e01b      	b.n	80006f0 <HAL_DMA_Abort_IT+0x1ac>
 80006b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006bc:	e018      	b.n	80006f0 <HAL_DMA_Abort_IT+0x1ac>
 80006be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006c2:	e015      	b.n	80006f0 <HAL_DMA_Abort_IT+0x1ac>
 80006c4:	2310      	movs	r3, #16
 80006c6:	e013      	b.n	80006f0 <HAL_DMA_Abort_IT+0x1ac>
 80006c8:	2301      	movs	r3, #1
 80006ca:	e011      	b.n	80006f0 <HAL_DMA_Abort_IT+0x1ac>
 80006cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006d0:	e00e      	b.n	80006f0 <HAL_DMA_Abort_IT+0x1ac>
 80006d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80006d6:	e00b      	b.n	80006f0 <HAL_DMA_Abort_IT+0x1ac>
 80006d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006dc:	e008      	b.n	80006f0 <HAL_DMA_Abort_IT+0x1ac>
 80006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e2:	e005      	b.n	80006f0 <HAL_DMA_Abort_IT+0x1ac>
 80006e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e8:	e002      	b.n	80006f0 <HAL_DMA_Abort_IT+0x1ac>
 80006ea:	2310      	movs	r3, #16
 80006ec:	e000      	b.n	80006f0 <HAL_DMA_Abort_IT+0x1ac>
 80006ee:	2301      	movs	r3, #1
 80006f0:	4a17      	ldr	r2, [pc, #92]	; (8000750 <HAL_DMA_Abort_IT+0x20c>)
 80006f2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2201      	movs	r2, #1
 80006f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2200      	movs	r2, #0
 8000700:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000708:	2b00      	cmp	r3, #0
 800070a:	d003      	beq.n	8000714 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	4798      	blx	r3
    } 
  }
  return status;
 8000714:	7bfb      	ldrb	r3, [r7, #15]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40020080 	.word	0x40020080
 8000724:	40020008 	.word	0x40020008
 8000728:	4002001c 	.word	0x4002001c
 800072c:	40020030 	.word	0x40020030
 8000730:	40020044 	.word	0x40020044
 8000734:	40020058 	.word	0x40020058
 8000738:	4002006c 	.word	0x4002006c
 800073c:	40020408 	.word	0x40020408
 8000740:	4002041c 	.word	0x4002041c
 8000744:	40020430 	.word	0x40020430
 8000748:	40020444 	.word	0x40020444
 800074c:	40020400 	.word	0x40020400
 8000750:	40020000 	.word	0x40020000

08000754 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000754:	b480      	push	{r7}
 8000756:	b08b      	sub	sp, #44	; 0x2c
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000762:	2300      	movs	r3, #0
 8000764:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800076a:	2300      	movs	r3, #0
 800076c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000772:	2300      	movs	r3, #0
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
 8000776:	e179      	b.n	8000a6c <HAL_GPIO_Init+0x318>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000778:	2201      	movs	r2, #1
 800077a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	69fa      	ldr	r2, [r7, #28]
 8000788:	4013      	ands	r3, r2
 800078a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800078c:	69ba      	ldr	r2, [r7, #24]
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	429a      	cmp	r2, r3
 8000792:	f040 8168 	bne.w	8000a66 <HAL_GPIO_Init+0x312>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	4aa0      	ldr	r2, [pc, #640]	; (8000a1c <HAL_GPIO_Init+0x2c8>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d05e      	beq.n	800085e <HAL_GPIO_Init+0x10a>
 80007a0:	4a9e      	ldr	r2, [pc, #632]	; (8000a1c <HAL_GPIO_Init+0x2c8>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d875      	bhi.n	8000892 <HAL_GPIO_Init+0x13e>
 80007a6:	4a9e      	ldr	r2, [pc, #632]	; (8000a20 <HAL_GPIO_Init+0x2cc>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d058      	beq.n	800085e <HAL_GPIO_Init+0x10a>
 80007ac:	4a9c      	ldr	r2, [pc, #624]	; (8000a20 <HAL_GPIO_Init+0x2cc>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d86f      	bhi.n	8000892 <HAL_GPIO_Init+0x13e>
 80007b2:	4a9c      	ldr	r2, [pc, #624]	; (8000a24 <HAL_GPIO_Init+0x2d0>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d052      	beq.n	800085e <HAL_GPIO_Init+0x10a>
 80007b8:	4a9a      	ldr	r2, [pc, #616]	; (8000a24 <HAL_GPIO_Init+0x2d0>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d869      	bhi.n	8000892 <HAL_GPIO_Init+0x13e>
 80007be:	4a9a      	ldr	r2, [pc, #616]	; (8000a28 <HAL_GPIO_Init+0x2d4>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d04c      	beq.n	800085e <HAL_GPIO_Init+0x10a>
 80007c4:	4a98      	ldr	r2, [pc, #608]	; (8000a28 <HAL_GPIO_Init+0x2d4>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d863      	bhi.n	8000892 <HAL_GPIO_Init+0x13e>
 80007ca:	4a98      	ldr	r2, [pc, #608]	; (8000a2c <HAL_GPIO_Init+0x2d8>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d046      	beq.n	800085e <HAL_GPIO_Init+0x10a>
 80007d0:	4a96      	ldr	r2, [pc, #600]	; (8000a2c <HAL_GPIO_Init+0x2d8>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d85d      	bhi.n	8000892 <HAL_GPIO_Init+0x13e>
 80007d6:	2b12      	cmp	r3, #18
 80007d8:	d82a      	bhi.n	8000830 <HAL_GPIO_Init+0xdc>
 80007da:	2b12      	cmp	r3, #18
 80007dc:	d859      	bhi.n	8000892 <HAL_GPIO_Init+0x13e>
 80007de:	a201      	add	r2, pc, #4	; (adr r2, 80007e4 <HAL_GPIO_Init+0x90>)
 80007e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e4:	0800085f 	.word	0x0800085f
 80007e8:	08000839 	.word	0x08000839
 80007ec:	0800084b 	.word	0x0800084b
 80007f0:	0800088d 	.word	0x0800088d
 80007f4:	08000893 	.word	0x08000893
 80007f8:	08000893 	.word	0x08000893
 80007fc:	08000893 	.word	0x08000893
 8000800:	08000893 	.word	0x08000893
 8000804:	08000893 	.word	0x08000893
 8000808:	08000893 	.word	0x08000893
 800080c:	08000893 	.word	0x08000893
 8000810:	08000893 	.word	0x08000893
 8000814:	08000893 	.word	0x08000893
 8000818:	08000893 	.word	0x08000893
 800081c:	08000893 	.word	0x08000893
 8000820:	08000893 	.word	0x08000893
 8000824:	08000893 	.word	0x08000893
 8000828:	08000841 	.word	0x08000841
 800082c:	08000855 	.word	0x08000855
 8000830:	4a7f      	ldr	r2, [pc, #508]	; (8000a30 <HAL_GPIO_Init+0x2dc>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d013      	beq.n	800085e <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000836:	e02c      	b.n	8000892 <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	623b      	str	r3, [r7, #32]
          break;
 800083e:	e029      	b.n	8000894 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	3304      	adds	r3, #4
 8000846:	623b      	str	r3, [r7, #32]
          break;
 8000848:	e024      	b.n	8000894 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	68db      	ldr	r3, [r3, #12]
 800084e:	3308      	adds	r3, #8
 8000850:	623b      	str	r3, [r7, #32]
          break;
 8000852:	e01f      	b.n	8000894 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	330c      	adds	r3, #12
 800085a:	623b      	str	r3, [r7, #32]
          break;
 800085c:	e01a      	b.n	8000894 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d102      	bne.n	800086c <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000866:	2304      	movs	r3, #4
 8000868:	623b      	str	r3, [r7, #32]
          break;
 800086a:	e013      	b.n	8000894 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d105      	bne.n	8000880 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000874:	2308      	movs	r3, #8
 8000876:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	69fa      	ldr	r2, [r7, #28]
 800087c:	611a      	str	r2, [r3, #16]
          break;
 800087e:	e009      	b.n	8000894 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000880:	2308      	movs	r3, #8
 8000882:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	69fa      	ldr	r2, [r7, #28]
 8000888:	615a      	str	r2, [r3, #20]
          break;
 800088a:	e003      	b.n	8000894 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
          break;
 8000890:	e000      	b.n	8000894 <HAL_GPIO_Init+0x140>
          break;
 8000892:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000894:	69bb      	ldr	r3, [r7, #24]
 8000896:	2bff      	cmp	r3, #255	; 0xff
 8000898:	d801      	bhi.n	800089e <HAL_GPIO_Init+0x14a>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	e001      	b.n	80008a2 <HAL_GPIO_Init+0x14e>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	3304      	adds	r3, #4
 80008a2:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80008a4:	69bb      	ldr	r3, [r7, #24]
 80008a6:	2bff      	cmp	r3, #255	; 0xff
 80008a8:	d802      	bhi.n	80008b0 <HAL_GPIO_Init+0x15c>
 80008aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	e002      	b.n	80008b6 <HAL_GPIO_Init+0x162>
 80008b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b2:	3b08      	subs	r3, #8
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	210f      	movs	r1, #15
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	fa01 f303 	lsl.w	r3, r1, r3
 80008c4:	43db      	mvns	r3, r3
 80008c6:	401a      	ands	r2, r3
 80008c8:	6a39      	ldr	r1, [r7, #32]
 80008ca:	693b      	ldr	r3, [r7, #16]
 80008cc:	fa01 f303 	lsl.w	r3, r1, r3
 80008d0:	431a      	orrs	r2, r3
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008de:	2b00      	cmp	r3, #0
 80008e0:	f000 80c1 	beq.w	8000a66 <HAL_GPIO_Init+0x312>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008e4:	4b53      	ldr	r3, [pc, #332]	; (8000a34 <HAL_GPIO_Init+0x2e0>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a52      	ldr	r2, [pc, #328]	; (8000a34 <HAL_GPIO_Init+0x2e0>)
 80008ea:	f043 0301 	orr.w	r3, r3, #1
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b50      	ldr	r3, [pc, #320]	; (8000a34 <HAL_GPIO_Init+0x2e0>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 80008fc:	4a4e      	ldr	r2, [pc, #312]	; (8000a38 <HAL_GPIO_Init+0x2e4>)
 80008fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000900:	089b      	lsrs	r3, r3, #2
 8000902:	3302      	adds	r3, #2
 8000904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000908:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800090a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090c:	f003 0303 	and.w	r3, r3, #3
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	220f      	movs	r2, #15
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	43db      	mvns	r3, r3
 800091a:	697a      	ldr	r2, [r7, #20]
 800091c:	4013      	ands	r3, r2
 800091e:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a46      	ldr	r2, [pc, #280]	; (8000a3c <HAL_GPIO_Init+0x2e8>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d01f      	beq.n	8000968 <HAL_GPIO_Init+0x214>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a45      	ldr	r2, [pc, #276]	; (8000a40 <HAL_GPIO_Init+0x2ec>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d019      	beq.n	8000964 <HAL_GPIO_Init+0x210>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a44      	ldr	r2, [pc, #272]	; (8000a44 <HAL_GPIO_Init+0x2f0>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d013      	beq.n	8000960 <HAL_GPIO_Init+0x20c>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a43      	ldr	r2, [pc, #268]	; (8000a48 <HAL_GPIO_Init+0x2f4>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d00d      	beq.n	800095c <HAL_GPIO_Init+0x208>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4a42      	ldr	r2, [pc, #264]	; (8000a4c <HAL_GPIO_Init+0x2f8>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d007      	beq.n	8000958 <HAL_GPIO_Init+0x204>
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a41      	ldr	r2, [pc, #260]	; (8000a50 <HAL_GPIO_Init+0x2fc>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d101      	bne.n	8000954 <HAL_GPIO_Init+0x200>
 8000950:	2305      	movs	r3, #5
 8000952:	e00a      	b.n	800096a <HAL_GPIO_Init+0x216>
 8000954:	2306      	movs	r3, #6
 8000956:	e008      	b.n	800096a <HAL_GPIO_Init+0x216>
 8000958:	2304      	movs	r3, #4
 800095a:	e006      	b.n	800096a <HAL_GPIO_Init+0x216>
 800095c:	2303      	movs	r3, #3
 800095e:	e004      	b.n	800096a <HAL_GPIO_Init+0x216>
 8000960:	2302      	movs	r3, #2
 8000962:	e002      	b.n	800096a <HAL_GPIO_Init+0x216>
 8000964:	2301      	movs	r3, #1
 8000966:	e000      	b.n	800096a <HAL_GPIO_Init+0x216>
 8000968:	2300      	movs	r3, #0
 800096a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800096c:	f002 0203 	and.w	r2, r2, #3
 8000970:	0092      	lsls	r2, r2, #2
 8000972:	4093      	lsls	r3, r2
 8000974:	697a      	ldr	r2, [r7, #20]
 8000976:	4313      	orrs	r3, r2
 8000978:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 800097a:	492f      	ldr	r1, [pc, #188]	; (8000a38 <HAL_GPIO_Init+0x2e4>)
 800097c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097e:	089b      	lsrs	r3, r3, #2
 8000980:	3302      	adds	r3, #2
 8000982:	697a      	ldr	r2, [r7, #20]
 8000984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000990:	2b00      	cmp	r3, #0
 8000992:	d006      	beq.n	80009a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000994:	4b2f      	ldr	r3, [pc, #188]	; (8000a54 <HAL_GPIO_Init+0x300>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	492e      	ldr	r1, [pc, #184]	; (8000a54 <HAL_GPIO_Init+0x300>)
 800099a:	69bb      	ldr	r3, [r7, #24]
 800099c:	4313      	orrs	r3, r2
 800099e:	600b      	str	r3, [r1, #0]
 80009a0:	e006      	b.n	80009b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009a2:	4b2c      	ldr	r3, [pc, #176]	; (8000a54 <HAL_GPIO_Init+0x300>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	43db      	mvns	r3, r3
 80009aa:	492a      	ldr	r1, [pc, #168]	; (8000a54 <HAL_GPIO_Init+0x300>)
 80009ac:	4013      	ands	r3, r2
 80009ae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d006      	beq.n	80009ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009bc:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <HAL_GPIO_Init+0x300>)
 80009be:	685a      	ldr	r2, [r3, #4]
 80009c0:	4924      	ldr	r1, [pc, #144]	; (8000a54 <HAL_GPIO_Init+0x300>)
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	604b      	str	r3, [r1, #4]
 80009c8:	e006      	b.n	80009d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009ca:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <HAL_GPIO_Init+0x300>)
 80009cc:	685a      	ldr	r2, [r3, #4]
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	43db      	mvns	r3, r3
 80009d2:	4920      	ldr	r1, [pc, #128]	; (8000a54 <HAL_GPIO_Init+0x300>)
 80009d4:	4013      	ands	r3, r2
 80009d6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d006      	beq.n	80009f2 <HAL_GPIO_Init+0x29e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009e4:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <HAL_GPIO_Init+0x300>)
 80009e6:	689a      	ldr	r2, [r3, #8]
 80009e8:	491a      	ldr	r1, [pc, #104]	; (8000a54 <HAL_GPIO_Init+0x300>)
 80009ea:	69bb      	ldr	r3, [r7, #24]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	608b      	str	r3, [r1, #8]
 80009f0:	e006      	b.n	8000a00 <HAL_GPIO_Init+0x2ac>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009f2:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <HAL_GPIO_Init+0x300>)
 80009f4:	689a      	ldr	r2, [r3, #8]
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	43db      	mvns	r3, r3
 80009fa:	4916      	ldr	r1, [pc, #88]	; (8000a54 <HAL_GPIO_Init+0x300>)
 80009fc:	4013      	ands	r3, r2
 80009fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d025      	beq.n	8000a58 <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <HAL_GPIO_Init+0x300>)
 8000a0e:	68da      	ldr	r2, [r3, #12]
 8000a10:	4910      	ldr	r1, [pc, #64]	; (8000a54 <HAL_GPIO_Init+0x300>)
 8000a12:	69bb      	ldr	r3, [r7, #24]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	60cb      	str	r3, [r1, #12]
 8000a18:	e025      	b.n	8000a66 <HAL_GPIO_Init+0x312>
 8000a1a:	bf00      	nop
 8000a1c:	10320000 	.word	0x10320000
 8000a20:	10310000 	.word	0x10310000
 8000a24:	10220000 	.word	0x10220000
 8000a28:	10210000 	.word	0x10210000
 8000a2c:	10120000 	.word	0x10120000
 8000a30:	10110000 	.word	0x10110000
 8000a34:	40021000 	.word	0x40021000
 8000a38:	40010000 	.word	0x40010000
 8000a3c:	40010800 	.word	0x40010800
 8000a40:	40010c00 	.word	0x40010c00
 8000a44:	40011000 	.word	0x40011000
 8000a48:	40011400 	.word	0x40011400
 8000a4c:	40011800 	.word	0x40011800
 8000a50:	40011c00 	.word	0x40011c00
 8000a54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <HAL_GPIO_Init+0x32c>)
 8000a5a:	68da      	ldr	r2, [r3, #12]
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	4907      	ldr	r1, [pc, #28]	; (8000a80 <HAL_GPIO_Init+0x32c>)
 8000a62:	4013      	ands	r3, r2
 8000a64:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a68:	3301      	adds	r3, #1
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6e:	2b0f      	cmp	r3, #15
 8000a70:	f67f ae82 	bls.w	8000778 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	372c      	adds	r7, #44	; 0x2c
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	40010400 	.word	0x40010400

08000a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	807b      	strh	r3, [r7, #2]
 8000a90:	4613      	mov	r3, r2
 8000a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a94:	787b      	ldrb	r3, [r7, #1]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d003      	beq.n	8000aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a9a:	887a      	ldrh	r2, [r7, #2]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000aa0:	e003      	b.n	8000aaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000aa2:	887b      	ldrh	r3, [r7, #2]
 8000aa4:	041a      	lsls	r2, r3, #16
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	611a      	str	r2, [r3, #16]
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000abc:	2300      	movs	r3, #0
 8000abe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	f000 8087 	beq.w	8000bdc <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ace:	4b92      	ldr	r3, [pc, #584]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f003 030c 	and.w	r3, r3, #12
 8000ad6:	2b04      	cmp	r3, #4
 8000ad8:	d00c      	beq.n	8000af4 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ada:	4b8f      	ldr	r3, [pc, #572]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f003 030c 	and.w	r3, r3, #12
 8000ae2:	2b08      	cmp	r3, #8
 8000ae4:	d112      	bne.n	8000b0c <HAL_RCC_OscConfig+0x58>
 8000ae6:	4b8c      	ldr	r3, [pc, #560]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000af2:	d10b      	bne.n	8000b0c <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000af4:	4b88      	ldr	r3, [pc, #544]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d06c      	beq.n	8000bda <HAL_RCC_OscConfig+0x126>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d168      	bne.n	8000bda <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	e22d      	b.n	8000f68 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b14:	d106      	bne.n	8000b24 <HAL_RCC_OscConfig+0x70>
 8000b16:	4b80      	ldr	r3, [pc, #512]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a7f      	ldr	r2, [pc, #508]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b20:	6013      	str	r3, [r2, #0]
 8000b22:	e02e      	b.n	8000b82 <HAL_RCC_OscConfig+0xce>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d10c      	bne.n	8000b46 <HAL_RCC_OscConfig+0x92>
 8000b2c:	4b7a      	ldr	r3, [pc, #488]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a79      	ldr	r2, [pc, #484]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b36:	6013      	str	r3, [r2, #0]
 8000b38:	4b77      	ldr	r3, [pc, #476]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a76      	ldr	r2, [pc, #472]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b42:	6013      	str	r3, [r2, #0]
 8000b44:	e01d      	b.n	8000b82 <HAL_RCC_OscConfig+0xce>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b4e:	d10c      	bne.n	8000b6a <HAL_RCC_OscConfig+0xb6>
 8000b50:	4b71      	ldr	r3, [pc, #452]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a70      	ldr	r2, [pc, #448]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000b56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b5a:	6013      	str	r3, [r2, #0]
 8000b5c:	4b6e      	ldr	r3, [pc, #440]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a6d      	ldr	r2, [pc, #436]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b66:	6013      	str	r3, [r2, #0]
 8000b68:	e00b      	b.n	8000b82 <HAL_RCC_OscConfig+0xce>
 8000b6a:	4b6b      	ldr	r3, [pc, #428]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a6a      	ldr	r2, [pc, #424]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	4b68      	ldr	r3, [pc, #416]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a67      	ldr	r2, [pc, #412]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000b7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b80:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d013      	beq.n	8000bb2 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b8a:	f7ff fba3 	bl	80002d4 <HAL_GetTick>
 8000b8e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b90:	e008      	b.n	8000ba4 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b92:	f7ff fb9f 	bl	80002d4 <HAL_GetTick>
 8000b96:	4602      	mov	r2, r0
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	2b64      	cmp	r3, #100	; 0x64
 8000b9e:	d901      	bls.n	8000ba4 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	e1e1      	b.n	8000f68 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ba4:	4b5c      	ldr	r3, [pc, #368]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d0f0      	beq.n	8000b92 <HAL_RCC_OscConfig+0xde>
 8000bb0:	e014      	b.n	8000bdc <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb2:	f7ff fb8f 	bl	80002d4 <HAL_GetTick>
 8000bb6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bb8:	e008      	b.n	8000bcc <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bba:	f7ff fb8b 	bl	80002d4 <HAL_GetTick>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	2b64      	cmp	r3, #100	; 0x64
 8000bc6:	d901      	bls.n	8000bcc <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	e1cd      	b.n	8000f68 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bcc:	4b52      	ldr	r3, [pc, #328]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d1f0      	bne.n	8000bba <HAL_RCC_OscConfig+0x106>
 8000bd8:	e000      	b.n	8000bdc <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bda:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d063      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000be8:	4b4b      	ldr	r3, [pc, #300]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f003 030c 	and.w	r3, r3, #12
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d00b      	beq.n	8000c0c <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000bf4:	4b48      	ldr	r3, [pc, #288]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f003 030c 	and.w	r3, r3, #12
 8000bfc:	2b08      	cmp	r3, #8
 8000bfe:	d11c      	bne.n	8000c3a <HAL_RCC_OscConfig+0x186>
 8000c00:	4b45      	ldr	r3, [pc, #276]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d116      	bne.n	8000c3a <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c0c:	4b42      	ldr	r3, [pc, #264]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f003 0302 	and.w	r3, r3, #2
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d005      	beq.n	8000c24 <HAL_RCC_OscConfig+0x170>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	691b      	ldr	r3, [r3, #16]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d001      	beq.n	8000c24 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	e1a1      	b.n	8000f68 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c24:	4b3c      	ldr	r3, [pc, #240]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	695b      	ldr	r3, [r3, #20]
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	4939      	ldr	r1, [pc, #228]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000c34:	4313      	orrs	r3, r2
 8000c36:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c38:	e03a      	b.n	8000cb0 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	691b      	ldr	r3, [r3, #16]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d020      	beq.n	8000c84 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c42:	4b36      	ldr	r3, [pc, #216]	; (8000d1c <HAL_RCC_OscConfig+0x268>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c48:	f7ff fb44 	bl	80002d4 <HAL_GetTick>
 8000c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c4e:	e008      	b.n	8000c62 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c50:	f7ff fb40 	bl	80002d4 <HAL_GetTick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d901      	bls.n	8000c62 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	e182      	b.n	8000f68 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c62:	4b2d      	ldr	r3, [pc, #180]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d0f0      	beq.n	8000c50 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c6e:	4b2a      	ldr	r3, [pc, #168]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	00db      	lsls	r3, r3, #3
 8000c7c:	4926      	ldr	r1, [pc, #152]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	600b      	str	r3, [r1, #0]
 8000c82:	e015      	b.n	8000cb0 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c84:	4b25      	ldr	r3, [pc, #148]	; (8000d1c <HAL_RCC_OscConfig+0x268>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c8a:	f7ff fb23 	bl	80002d4 <HAL_GetTick>
 8000c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c90:	e008      	b.n	8000ca4 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c92:	f7ff fb1f 	bl	80002d4 <HAL_GetTick>
 8000c96:	4602      	mov	r2, r0
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d901      	bls.n	8000ca4 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	e161      	b.n	8000f68 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ca4:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f003 0302 	and.w	r3, r3, #2
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d1f0      	bne.n	8000c92 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f003 0308 	and.w	r3, r3, #8
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d039      	beq.n	8000d30 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d019      	beq.n	8000cf8 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cc4:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <HAL_RCC_OscConfig+0x26c>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cca:	f7ff fb03 	bl	80002d4 <HAL_GetTick>
 8000cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cd0:	e008      	b.n	8000ce4 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cd2:	f7ff faff 	bl	80002d4 <HAL_GetTick>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d901      	bls.n	8000ce4 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	e141      	b.n	8000f68 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <HAL_RCC_OscConfig+0x264>)
 8000ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce8:	f003 0302 	and.w	r3, r3, #2
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d0f0      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f000 fae3 	bl	80012bc <RCC_Delay>
 8000cf6:	e01b      	b.n	8000d30 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cf8:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <HAL_RCC_OscConfig+0x26c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cfe:	f7ff fae9 	bl	80002d4 <HAL_GetTick>
 8000d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d04:	e00e      	b.n	8000d24 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d06:	f7ff fae5 	bl	80002d4 <HAL_GetTick>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d907      	bls.n	8000d24 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000d14:	2303      	movs	r3, #3
 8000d16:	e127      	b.n	8000f68 <HAL_RCC_OscConfig+0x4b4>
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	42420000 	.word	0x42420000
 8000d20:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d24:	4b92      	ldr	r3, [pc, #584]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d28:	f003 0302 	and.w	r3, r3, #2
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1ea      	bne.n	8000d06 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	f000 80a6 	beq.w	8000e8a <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d42:	4b8b      	ldr	r3, [pc, #556]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d10d      	bne.n	8000d6a <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	4b88      	ldr	r3, [pc, #544]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	4a87      	ldr	r2, [pc, #540]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d58:	61d3      	str	r3, [r2, #28]
 8000d5a:	4b85      	ldr	r3, [pc, #532]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000d66:	2301      	movs	r3, #1
 8000d68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d6a:	4b82      	ldr	r3, [pc, #520]	; (8000f74 <HAL_RCC_OscConfig+0x4c0>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d118      	bne.n	8000da8 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d76:	4b7f      	ldr	r3, [pc, #508]	; (8000f74 <HAL_RCC_OscConfig+0x4c0>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a7e      	ldr	r2, [pc, #504]	; (8000f74 <HAL_RCC_OscConfig+0x4c0>)
 8000d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d82:	f7ff faa7 	bl	80002d4 <HAL_GetTick>
 8000d86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d88:	e008      	b.n	8000d9c <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d8a:	f7ff faa3 	bl	80002d4 <HAL_GetTick>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	2b64      	cmp	r3, #100	; 0x64
 8000d96:	d901      	bls.n	8000d9c <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	e0e5      	b.n	8000f68 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d9c:	4b75      	ldr	r3, [pc, #468]	; (8000f74 <HAL_RCC_OscConfig+0x4c0>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0f0      	beq.n	8000d8a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d106      	bne.n	8000dbe <HAL_RCC_OscConfig+0x30a>
 8000db0:	4b6f      	ldr	r3, [pc, #444]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000db2:	6a1b      	ldr	r3, [r3, #32]
 8000db4:	4a6e      	ldr	r2, [pc, #440]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	6213      	str	r3, [r2, #32]
 8000dbc:	e02d      	b.n	8000e1a <HAL_RCC_OscConfig+0x366>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d10c      	bne.n	8000de0 <HAL_RCC_OscConfig+0x32c>
 8000dc6:	4b6a      	ldr	r3, [pc, #424]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000dc8:	6a1b      	ldr	r3, [r3, #32]
 8000dca:	4a69      	ldr	r2, [pc, #420]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000dcc:	f023 0301 	bic.w	r3, r3, #1
 8000dd0:	6213      	str	r3, [r2, #32]
 8000dd2:	4b67      	ldr	r3, [pc, #412]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000dd4:	6a1b      	ldr	r3, [r3, #32]
 8000dd6:	4a66      	ldr	r2, [pc, #408]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000dd8:	f023 0304 	bic.w	r3, r3, #4
 8000ddc:	6213      	str	r3, [r2, #32]
 8000dde:	e01c      	b.n	8000e1a <HAL_RCC_OscConfig+0x366>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	2b05      	cmp	r3, #5
 8000de6:	d10c      	bne.n	8000e02 <HAL_RCC_OscConfig+0x34e>
 8000de8:	4b61      	ldr	r3, [pc, #388]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000dea:	6a1b      	ldr	r3, [r3, #32]
 8000dec:	4a60      	ldr	r2, [pc, #384]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000dee:	f043 0304 	orr.w	r3, r3, #4
 8000df2:	6213      	str	r3, [r2, #32]
 8000df4:	4b5e      	ldr	r3, [pc, #376]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000df6:	6a1b      	ldr	r3, [r3, #32]
 8000df8:	4a5d      	ldr	r2, [pc, #372]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	6213      	str	r3, [r2, #32]
 8000e00:	e00b      	b.n	8000e1a <HAL_RCC_OscConfig+0x366>
 8000e02:	4b5b      	ldr	r3, [pc, #364]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000e04:	6a1b      	ldr	r3, [r3, #32]
 8000e06:	4a5a      	ldr	r2, [pc, #360]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000e08:	f023 0301 	bic.w	r3, r3, #1
 8000e0c:	6213      	str	r3, [r2, #32]
 8000e0e:	4b58      	ldr	r3, [pc, #352]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000e10:	6a1b      	ldr	r3, [r3, #32]
 8000e12:	4a57      	ldr	r2, [pc, #348]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000e14:	f023 0304 	bic.w	r3, r3, #4
 8000e18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d015      	beq.n	8000e4e <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e22:	f7ff fa57 	bl	80002d4 <HAL_GetTick>
 8000e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e28:	e00a      	b.n	8000e40 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e2a:	f7ff fa53 	bl	80002d4 <HAL_GetTick>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d901      	bls.n	8000e40 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	e093      	b.n	8000f68 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e40:	4b4b      	ldr	r3, [pc, #300]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000e42:	6a1b      	ldr	r3, [r3, #32]
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d0ee      	beq.n	8000e2a <HAL_RCC_OscConfig+0x376>
 8000e4c:	e014      	b.n	8000e78 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e4e:	f7ff fa41 	bl	80002d4 <HAL_GetTick>
 8000e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e54:	e00a      	b.n	8000e6c <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e56:	f7ff fa3d 	bl	80002d4 <HAL_GetTick>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d901      	bls.n	8000e6c <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e07d      	b.n	8000f68 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e6c:	4b40      	ldr	r3, [pc, #256]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000e6e:	6a1b      	ldr	r3, [r3, #32]
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d1ee      	bne.n	8000e56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e78:	7dfb      	ldrb	r3, [r7, #23]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d105      	bne.n	8000e8a <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e7e:	4b3c      	ldr	r3, [pc, #240]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a3b      	ldr	r2, [pc, #236]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d069      	beq.n	8000f66 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e92:	4b37      	ldr	r3, [pc, #220]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 030c 	and.w	r3, r3, #12
 8000e9a:	2b08      	cmp	r3, #8
 8000e9c:	d061      	beq.n	8000f62 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d146      	bne.n	8000f34 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ea6:	4b34      	ldr	r3, [pc, #208]	; (8000f78 <HAL_RCC_OscConfig+0x4c4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eac:	f7ff fa12 	bl	80002d4 <HAL_GetTick>
 8000eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eb2:	e008      	b.n	8000ec6 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eb4:	f7ff fa0e 	bl	80002d4 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d901      	bls.n	8000ec6 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e050      	b.n	8000f68 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ec6:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1f0      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6a1b      	ldr	r3, [r3, #32]
 8000ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eda:	d108      	bne.n	8000eee <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000edc:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	4921      	ldr	r1, [pc, #132]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000eea:	4313      	orrs	r3, r2
 8000eec:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000eee:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6a19      	ldr	r1, [r3, #32]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efe:	430b      	orrs	r3, r1
 8000f00:	491b      	ldr	r1, [pc, #108]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000f02:	4313      	orrs	r3, r2
 8000f04:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f06:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <HAL_RCC_OscConfig+0x4c4>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0c:	f7ff f9e2 	bl	80002d4 <HAL_GetTick>
 8000f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f12:	e008      	b.n	8000f26 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f14:	f7ff f9de 	bl	80002d4 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d901      	bls.n	8000f26 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	e020      	b.n	8000f68 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f26:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d0f0      	beq.n	8000f14 <HAL_RCC_OscConfig+0x460>
 8000f32:	e018      	b.n	8000f66 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f34:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <HAL_RCC_OscConfig+0x4c4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3a:	f7ff f9cb 	bl	80002d4 <HAL_GetTick>
 8000f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f40:	e008      	b.n	8000f54 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f42:	f7ff f9c7 	bl	80002d4 <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e009      	b.n	8000f68 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_RCC_OscConfig+0x4bc>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1f0      	bne.n	8000f42 <HAL_RCC_OscConfig+0x48e>
 8000f60:	e001      	b.n	8000f66 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e000      	b.n	8000f68 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40007000 	.word	0x40007000
 8000f78:	42420060 	.word	0x42420060

08000f7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f8a:	4b7e      	ldr	r3, [pc, #504]	; (8001184 <HAL_RCC_ClockConfig+0x208>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d910      	bls.n	8000fba <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f98:	4b7a      	ldr	r3, [pc, #488]	; (8001184 <HAL_RCC_ClockConfig+0x208>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f023 0207 	bic.w	r2, r3, #7
 8000fa0:	4978      	ldr	r1, [pc, #480]	; (8001184 <HAL_RCC_ClockConfig+0x208>)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000fa8:	4b76      	ldr	r3, [pc, #472]	; (8001184 <HAL_RCC_ClockConfig+0x208>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 0307 	and.w	r3, r3, #7
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d001      	beq.n	8000fba <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e0e0      	b.n	800117c <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d020      	beq.n	8001008 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d005      	beq.n	8000fde <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fd2:	4b6d      	ldr	r3, [pc, #436]	; (8001188 <HAL_RCC_ClockConfig+0x20c>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	4a6c      	ldr	r2, [pc, #432]	; (8001188 <HAL_RCC_ClockConfig+0x20c>)
 8000fd8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000fdc:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0308 	and.w	r3, r3, #8
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d005      	beq.n	8000ff6 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fea:	4b67      	ldr	r3, [pc, #412]	; (8001188 <HAL_RCC_ClockConfig+0x20c>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	4a66      	ldr	r2, [pc, #408]	; (8001188 <HAL_RCC_ClockConfig+0x20c>)
 8000ff0:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000ff4:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ff6:	4b64      	ldr	r3, [pc, #400]	; (8001188 <HAL_RCC_ClockConfig+0x20c>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	4961      	ldr	r1, [pc, #388]	; (8001188 <HAL_RCC_ClockConfig+0x20c>)
 8001004:	4313      	orrs	r3, r2
 8001006:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d06a      	beq.n	80010ea <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d107      	bne.n	800102c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800101c:	4b5a      	ldr	r3, [pc, #360]	; (8001188 <HAL_RCC_ClockConfig+0x20c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d115      	bne.n	8001054 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e0a7      	b.n	800117c <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b02      	cmp	r3, #2
 8001032:	d107      	bne.n	8001044 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001034:	4b54      	ldr	r3, [pc, #336]	; (8001188 <HAL_RCC_ClockConfig+0x20c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d109      	bne.n	8001054 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e09b      	b.n	800117c <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001044:	4b50      	ldr	r3, [pc, #320]	; (8001188 <HAL_RCC_ClockConfig+0x20c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e093      	b.n	800117c <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001054:	4b4c      	ldr	r3, [pc, #304]	; (8001188 <HAL_RCC_ClockConfig+0x20c>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f023 0203 	bic.w	r2, r3, #3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	4949      	ldr	r1, [pc, #292]	; (8001188 <HAL_RCC_ClockConfig+0x20c>)
 8001062:	4313      	orrs	r3, r2
 8001064:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001066:	f7ff f935 	bl	80002d4 <HAL_GetTick>
 800106a:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d112      	bne.n	800109a <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001074:	e00a      	b.n	800108c <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001076:	f7ff f92d 	bl	80002d4 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	f241 3288 	movw	r2, #5000	; 0x1388
 8001084:	4293      	cmp	r3, r2
 8001086:	d901      	bls.n	800108c <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e077      	b.n	800117c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800108c:	4b3e      	ldr	r3, [pc, #248]	; (8001188 <HAL_RCC_ClockConfig+0x20c>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 030c 	and.w	r3, r3, #12
 8001094:	2b04      	cmp	r3, #4
 8001096:	d1ee      	bne.n	8001076 <HAL_RCC_ClockConfig+0xfa>
 8001098:	e027      	b.n	80010ea <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d11d      	bne.n	80010de <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010a2:	e00a      	b.n	80010ba <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010a4:	f7ff f916 	bl	80002d4 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e060      	b.n	800117c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010ba:	4b33      	ldr	r3, [pc, #204]	; (8001188 <HAL_RCC_ClockConfig+0x20c>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 030c 	and.w	r3, r3, #12
 80010c2:	2b08      	cmp	r3, #8
 80010c4:	d1ee      	bne.n	80010a4 <HAL_RCC_ClockConfig+0x128>
 80010c6:	e010      	b.n	80010ea <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010c8:	f7ff f904 	bl	80002d4 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d901      	bls.n	80010de <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e04e      	b.n	800117c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80010de:	4b2a      	ldr	r3, [pc, #168]	; (8001188 <HAL_RCC_ClockConfig+0x20c>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 030c 	and.w	r3, r3, #12
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1ee      	bne.n	80010c8 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80010ea:	4b26      	ldr	r3, [pc, #152]	; (8001184 <HAL_RCC_ClockConfig+0x208>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d210      	bcs.n	800111a <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010f8:	4b22      	ldr	r3, [pc, #136]	; (8001184 <HAL_RCC_ClockConfig+0x208>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f023 0207 	bic.w	r2, r3, #7
 8001100:	4920      	ldr	r1, [pc, #128]	; (8001184 <HAL_RCC_ClockConfig+0x208>)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	4313      	orrs	r3, r2
 8001106:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001108:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <HAL_RCC_ClockConfig+0x208>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0307 	and.w	r3, r3, #7
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	429a      	cmp	r2, r3
 8001114:	d001      	beq.n	800111a <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e030      	b.n	800117c <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	2b00      	cmp	r3, #0
 8001124:	d008      	beq.n	8001138 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001126:	4b18      	ldr	r3, [pc, #96]	; (8001188 <HAL_RCC_ClockConfig+0x20c>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	4915      	ldr	r1, [pc, #84]	; (8001188 <HAL_RCC_ClockConfig+0x20c>)
 8001134:	4313      	orrs	r3, r2
 8001136:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0308 	and.w	r3, r3, #8
 8001140:	2b00      	cmp	r3, #0
 8001142:	d009      	beq.n	8001158 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001144:	4b10      	ldr	r3, [pc, #64]	; (8001188 <HAL_RCC_ClockConfig+0x20c>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	490d      	ldr	r1, [pc, #52]	; (8001188 <HAL_RCC_ClockConfig+0x20c>)
 8001154:	4313      	orrs	r3, r2
 8001156:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001158:	f000 f81c 	bl	8001194 <HAL_RCC_GetSysClockFreq>
 800115c:	4602      	mov	r2, r0
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_RCC_ClockConfig+0x20c>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	091b      	lsrs	r3, r3, #4
 8001164:	f003 030f 	and.w	r3, r3, #15
 8001168:	4908      	ldr	r1, [pc, #32]	; (800118c <HAL_RCC_ClockConfig+0x210>)
 800116a:	5ccb      	ldrb	r3, [r1, r3]
 800116c:	fa22 f303 	lsr.w	r3, r2, r3
 8001170:	4a07      	ldr	r2, [pc, #28]	; (8001190 <HAL_RCC_ClockConfig+0x214>)
 8001172:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001174:	2000      	movs	r0, #0
 8001176:	f7ff f86b 	bl	8000250 <HAL_InitTick>
  
  return HAL_OK;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40022000 	.word	0x40022000
 8001188:	40021000 	.word	0x40021000
 800118c:	0800663c 	.word	0x0800663c
 8001190:	20000070 	.word	0x20000070

08001194 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001194:	b490      	push	{r4, r7}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800119a:	4b2a      	ldr	r3, [pc, #168]	; (8001244 <HAL_RCC_GetSysClockFreq+0xb0>)
 800119c:	1d3c      	adds	r4, r7, #4
 800119e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011a4:	f240 2301 	movw	r3, #513	; 0x201
 80011a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
 80011ae:	2300      	movs	r3, #0
 80011b0:	61bb      	str	r3, [r7, #24]
 80011b2:	2300      	movs	r3, #0
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80011be:	4b22      	ldr	r3, [pc, #136]	; (8001248 <HAL_RCC_GetSysClockFreq+0xb4>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f003 030c 	and.w	r3, r3, #12
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	d002      	beq.n	80011d4 <HAL_RCC_GetSysClockFreq+0x40>
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d003      	beq.n	80011da <HAL_RCC_GetSysClockFreq+0x46>
 80011d2:	e02d      	b.n	8001230 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011d4:	4b1d      	ldr	r3, [pc, #116]	; (800124c <HAL_RCC_GetSysClockFreq+0xb8>)
 80011d6:	623b      	str	r3, [r7, #32]
      break;
 80011d8:	e02d      	b.n	8001236 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	0c9b      	lsrs	r3, r3, #18
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80011e6:	4413      	add	r3, r2
 80011e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011ec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d013      	beq.n	8001220 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <HAL_RCC_GetSysClockFreq+0xb4>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	0c5b      	lsrs	r3, r3, #17
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001206:	4413      	add	r3, r2
 8001208:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800120c:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	4a0e      	ldr	r2, [pc, #56]	; (800124c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001212:	fb02 f203 	mul.w	r2, r2, r3
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	fbb2 f3f3 	udiv	r3, r2, r3
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
 800121e:	e004      	b.n	800122a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001224:	fb02 f303 	mul.w	r3, r2, r3
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	623b      	str	r3, [r7, #32]
      break;
 800122e:	e002      	b.n	8001236 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001232:	623b      	str	r3, [r7, #32]
      break;
 8001234:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001236:	6a3b      	ldr	r3, [r7, #32]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3728      	adds	r7, #40	; 0x28
 800123c:	46bd      	mov	sp, r7
 800123e:	bc90      	pop	{r4, r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	080062dc 	.word	0x080062dc
 8001248:	40021000 	.word	0x40021000
 800124c:	00b71b00 	.word	0x00b71b00
 8001250:	003d0900 	.word	0x003d0900
 8001254:	007a1200 	.word	0x007a1200

08001258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800125c:	4b02      	ldr	r3, [pc, #8]	; (8001268 <HAL_RCC_GetHCLKFreq+0x10>)
 800125e:	681b      	ldr	r3, [r3, #0]
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	20000070 	.word	0x20000070

0800126c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001270:	f7ff fff2 	bl	8001258 <HAL_RCC_GetHCLKFreq>
 8001274:	4602      	mov	r2, r0
 8001276:	4b05      	ldr	r3, [pc, #20]	; (800128c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	0a1b      	lsrs	r3, r3, #8
 800127c:	f003 0307 	and.w	r3, r3, #7
 8001280:	4903      	ldr	r1, [pc, #12]	; (8001290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001282:	5ccb      	ldrb	r3, [r1, r3]
 8001284:	fa22 f303 	lsr.w	r3, r2, r3
}    
 8001288:	4618      	mov	r0, r3
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40021000 	.word	0x40021000
 8001290:	0800664c 	.word	0x0800664c

08001294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001298:	f7ff ffde 	bl	8001258 <HAL_RCC_GetHCLKFreq>
 800129c:	4602      	mov	r2, r0
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	0adb      	lsrs	r3, r3, #11
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	4903      	ldr	r1, [pc, #12]	; (80012b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012aa:	5ccb      	ldrb	r3, [r1, r3]
 80012ac:	fa22 f303 	lsr.w	r3, r2, r3
} 
 80012b0:	4618      	mov	r0, r3
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40021000 	.word	0x40021000
 80012b8:	0800664c 	.word	0x0800664c

080012bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <RCC_Delay+0x38>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <RCC_Delay+0x3c>)
 80012ca:	fba2 2303 	umull	r2, r3, r2, r3
 80012ce:	0a5b      	lsrs	r3, r3, #9
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	fb02 f303 	mul.w	r3, r2, r3
 80012d6:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80012d8:	bf00      	nop
}
 80012da:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	1e5a      	subs	r2, r3, #1
 80012e0:	60fa      	str	r2, [r7, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f8      	bne.n	80012d8 <RCC_Delay+0x1c>
}
 80012e6:	bf00      	nop
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000070 	.word	0x20000070
 80012f8:	10624dd3 	.word	0x10624dd3

080012fc <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08c      	sub	sp, #48	; 0x30
 8001300:	af02      	add	r7, sp, #8
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
 800130e:	2300      	movs	r3, #0
 8001310:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8001316:	2301      	movs	r3, #1
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001326:	2b01      	cmp	r3, #1
 8001328:	d101      	bne.n	800132e <HAL_SPI_TransmitReceive+0x32>
 800132a:	2302      	movs	r3, #2
 800132c:	e182      	b.n	8001634 <HAL_SPI_TransmitReceive+0x338>
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2201      	movs	r2, #1
 8001332:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001336:	f7fe ffcd 	bl	80002d4 <HAL_GetTick>
 800133a:	6178      	str	r0, [r7, #20]
  
  tmp  = hspi->State;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001342:	b2db      	uxtb	r3, r3
 8001344:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	61bb      	str	r3, [r7, #24]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d00e      	beq.n	8001370 <HAL_SPI_TransmitReceive+0x74>
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001358:	d106      	bne.n	8001368 <HAL_SPI_TransmitReceive+0x6c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d102      	bne.n	8001368 <HAL_SPI_TransmitReceive+0x6c>
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	2b04      	cmp	r3, #4
 8001366:	d003      	beq.n	8001370 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8001368:	2302      	movs	r3, #2
 800136a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800136e:	e157      	b.n	8001620 <HAL_SPI_TransmitReceive+0x324>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d005      	beq.n	8001382 <HAL_SPI_TransmitReceive+0x86>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d002      	beq.n	8001382 <HAL_SPI_TransmitReceive+0x86>
 800137c:	887b      	ldrh	r3, [r7, #2]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d103      	bne.n	800138a <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001388:	e14a      	b.n	8001620 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b01      	cmp	r3, #1
 8001394:	d103      	bne.n	800139e <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2205      	movs	r2, #5
 800139a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2200      	movs	r2, #0
 80013a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	887a      	ldrh	r2, [r7, #2]
 80013ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	887a      	ldrh	r2, [r7, #2]
 80013b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	68ba      	ldr	r2, [r7, #8]
 80013ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	887a      	ldrh	r2, [r7, #2]
 80013c0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	887a      	ldrh	r2, [r7, #2]
 80013c6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2200      	movs	r2, #0
 80013cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2200      	movs	r2, #0
 80013d2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013de:	2b40      	cmp	r3, #64	; 0x40
 80013e0:	d007      	beq.n	80013f2 <HAL_SPI_TransmitReceive+0xf6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013fa:	d171      	bne.n	80014e0 <HAL_SPI_TransmitReceive+0x1e4>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d004      	beq.n	800140e <HAL_SPI_TransmitReceive+0x112>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001408:	b29b      	uxth	r3, r3
 800140a:	2b01      	cmp	r3, #1
 800140c:	d15d      	bne.n	80014ca <HAL_SPI_TransmitReceive+0x1ce>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	881a      	ldrh	r2, [r3, #0]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	3302      	adds	r3, #2
 800141c:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001422:	b29b      	uxth	r3, r3
 8001424:	3b01      	subs	r3, #1
 8001426:	b29a      	uxth	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800142c:	e04d      	b.n	80014ca <HAL_SPI_TransmitReceive+0x1ce>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	2b00      	cmp	r3, #0
 8001432:	d01c      	beq.n	800146e <HAL_SPI_TransmitReceive+0x172>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001438:	b29b      	uxth	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d017      	beq.n	800146e <HAL_SPI_TransmitReceive+0x172>
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b02      	cmp	r3, #2
 800144a:	d110      	bne.n	800146e <HAL_SPI_TransmitReceive+0x172>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	881a      	ldrh	r2, [r3, #0]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	3302      	adds	r3, #2
 800145a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001460:	b29b      	uxth	r3, r3
 8001462:	3b01      	subs	r3, #1
 8001464:	b29a      	uxth	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001472:	b29b      	uxth	r3, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	d018      	beq.n	80014aa <HAL_SPI_TransmitReceive+0x1ae>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b01      	cmp	r3, #1
 8001484:	d111      	bne.n	80014aa <HAL_SPI_TransmitReceive+0x1ae>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	b29a      	uxth	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3302      	adds	r3, #2
 8001496:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800149c:	b29b      	uxth	r3, r3
 800149e:	3b01      	subs	r3, #1
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 80014a6:	2301      	movs	r3, #1
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80014aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b0:	d00b      	beq.n	80014ca <HAL_SPI_TransmitReceive+0x1ce>
 80014b2:	f7fe ff0f 	bl	80002d4 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014be:	429a      	cmp	r2, r3
 80014c0:	d803      	bhi.n	80014ca <HAL_SPI_TransmitReceive+0x1ce>
      {
        errorcode = HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80014c8:	e0aa      	b.n	8001620 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1ac      	bne.n	800142e <HAL_SPI_TransmitReceive+0x132>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80014d8:	b29b      	uxth	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1a7      	bne.n	800142e <HAL_SPI_TransmitReceive+0x132>
 80014de:	e070      	b.n	80015c2 <HAL_SPI_TransmitReceive+0x2c6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d004      	beq.n	80014f2 <HAL_SPI_TransmitReceive+0x1f6>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d15d      	bne.n	80015ae <HAL_SPI_TransmitReceive+0x2b2>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	330c      	adds	r3, #12
 80014f8:	68ba      	ldr	r2, [r7, #8]
 80014fa:	7812      	ldrb	r2, [r2, #0]
 80014fc:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	3301      	adds	r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001508:	b29b      	uxth	r3, r3
 800150a:	3b01      	subs	r3, #1
 800150c:	b29a      	uxth	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001512:	e04c      	b.n	80015ae <HAL_SPI_TransmitReceive+0x2b2>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	2b00      	cmp	r3, #0
 8001518:	d01c      	beq.n	8001554 <HAL_SPI_TransmitReceive+0x258>
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800151e:	b29b      	uxth	r3, r3
 8001520:	2b00      	cmp	r3, #0
 8001522:	d017      	beq.n	8001554 <HAL_SPI_TransmitReceive+0x258>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b02      	cmp	r3, #2
 8001530:	d110      	bne.n	8001554 <HAL_SPI_TransmitReceive+0x258>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1c5a      	adds	r2, r3, #1
 8001536:	60ba      	str	r2, [r7, #8]
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	6812      	ldr	r2, [r2, #0]
 800153c:	320c      	adds	r2, #12
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001546:	b29b      	uxth	r3, r3
 8001548:	3b01      	subs	r3, #1
 800154a:	b29a      	uxth	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001558:	b29b      	uxth	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d017      	beq.n	800158e <HAL_SPI_TransmitReceive+0x292>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b01      	cmp	r3, #1
 800156a:	d110      	bne.n	800158e <HAL_SPI_TransmitReceive+0x292>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68d9      	ldr	r1, [r3, #12]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	1c5a      	adds	r2, r3, #1
 8001576:	607a      	str	r2, [r7, #4]
 8001578:	b2ca      	uxtb	r2, r1
 800157a:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001580:	b29b      	uxth	r3, r3
 8001582:	3b01      	subs	r3, #1
 8001584:	b29a      	uxth	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 800158a:	2301      	movs	r3, #1
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800158e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001594:	d00b      	beq.n	80015ae <HAL_SPI_TransmitReceive+0x2b2>
 8001596:	f7fe fe9d 	bl	80002d4 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d803      	bhi.n	80015ae <HAL_SPI_TransmitReceive+0x2b2>
      {
        errorcode = HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80015ac:	e038      	b.n	8001620 <HAL_SPI_TransmitReceive+0x324>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1ad      	bne.n	8001514 <HAL_SPI_TransmitReceive+0x218>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80015bc:	b29b      	uxth	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1a8      	bne.n	8001514 <HAL_SPI_TransmitReceive+0x218>
    }
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015c8:	2201      	movs	r2, #1
 80015ca:	2102      	movs	r1, #2
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f000 f835 	bl	800163c <SPI_WaitFlagStateUntilTimeout>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_SPI_TransmitReceive+0x2e4>
  {
    errorcode = HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80015de:	e01f      	b.n	8001620 <HAL_SPI_TransmitReceive+0x324>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f000 f892 	bl	800170e <SPI_CheckFlag_BSY>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d006      	beq.n	80015fe <HAL_SPI_TransmitReceive+0x302>
  {
    errorcode = HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2220      	movs	r2, #32
 80015fa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80015fc:	e010      	b.n	8001620 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10b      	bne.n	800161e <HAL_SPI_TransmitReceive+0x322>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	e000      	b.n	8001620 <HAL_SPI_TransmitReceive+0x324>
  }
  
error :
 800161e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001630:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8001634:	4618      	mov	r0, r3
 8001636:	3728      	adds	r7, #40	; 0x28
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
 8001648:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800164a:	e04d      	b.n	80016e8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001652:	d049      	beq.n	80016e8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d007      	beq.n	800166a <SPI_WaitFlagStateUntilTimeout+0x2e>
 800165a:	f7fe fe3b 	bl	80002d4 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	d83e      	bhi.n	80016e8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001678:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001682:	d111      	bne.n	80016a8 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800168c:	d004      	beq.n	8001698 <SPI_WaitFlagStateUntilTimeout+0x5c>
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001696:	d107      	bne.n	80016a8 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016b0:	d110      	bne.n	80016d4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6819      	ldr	r1, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80016c0:	400b      	ands	r3, r1
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80016d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e00e      	b.n	8001706 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	4013      	ands	r3, r2
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d101      	bne.n	80016fc <SPI_WaitFlagStateUntilTimeout+0xc0>
 80016f8:	2201      	movs	r2, #1
 80016fa:	e000      	b.n	80016fe <SPI_WaitFlagStateUntilTimeout+0xc2>
 80016fc:	2200      	movs	r2, #0
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	429a      	cmp	r2, r3
 8001702:	d1a3      	bne.n	800164c <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af02      	add	r7, sp, #8
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	2200      	movs	r2, #0
 8001722:	2180      	movs	r1, #128	; 0x80
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f7ff ff89 	bl	800163c <SPI_WaitFlagStateUntilTimeout>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d007      	beq.n	8001740 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001734:	f043 0220 	orr.w	r2, r3, #32
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e000      	b.n	8001742 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e057      	b.n	800180c <HAL_SPI_Init+0xc2>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d102      	bne.n	8001774 <HAL_SPI_Init+0x2a>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f001 f8ea 	bl	8002948 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2202      	movs	r2, #2
 8001778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800178a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	431a      	orrs	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	431a      	orrs	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	ea42 0103 	orr.w	r1, r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	0c1b      	lsrs	r3, r3, #16
 80017d2:	f003 0104 	and.w	r1, r3, #4
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80017ea:	611a      	str	r2, [r3, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	69da      	ldr	r2, [r3, #28]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017fa:	61da      	str	r2, [r3, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e03f      	b.n	80018a6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d106      	bne.n	8001840 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f001 f8d0 	bl	80029e0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2224      	movs	r2, #36	; 0x24
 8001844:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001856:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 fb8b 	bl	8001f74 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	691a      	ldr	r2, [r3, #16]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800186c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	695a      	ldr	r2, [r3, #20]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800187c:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800188c:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2220      	movs	r2, #32
 8001898:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2220      	movs	r2, #32
 80018a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b088      	sub	sp, #32
 80018b2:	af02      	add	r7, sp, #8
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	603b      	str	r3, [r7, #0]
 80018ba:	4613      	mov	r3, r2
 80018bc:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b20      	cmp	r3, #32
 80018cc:	f040 8083 	bne.w	80019d6 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d002      	beq.n	80018dc <HAL_UART_Transmit+0x2e>
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e07b      	b.n	80019d8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d101      	bne.n	80018ee <HAL_UART_Transmit+0x40>
 80018ea:	2302      	movs	r3, #2
 80018ec:	e074      	b.n	80019d8 <HAL_UART_Transmit+0x12a>
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2221      	movs	r2, #33	; 0x21
 8001900:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001904:	f7fe fce6 	bl	80002d4 <HAL_GetTick>
 8001908:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	88fa      	ldrh	r2, [r7, #6]
 800190e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	88fa      	ldrh	r2, [r7, #6]
 8001914:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001916:	e042      	b.n	800199e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800191c:	b29b      	uxth	r3, r3
 800191e:	3b01      	subs	r3, #1
 8001920:	b29a      	uxth	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800192e:	d122      	bne.n	8001976 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	2200      	movs	r2, #0
 8001938:	2180      	movs	r1, #128	; 0x80
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f000 f9b0 	bl	8001ca0 <UART_WaitOnFlagUntilTimeout>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e046      	b.n	80019d8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800195c:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d103      	bne.n	800196e <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	3302      	adds	r3, #2
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	e017      	b.n	800199e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	3301      	adds	r3, #1
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	e013      	b.n	800199e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	2200      	movs	r2, #0
 800197e:	2180      	movs	r1, #128	; 0x80
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f000 f98d 	bl	8001ca0 <UART_WaitOnFlagUntilTimeout>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e023      	b.n	80019d8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	60ba      	str	r2, [r7, #8]
 8001996:	781a      	ldrb	r2, [r3, #0]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1b7      	bne.n	8001918 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2200      	movs	r2, #0
 80019b0:	2140      	movs	r1, #64	; 0x40
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f000 f974 	bl	8001ca0 <UART_WaitOnFlagUntilTimeout>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e00a      	b.n	80019d8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2220      	movs	r2, #32
 80019c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e000      	b.n	80019d8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80019d6:	2302      	movs	r3, #2
  }
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	4613      	mov	r3, r2
 80019ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b20      	cmp	r3, #32
 80019f8:	d140      	bne.n	8001a7c <HAL_UART_Receive_IT+0x9c>
  {
    if((pData == NULL) || (Size == 0U))
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d002      	beq.n	8001a06 <HAL_UART_Receive_IT+0x26>
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e039      	b.n	8001a7e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d101      	bne.n	8001a18 <HAL_UART_Receive_IT+0x38>
 8001a14:	2302      	movs	r3, #2
 8001a16:	e032      	b.n	8001a7e <HAL_UART_Receive_IT+0x9e>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	88fa      	ldrh	r2, [r7, #6]
 8001a2a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	88fa      	ldrh	r2, [r7, #6]
 8001a30:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2222      	movs	r2, #34	; 0x22
 8001a3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a56:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	695a      	ldr	r2, [r3, #20]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0201 	orr.w	r2, r2, #1
 8001a66:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0220 	orr.w	r2, r2, #32
 8001a76:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	e000      	b.n	8001a7e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001a7c:	2302      	movs	r3, #2
  }
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10d      	bne.n	8001ada <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	f003 0320 	and.w	r3, r3, #32
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d008      	beq.n	8001ada <HAL_UART_IRQHandler+0x52>
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	f003 0320 	and.w	r3, r3, #32
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f9cc 	bl	8001e70 <UART_Receive_IT>
      return;
 8001ad8:	e0cb      	b.n	8001c72 <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 80ab 	beq.w	8001c38 <HAL_UART_IRQHandler+0x1b0>
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d105      	bne.n	8001af8 <HAL_UART_IRQHandler+0x70>
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 80a0 	beq.w	8001c38 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00a      	beq.n	8001b18 <HAL_UART_IRQHandler+0x90>
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b10:	f043 0201 	orr.w	r2, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00a      	beq.n	8001b38 <HAL_UART_IRQHandler+0xb0>
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b30:	f043 0202 	orr.w	r2, r3, #2
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00a      	beq.n	8001b58 <HAL_UART_IRQHandler+0xd0>
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b50:	f043 0204 	orr.w	r2, r3, #4
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00a      	beq.n	8001b78 <HAL_UART_IRQHandler+0xf0>
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d005      	beq.n	8001b78 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b70:	f043 0208 	orr.w	r2, r3, #8
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d077      	beq.n	8001c70 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f003 0320 	and.w	r3, r3, #32
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d007      	beq.n	8001b9a <HAL_UART_IRQHandler+0x112>
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	f003 0320 	and.w	r3, r3, #32
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d002      	beq.n	8001b9a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f96b 	bl	8001e70 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	bf14      	ite	ne
 8001ba8:	2301      	movne	r3, #1
 8001baa:	2300      	moveq	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb4:	f003 0308 	and.w	r3, r3, #8
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d102      	bne.n	8001bc2 <HAL_UART_IRQHandler+0x13a>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d031      	beq.n	8001c26 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f8b6 	bl	8001d34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d023      	beq.n	8001c1e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	695a      	ldr	r2, [r3, #20]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001be4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d013      	beq.n	8001c16 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf2:	4a21      	ldr	r2, [pc, #132]	; (8001c78 <HAL_UART_IRQHandler+0x1f0>)
 8001bf4:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fca2 	bl	8000544 <HAL_DMA_Abort_IT>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d016      	beq.n	8001c34 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c10:	4610      	mov	r0, r2
 8001c12:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c14:	e00e      	b.n	8001c34 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f839 	bl	8001c8e <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c1c:	e00a      	b.n	8001c34 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f835 	bl	8001c8e <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c24:	e006      	b.n	8001c34 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f831 	bl	8001c8e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001c32:	e01d      	b.n	8001c70 <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c34:	bf00      	nop
    return;
 8001c36:	e01b      	b.n	8001c70 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d008      	beq.n	8001c54 <HAL_UART_IRQHandler+0x1cc>
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f8a2 	bl	8001d96 <UART_Transmit_IT>
    return;
 8001c52:	e00e      	b.n	8001c72 <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d009      	beq.n	8001c72 <HAL_UART_IRQHandler+0x1ea>
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d004      	beq.n	8001c72 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f8e9 	bl	8001e40 <UART_EndTransmit_IT>
    return;
 8001c6e:	e000      	b.n	8001c72 <HAL_UART_IRQHandler+0x1ea>
    return;
 8001c70:	bf00      	nop
  }
}
 8001c72:	3720      	adds	r7, #32
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	08001d6f 	.word	0x08001d6f

08001c7c <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr

08001c8e <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	4613      	mov	r3, r2
 8001cae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001cb0:	e02c      	b.n	8001d0c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb8:	d028      	beq.n	8001d0c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d007      	beq.n	8001cd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8001cc0:	f7fe fb08 	bl	80002d4 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d21d      	bcs.n	8001d0c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001cde:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	695a      	ldr	r2, [r3, #20]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0201 	bic.w	r2, r2, #1
 8001cee:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e00f      	b.n	8001d2c <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	4013      	ands	r3, r2
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	bf0c      	ite	eq
 8001d1c:	2301      	moveq	r3, #1
 8001d1e:	2300      	movne	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	461a      	mov	r2, r3
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d0c3      	beq.n	8001cb2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001d4a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	695a      	ldr	r2, [r3, #20]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0201 	bic.w	r2, r2, #1
 8001d5a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr

08001d6e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b084      	sub	sp, #16
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f7ff ff80 	bl	8001c8e <HAL_UART_ErrorCallback>
}
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b085      	sub	sp, #20
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b21      	cmp	r3, #33	; 0x21
 8001da8:	d144      	bne.n	8001e34 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001db2:	d11a      	bne.n	8001dea <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001dc8:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d105      	bne.n	8001dde <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	1c9a      	adds	r2, r3, #2
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	621a      	str	r2, [r3, #32]
 8001ddc:	e00e      	b.n	8001dfc <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	1c5a      	adds	r2, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	621a      	str	r2, [r3, #32]
 8001de8:	e008      	b.n	8001dfc <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	1c59      	adds	r1, r3, #1
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6211      	str	r1, [r2, #32]
 8001df4:	781a      	ldrb	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	3b01      	subs	r3, #1
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10f      	bne.n	8001e30 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	e000      	b.n	8001e36 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001e34:	2302      	movs	r3, #2
  }
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e56:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ff0b 	bl	8001c7c <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b22      	cmp	r3, #34	; 0x22
 8001e82:	d171      	bne.n	8001f68 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e8c:	d123      	bne.n	8001ed6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e92:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10e      	bne.n	8001eba <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb2:	1c9a      	adds	r2, r3, #2
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	629a      	str	r2, [r3, #40]	; 0x28
 8001eb8:	e029      	b.n	8001f0e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ece:	1c5a      	adds	r2, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	629a      	str	r2, [r3, #40]	; 0x28
 8001ed4:	e01b      	b.n	8001f0e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10a      	bne.n	8001ef4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6858      	ldr	r0, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee8:	1c59      	adds	r1, r3, #1
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6291      	str	r1, [r2, #40]	; 0x28
 8001eee:	b2c2      	uxtb	r2, r0
 8001ef0:	701a      	strb	r2, [r3, #0]
 8001ef2:	e00c      	b.n	8001f0e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f00:	1c58      	adds	r0, r3, #1
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	6288      	str	r0, [r1, #40]	; 0x28
 8001f06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d120      	bne.n	8001f64 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0220 	bic.w	r2, r2, #32
 8001f30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f40:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	695a      	ldr	r2, [r3, #20]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0201 	bic.w	r2, r2, #1
 8001f50:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2220      	movs	r2, #32
 8001f56:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f948 	bl	80021f0 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8001f60:	2300      	movs	r3, #0
 8001f62:	e002      	b.n	8001f6a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	e000      	b.n	8001f6a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8001f68:	2302      	movs	r3, #2
  }
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f74:	b5b0      	push	{r4, r5, r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001fb6:	f023 030c 	bic.w	r3, r3, #12
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6812      	ldr	r2, [r2, #0]
 8001fbe:	68f9      	ldr	r1, [r7, #12]
 8001fc0:	430b      	orrs	r3, r1
 8001fc2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	699a      	ldr	r2, [r3, #24]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a6f      	ldr	r2, [pc, #444]	; (800219c <UART_SetConfig+0x228>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d16b      	bne.n	80020bc <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001fe4:	f7ff f956 	bl	8001294 <HAL_RCC_GetPCLK2Freq>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	009a      	lsls	r2, r3, #2
 8001ff2:	441a      	add	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffe:	4a68      	ldr	r2, [pc, #416]	; (80021a0 <UART_SetConfig+0x22c>)
 8002000:	fba2 2303 	umull	r2, r3, r2, r3
 8002004:	095b      	lsrs	r3, r3, #5
 8002006:	011c      	lsls	r4, r3, #4
 8002008:	f7ff f944 	bl	8001294 <HAL_RCC_GetPCLK2Freq>
 800200c:	4602      	mov	r2, r0
 800200e:	4613      	mov	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	009a      	lsls	r2, r3, #2
 8002016:	441a      	add	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002022:	f7ff f937 	bl	8001294 <HAL_RCC_GetPCLK2Freq>
 8002026:	4602      	mov	r2, r0
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	009a      	lsls	r2, r3, #2
 8002030:	441a      	add	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	fbb2 f3f3 	udiv	r3, r2, r3
 800203c:	4a58      	ldr	r2, [pc, #352]	; (80021a0 <UART_SetConfig+0x22c>)
 800203e:	fba2 2303 	umull	r2, r3, r2, r3
 8002042:	095b      	lsrs	r3, r3, #5
 8002044:	2264      	movs	r2, #100	; 0x64
 8002046:	fb02 f303 	mul.w	r3, r2, r3
 800204a:	1aeb      	subs	r3, r5, r3
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	3332      	adds	r3, #50	; 0x32
 8002050:	4a53      	ldr	r2, [pc, #332]	; (80021a0 <UART_SetConfig+0x22c>)
 8002052:	fba2 2303 	umull	r2, r3, r2, r3
 8002056:	095b      	lsrs	r3, r3, #5
 8002058:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800205c:	441c      	add	r4, r3
 800205e:	f7ff f919 	bl	8001294 <HAL_RCC_GetPCLK2Freq>
 8002062:	4602      	mov	r2, r0
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	009a      	lsls	r2, r3, #2
 800206c:	441a      	add	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	fbb2 f5f3 	udiv	r5, r2, r3
 8002078:	f7ff f90c 	bl	8001294 <HAL_RCC_GetPCLK2Freq>
 800207c:	4602      	mov	r2, r0
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	009a      	lsls	r2, r3, #2
 8002086:	441a      	add	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002092:	4a43      	ldr	r2, [pc, #268]	; (80021a0 <UART_SetConfig+0x22c>)
 8002094:	fba2 2303 	umull	r2, r3, r2, r3
 8002098:	095b      	lsrs	r3, r3, #5
 800209a:	2264      	movs	r2, #100	; 0x64
 800209c:	fb02 f303 	mul.w	r3, r2, r3
 80020a0:	1aeb      	subs	r3, r5, r3
 80020a2:	011b      	lsls	r3, r3, #4
 80020a4:	3332      	adds	r3, #50	; 0x32
 80020a6:	4a3e      	ldr	r2, [pc, #248]	; (80021a0 <UART_SetConfig+0x22c>)
 80020a8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ac:	095b      	lsrs	r3, r3, #5
 80020ae:	f003 020f 	and.w	r2, r3, #15
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4422      	add	r2, r4
 80020b8:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80020ba:	e06a      	b.n	8002192 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80020bc:	f7ff f8d6 	bl	800126c <HAL_RCC_GetPCLK1Freq>
 80020c0:	4602      	mov	r2, r0
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	009a      	lsls	r2, r3, #2
 80020ca:	441a      	add	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d6:	4a32      	ldr	r2, [pc, #200]	; (80021a0 <UART_SetConfig+0x22c>)
 80020d8:	fba2 2303 	umull	r2, r3, r2, r3
 80020dc:	095b      	lsrs	r3, r3, #5
 80020de:	011c      	lsls	r4, r3, #4
 80020e0:	f7ff f8c4 	bl	800126c <HAL_RCC_GetPCLK1Freq>
 80020e4:	4602      	mov	r2, r0
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	009a      	lsls	r2, r3, #2
 80020ee:	441a      	add	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	fbb2 f5f3 	udiv	r5, r2, r3
 80020fa:	f7ff f8b7 	bl	800126c <HAL_RCC_GetPCLK1Freq>
 80020fe:	4602      	mov	r2, r0
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	009a      	lsls	r2, r3, #2
 8002108:	441a      	add	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	fbb2 f3f3 	udiv	r3, r2, r3
 8002114:	4a22      	ldr	r2, [pc, #136]	; (80021a0 <UART_SetConfig+0x22c>)
 8002116:	fba2 2303 	umull	r2, r3, r2, r3
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	2264      	movs	r2, #100	; 0x64
 800211e:	fb02 f303 	mul.w	r3, r2, r3
 8002122:	1aeb      	subs	r3, r5, r3
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	3332      	adds	r3, #50	; 0x32
 8002128:	4a1d      	ldr	r2, [pc, #116]	; (80021a0 <UART_SetConfig+0x22c>)
 800212a:	fba2 2303 	umull	r2, r3, r2, r3
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002134:	441c      	add	r4, r3
 8002136:	f7ff f899 	bl	800126c <HAL_RCC_GetPCLK1Freq>
 800213a:	4602      	mov	r2, r0
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	009a      	lsls	r2, r3, #2
 8002144:	441a      	add	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002150:	f7ff f88c 	bl	800126c <HAL_RCC_GetPCLK1Freq>
 8002154:	4602      	mov	r2, r0
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	009a      	lsls	r2, r3, #2
 800215e:	441a      	add	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	fbb2 f3f3 	udiv	r3, r2, r3
 800216a:	4a0d      	ldr	r2, [pc, #52]	; (80021a0 <UART_SetConfig+0x22c>)
 800216c:	fba2 2303 	umull	r2, r3, r2, r3
 8002170:	095b      	lsrs	r3, r3, #5
 8002172:	2264      	movs	r2, #100	; 0x64
 8002174:	fb02 f303 	mul.w	r3, r2, r3
 8002178:	1aeb      	subs	r3, r5, r3
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	3332      	adds	r3, #50	; 0x32
 800217e:	4a08      	ldr	r2, [pc, #32]	; (80021a0 <UART_SetConfig+0x22c>)
 8002180:	fba2 2303 	umull	r2, r3, r2, r3
 8002184:	095b      	lsrs	r3, r3, #5
 8002186:	f003 020f 	and.w	r2, r3, #15
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4422      	add	r2, r4
 8002190:	609a      	str	r2, [r3, #8]
}
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bdb0      	pop	{r4, r5, r7, pc}
 800219a:	bf00      	nop
 800219c:	40013800 	.word	0x40013800
 80021a0:	51eb851f 	.word	0x51eb851f

080021a4 <BoardInitialze>:
#include "board_init.h"
#include "wizchip_init.h"

void BoardInitialze(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
#else
	spiInitailize();
#endif
#endif

	W6100Initialze();
 80021a8:	f000 fd50 	bl	8002c4c <W6100Initialze>

}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <_write>:
		#endif /* __GNUC__*/
#endif

#ifdef True_STD
	int _write(int fd, char *str, int len)
	{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
		for(int i=0; i<len; i++)
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	e00b      	b.n	80021da <_write+0x2a>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)&str[i], 1, 0xFFFF);
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	18d1      	adds	r1, r2, r3
 80021c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021cc:	2201      	movs	r2, #1
 80021ce:	4807      	ldr	r0, [pc, #28]	; (80021ec <_write+0x3c>)
 80021d0:	f7ff fb6d 	bl	80018ae <HAL_UART_Transmit>
		for(int i=0; i<len; i++)
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	3301      	adds	r3, #1
 80021d8:	617b      	str	r3, [r7, #20]
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	429a      	cmp	r2, r3
 80021e0:	dbef      	blt.n	80021c2 <_write+0x12>
		}
		return len;
 80021e2:	687b      	ldr	r3, [r7, #4]
	}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	200009cc 	.word	0x200009cc

080021f0 <HAL_UART_RxCpltCallback>:
#endif

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
    */

     /*
       loop back received data
     */
     HAL_UART_Receive_IT(&huart1, rxData, 1);
 80021f8:	2201      	movs	r2, #1
 80021fa:	4907      	ldr	r1, [pc, #28]	; (8002218 <HAL_UART_RxCpltCallback+0x28>)
 80021fc:	4807      	ldr	r0, [pc, #28]	; (800221c <HAL_UART_RxCpltCallback+0x2c>)
 80021fe:	f7ff fbef 	bl	80019e0 <HAL_UART_Receive_IT>
     HAL_UART_Transmit(&huart1, rxData, 1, 1000);
 8002202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002206:	2201      	movs	r2, #1
 8002208:	4903      	ldr	r1, [pc, #12]	; (8002218 <HAL_UART_RxCpltCallback+0x28>)
 800220a:	4804      	ldr	r0, [pc, #16]	; (800221c <HAL_UART_RxCpltCallback+0x2c>)
 800220c:	f7ff fb4f 	bl	80018ae <HAL_UART_Transmit>
}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20000170 	.word	0x20000170
 800221c:	200009cc 	.word	0x200009cc

08002220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002220:	b590      	push	{r4, r7, lr}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t syslock = SYS_NET_LOCK;
 8002226:	2302      	movs	r3, #2
 8002228:	71fb      	strb	r3, [r7, #7]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800222a:	f7fd fffb 	bl	8000224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800222e:	f000 f85b 	bl	80022e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002232:	f000 f8ff 	bl	8002434 <MX_GPIO_Init>
  MX_SPI2_Init();
 8002236:	f000 f89d 	bl	8002374 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800223a:	f000 f8d1 	bl	80023e0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rxData, 1);
 800223e:	2201      	movs	r2, #1
 8002240:	4922      	ldr	r1, [pc, #136]	; (80022cc <main+0xac>)
 8002242:	4823      	ldr	r0, [pc, #140]	; (80022d0 <main+0xb0>)
 8002244:	f7ff fbcc 	bl	80019e0 <HAL_UART_Receive_IT>

  printf("< W6100EVB Hal Driver Loop Back TEST!! >\n");
 8002248:	4822      	ldr	r0, [pc, #136]	; (80022d4 <main+0xb4>)
 800224a:	f003 f8eb 	bl	8005424 <puts>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800224e:	2201      	movs	r2, #1
 8002250:	2140      	movs	r1, #64	; 0x40
 8002252:	4821      	ldr	r0, [pc, #132]	; (80022d8 <main+0xb8>)
 8002254:	f7fe fc16 	bl	8000a84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8002258:	2201      	movs	r2, #1
 800225a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800225e:	481e      	ldr	r0, [pc, #120]	; (80022d8 <main+0xb8>)
 8002260:	f7fe fc10 	bl	8000a84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8002264:	2201      	movs	r2, #1
 8002266:	f44f 7100 	mov.w	r1, #512	; 0x200
 800226a:	481b      	ldr	r0, [pc, #108]	; (80022d8 <main+0xb8>)
 800226c:	f7fe fc0a 	bl	8000a84 <HAL_GPIO_WritePin>

  BoardInitialze();
 8002270:	f7ff ff98 	bl	80021a4 <BoardInitialze>
  ctlwizchip(CW_SYS_UNLOCK,& syslock);
 8002274:	1dfb      	adds	r3, r7, #7
 8002276:	4619      	mov	r1, r3
 8002278:	2001      	movs	r0, #1
 800227a:	f002 f953 	bl	8004524 <ctlwizchip>
  ctlnetwork(CN_SET_NETINFO,&gWIZNETINFO);
 800227e:	4917      	ldr	r1, [pc, #92]	; (80022dc <main+0xbc>)
 8002280:	2000      	movs	r0, #0
 8002282:	f002 fadf 	bl	8004844 <ctlnetwork>

  printf("VERSION(%x) = %.2x \r\n", _VER_,getVER());
 8002286:	f44f 7000 	mov.w	r0, #512	; 0x200
 800228a:	f000 ff73 	bl	8003174 <WIZCHIP_READ>
 800228e:	4603      	mov	r3, r0
 8002290:	021c      	lsls	r4, r3, #8
 8002292:	f44f 7040 	mov.w	r0, #768	; 0x300
 8002296:	f000 ff6d 	bl	8003174 <WIZCHIP_READ>
 800229a:	4603      	mov	r3, r0
 800229c:	4423      	add	r3, r4
 800229e:	461a      	mov	r2, r3
 80022a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022a4:	480e      	ldr	r0, [pc, #56]	; (80022e0 <main+0xc0>)
 80022a6:	f003 f837 	bl	8005318 <iprintf>
  print_network_information();
 80022aa:	f000 f941 	bl	8002530 <print_network_information>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	loopback_tcps(0, data_buf, 5000, AS_IPV6);
 80022ae:	2317      	movs	r3, #23
 80022b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b4:	490b      	ldr	r1, [pc, #44]	; (80022e4 <main+0xc4>)
 80022b6:	2000      	movs	r0, #0
 80022b8:	f000 fdae 	bl	8002e18 <loopback_tcps>
	loopback_tcps(1, data_buf, 5001, AS_IPV4);
 80022bc:	2302      	movs	r3, #2
 80022be:	f241 3289 	movw	r2, #5001	; 0x1389
 80022c2:	4908      	ldr	r1, [pc, #32]	; (80022e4 <main+0xc4>)
 80022c4:	2001      	movs	r0, #1
 80022c6:	f000 fda7 	bl	8002e18 <loopback_tcps>
	loopback_tcps(0, data_buf, 5000, AS_IPV6);
 80022ca:	e7f0      	b.n	80022ae <main+0x8e>
 80022cc:	20000170 	.word	0x20000170
 80022d0:	200009cc 	.word	0x200009cc
 80022d4:	080062ec 	.word	0x080062ec
 80022d8:	40011000 	.word	0x40011000
 80022dc:	20000008 	.word	0x20000008
 80022e0:	08006318 	.word	0x08006318
 80022e4:	200001cc 	.word	0x200001cc

080022e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b090      	sub	sp, #64	; 0x40
 80022ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ee:	f107 0318 	add.w	r3, r7, #24
 80022f2:	2228      	movs	r2, #40	; 0x28
 80022f4:	2100      	movs	r1, #0
 80022f6:	4618      	mov	r0, r3
 80022f8:	f003 f806 	bl	8005308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022fc:	1d3b      	adds	r3, r7, #4
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	605a      	str	r2, [r3, #4]
 8002304:	609a      	str	r2, [r3, #8]
 8002306:	60da      	str	r2, [r3, #12]
 8002308:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800230a:	2301      	movs	r3, #1
 800230c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800230e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002312:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002314:	2300      	movs	r3, #0
 8002316:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002318:	2301      	movs	r3, #1
 800231a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800231c:	2302      	movs	r3, #2
 800231e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002320:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002324:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002326:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800232a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800232c:	f107 0318 	add.w	r3, r7, #24
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe fbbf 	bl	8000ab4 <HAL_RCC_OscConfig>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800233c:	f000 facc 	bl	80028d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002340:	230f      	movs	r3, #15
 8002342:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002344:	2302      	movs	r3, #2
 8002346:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002348:	2300      	movs	r3, #0
 800234a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800234c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002350:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002356:	1d3b      	adds	r3, r7, #4
 8002358:	2102      	movs	r1, #2
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe fe0e 	bl	8000f7c <HAL_RCC_ClockConfig>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002366:	f000 fab7 	bl	80028d8 <Error_Handler>
  }
}
 800236a:	bf00      	nop
 800236c:	3740      	adds	r7, #64	; 0x40
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002378:	4b17      	ldr	r3, [pc, #92]	; (80023d8 <MX_SPI2_Init+0x64>)
 800237a:	4a18      	ldr	r2, [pc, #96]	; (80023dc <MX_SPI2_Init+0x68>)
 800237c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800237e:	4b16      	ldr	r3, [pc, #88]	; (80023d8 <MX_SPI2_Init+0x64>)
 8002380:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002384:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002386:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <MX_SPI2_Init+0x64>)
 8002388:	2200      	movs	r2, #0
 800238a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <MX_SPI2_Init+0x64>)
 800238e:	2200      	movs	r2, #0
 8002390:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002392:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <MX_SPI2_Init+0x64>)
 8002394:	2200      	movs	r2, #0
 8002396:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002398:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <MX_SPI2_Init+0x64>)
 800239a:	2200      	movs	r2, #0
 800239c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800239e:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <MX_SPI2_Init+0x64>)
 80023a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023a6:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <MX_SPI2_Init+0x64>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023ac:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <MX_SPI2_Init+0x64>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80023b2:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <MX_SPI2_Init+0x64>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023b8:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <MX_SPI2_Init+0x64>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <MX_SPI2_Init+0x64>)
 80023c0:	220a      	movs	r2, #10
 80023c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80023c4:	4804      	ldr	r0, [pc, #16]	; (80023d8 <MX_SPI2_Init+0x64>)
 80023c6:	f7ff f9c0 	bl	800174a <HAL_SPI_Init>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80023d0:	f000 fa82 	bl	80028d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80023d4:	bf00      	nop
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20000174 	.word	0x20000174
 80023dc:	40003800 	.word	0x40003800

080023e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <MX_USART1_UART_Init+0x4c>)
 80023e6:	4a12      	ldr	r2, [pc, #72]	; (8002430 <MX_USART1_UART_Init+0x50>)
 80023e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023ea:	4b10      	ldr	r3, [pc, #64]	; (800242c <MX_USART1_UART_Init+0x4c>)
 80023ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <MX_USART1_UART_Init+0x4c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <MX_USART1_UART_Init+0x4c>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023fe:	4b0b      	ldr	r3, [pc, #44]	; (800242c <MX_USART1_UART_Init+0x4c>)
 8002400:	2200      	movs	r2, #0
 8002402:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002404:	4b09      	ldr	r3, [pc, #36]	; (800242c <MX_USART1_UART_Init+0x4c>)
 8002406:	220c      	movs	r2, #12
 8002408:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800240a:	4b08      	ldr	r3, [pc, #32]	; (800242c <MX_USART1_UART_Init+0x4c>)
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <MX_USART1_UART_Init+0x4c>)
 8002412:	2200      	movs	r2, #0
 8002414:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002416:	4805      	ldr	r0, [pc, #20]	; (800242c <MX_USART1_UART_Init+0x4c>)
 8002418:	f7ff f9fc 	bl	8001814 <HAL_UART_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002422:	f000 fa59 	bl	80028d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	200009cc 	.word	0x200009cc
 8002430:	40013800 	.word	0x40013800

08002434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243a:	f107 0310 	add.w	r3, r7, #16
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	605a      	str	r2, [r3, #4]
 8002444:	609a      	str	r2, [r3, #8]
 8002446:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002448:	4b34      	ldr	r3, [pc, #208]	; (800251c <MX_GPIO_Init+0xe8>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	4a33      	ldr	r2, [pc, #204]	; (800251c <MX_GPIO_Init+0xe8>)
 800244e:	f043 0308 	orr.w	r3, r3, #8
 8002452:	6193      	str	r3, [r2, #24]
 8002454:	4b31      	ldr	r3, [pc, #196]	; (800251c <MX_GPIO_Init+0xe8>)
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	f003 0308 	and.w	r3, r3, #8
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002460:	4b2e      	ldr	r3, [pc, #184]	; (800251c <MX_GPIO_Init+0xe8>)
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	4a2d      	ldr	r2, [pc, #180]	; (800251c <MX_GPIO_Init+0xe8>)
 8002466:	f043 0310 	orr.w	r3, r3, #16
 800246a:	6193      	str	r3, [r2, #24]
 800246c:	4b2b      	ldr	r3, [pc, #172]	; (800251c <MX_GPIO_Init+0xe8>)
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	f003 0310 	and.w	r3, r3, #16
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002478:	4b28      	ldr	r3, [pc, #160]	; (800251c <MX_GPIO_Init+0xe8>)
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	4a27      	ldr	r2, [pc, #156]	; (800251c <MX_GPIO_Init+0xe8>)
 800247e:	f043 0304 	orr.w	r3, r3, #4
 8002482:	6193      	str	r3, [r2, #24]
 8002484:	4b25      	ldr	r3, [pc, #148]	; (800251c <MX_GPIO_Init+0xe8>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	607b      	str	r3, [r7, #4]
 800248e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002490:	4b22      	ldr	r3, [pc, #136]	; (800251c <MX_GPIO_Init+0xe8>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	4a21      	ldr	r2, [pc, #132]	; (800251c <MX_GPIO_Init+0xe8>)
 8002496:	f043 0320 	orr.w	r3, r3, #32
 800249a:	6193      	str	r3, [r2, #24]
 800249c:	4b1f      	ldr	r3, [pc, #124]	; (800251c <MX_GPIO_Init+0xe8>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f003 0320 	and.w	r3, r3, #32
 80024a4:	603b      	str	r3, [r7, #0]
 80024a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80024a8:	2200      	movs	r2, #0
 80024aa:	f44f 7150 	mov.w	r1, #832	; 0x340
 80024ae:	481c      	ldr	r0, [pc, #112]	; (8002520 <MX_GPIO_Init+0xec>)
 80024b0:	f7fe fae8 	bl	8000a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80024b4:	2200      	movs	r2, #0
 80024b6:	2180      	movs	r1, #128	; 0x80
 80024b8:	481a      	ldr	r0, [pc, #104]	; (8002524 <MX_GPIO_Init+0xf0>)
 80024ba:	f7fe fae3 	bl	8000a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 80024be:	f44f 7381 	mov.w	r3, #258	; 0x102
 80024c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024c4:	4b18      	ldr	r3, [pc, #96]	; (8002528 <MX_GPIO_Init+0xf4>)
 80024c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024cc:	f107 0310 	add.w	r3, r7, #16
 80024d0:	4619      	mov	r1, r3
 80024d2:	4816      	ldr	r0, [pc, #88]	; (800252c <MX_GPIO_Init+0xf8>)
 80024d4:	f7fe f93e 	bl	8000754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80024d8:	f44f 7350 	mov.w	r3, #832	; 0x340
 80024dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024de:	2301      	movs	r3, #1
 80024e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e6:	2302      	movs	r3, #2
 80024e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ea:	f107 0310 	add.w	r3, r7, #16
 80024ee:	4619      	mov	r1, r3
 80024f0:	480b      	ldr	r0, [pc, #44]	; (8002520 <MX_GPIO_Init+0xec>)
 80024f2:	f7fe f92f 	bl	8000754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80024f6:	2380      	movs	r3, #128	; 0x80
 80024f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024fa:	2301      	movs	r3, #1
 80024fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002502:	2302      	movs	r3, #2
 8002504:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002506:	f107 0310 	add.w	r3, r7, #16
 800250a:	4619      	mov	r1, r3
 800250c:	4805      	ldr	r0, [pc, #20]	; (8002524 <MX_GPIO_Init+0xf0>)
 800250e:	f7fe f921 	bl	8000754 <HAL_GPIO_Init>

}
 8002512:	bf00      	nop
 8002514:	3720      	adds	r7, #32
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000
 8002520:	40011000 	.word	0x40011000
 8002524:	40011400 	.word	0x40011400
 8002528:	10110000 	.word	0x10110000
 800252c:	40010c00 	.word	0x40010c00

08002530 <print_network_information>:

		return ch;
 }
#endif
void print_network_information(void)
{
 8002530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002534:	b094      	sub	sp, #80	; 0x50
 8002536:	af0e      	add	r7, sp, #56	; 0x38
	wizchip_getnetinfo(&gWIZNETINFO);
 8002538:	48a4      	ldr	r0, [pc, #656]	; (80027cc <print_network_information+0x29c>)
 800253a:	f002 fd5f 	bl	8004ffc <wizchip_getnetinfo>
	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 800253e:	4ba3      	ldr	r3, [pc, #652]	; (80027cc <print_network_information+0x29c>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	4ba1      	ldr	r3, [pc, #644]	; (80027cc <print_network_information+0x29c>)
 8002546:	785b      	ldrb	r3, [r3, #1]
 8002548:	461c      	mov	r4, r3
 800254a:	4ba0      	ldr	r3, [pc, #640]	; (80027cc <print_network_information+0x29c>)
 800254c:	789b      	ldrb	r3, [r3, #2]
 800254e:	461d      	mov	r5, r3
 8002550:	4b9e      	ldr	r3, [pc, #632]	; (80027cc <print_network_information+0x29c>)
 8002552:	78db      	ldrb	r3, [r3, #3]
 8002554:	461a      	mov	r2, r3
 8002556:	4b9d      	ldr	r3, [pc, #628]	; (80027cc <print_network_information+0x29c>)
 8002558:	791b      	ldrb	r3, [r3, #4]
 800255a:	4619      	mov	r1, r3
 800255c:	4b9b      	ldr	r3, [pc, #620]	; (80027cc <print_network_information+0x29c>)
 800255e:	795b      	ldrb	r3, [r3, #5]
 8002560:	9302      	str	r3, [sp, #8]
 8002562:	9101      	str	r1, [sp, #4]
 8002564:	9200      	str	r2, [sp, #0]
 8002566:	462b      	mov	r3, r5
 8002568:	4622      	mov	r2, r4
 800256a:	4601      	mov	r1, r0
 800256c:	4898      	ldr	r0, [pc, #608]	; (80027d0 <print_network_information+0x2a0>)
 800256e:	f002 fed3 	bl	8005318 <iprintf>
	printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 8002572:	4b96      	ldr	r3, [pc, #600]	; (80027cc <print_network_information+0x29c>)
 8002574:	799b      	ldrb	r3, [r3, #6]
 8002576:	4619      	mov	r1, r3
 8002578:	4b94      	ldr	r3, [pc, #592]	; (80027cc <print_network_information+0x29c>)
 800257a:	79db      	ldrb	r3, [r3, #7]
 800257c:	461a      	mov	r2, r3
 800257e:	4b93      	ldr	r3, [pc, #588]	; (80027cc <print_network_information+0x29c>)
 8002580:	7a1b      	ldrb	r3, [r3, #8]
 8002582:	4618      	mov	r0, r3
 8002584:	4b91      	ldr	r3, [pc, #580]	; (80027cc <print_network_information+0x29c>)
 8002586:	7a5b      	ldrb	r3, [r3, #9]
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	4603      	mov	r3, r0
 800258c:	4891      	ldr	r0, [pc, #580]	; (80027d4 <print_network_information+0x2a4>)
 800258e:	f002 fec3 	bl	8005318 <iprintf>
	printf("SN Mask	   : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 8002592:	4b8e      	ldr	r3, [pc, #568]	; (80027cc <print_network_information+0x29c>)
 8002594:	7a9b      	ldrb	r3, [r3, #10]
 8002596:	4619      	mov	r1, r3
 8002598:	4b8c      	ldr	r3, [pc, #560]	; (80027cc <print_network_information+0x29c>)
 800259a:	7adb      	ldrb	r3, [r3, #11]
 800259c:	461a      	mov	r2, r3
 800259e:	4b8b      	ldr	r3, [pc, #556]	; (80027cc <print_network_information+0x29c>)
 80025a0:	7b1b      	ldrb	r3, [r3, #12]
 80025a2:	4618      	mov	r0, r3
 80025a4:	4b89      	ldr	r3, [pc, #548]	; (80027cc <print_network_information+0x29c>)
 80025a6:	7b5b      	ldrb	r3, [r3, #13]
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	4603      	mov	r3, r0
 80025ac:	488a      	ldr	r0, [pc, #552]	; (80027d8 <print_network_information+0x2a8>)
 80025ae:	f002 feb3 	bl	8005318 <iprintf>
	printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 80025b2:	4b86      	ldr	r3, [pc, #536]	; (80027cc <print_network_information+0x29c>)
 80025b4:	7b9b      	ldrb	r3, [r3, #14]
 80025b6:	4619      	mov	r1, r3
 80025b8:	4b84      	ldr	r3, [pc, #528]	; (80027cc <print_network_information+0x29c>)
 80025ba:	7bdb      	ldrb	r3, [r3, #15]
 80025bc:	461a      	mov	r2, r3
 80025be:	4b83      	ldr	r3, [pc, #524]	; (80027cc <print_network_information+0x29c>)
 80025c0:	7c1b      	ldrb	r3, [r3, #16]
 80025c2:	4618      	mov	r0, r3
 80025c4:	4b81      	ldr	r3, [pc, #516]	; (80027cc <print_network_information+0x29c>)
 80025c6:	7c5b      	ldrb	r3, [r3, #17]
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	4603      	mov	r3, r0
 80025cc:	4883      	ldr	r0, [pc, #524]	; (80027dc <print_network_information+0x2ac>)
 80025ce:	f002 fea3 	bl	8005318 <iprintf>
	printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 80025d2:	4b7e      	ldr	r3, [pc, #504]	; (80027cc <print_network_information+0x29c>)
 80025d4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80025d8:	4619      	mov	r1, r3
 80025da:	4b7c      	ldr	r3, [pc, #496]	; (80027cc <print_network_information+0x29c>)
 80025dc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b7a      	ldr	r3, [pc, #488]	; (80027cc <print_network_information+0x29c>)
 80025e4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80025e8:	4618      	mov	r0, r3
 80025ea:	4b78      	ldr	r3, [pc, #480]	; (80027cc <print_network_information+0x29c>)
 80025ec:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	4603      	mov	r3, r0
 80025f4:	487a      	ldr	r0, [pc, #488]	; (80027e0 <print_network_information+0x2b0>)
 80025f6:	f002 fe8f 	bl	8005318 <iprintf>
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 80025fa:	4b74      	ldr	r3, [pc, #464]	; (80027cc <print_network_information+0x29c>)
 80025fc:	7c9b      	ldrb	r3, [r3, #18]
 80025fe:	469c      	mov	ip, r3
 8002600:	4b72      	ldr	r3, [pc, #456]	; (80027cc <print_network_information+0x29c>)
 8002602:	7cdb      	ldrb	r3, [r3, #19]
 8002604:	469e      	mov	lr, r3
 8002606:	4b71      	ldr	r3, [pc, #452]	; (80027cc <print_network_information+0x29c>)
 8002608:	7d1b      	ldrb	r3, [r3, #20]
 800260a:	4698      	mov	r8, r3
 800260c:	4b6f      	ldr	r3, [pc, #444]	; (80027cc <print_network_information+0x29c>)
 800260e:	7d5b      	ldrb	r3, [r3, #21]
 8002610:	4618      	mov	r0, r3
									gWIZNETINFO.lla[4],gWIZNETINFO.lla[5],gWIZNETINFO.lla[6],gWIZNETINFO.lla[7],\
 8002612:	4b6e      	ldr	r3, [pc, #440]	; (80027cc <print_network_information+0x29c>)
 8002614:	7d9b      	ldrb	r3, [r3, #22]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 8002616:	461c      	mov	r4, r3
									gWIZNETINFO.lla[4],gWIZNETINFO.lla[5],gWIZNETINFO.lla[6],gWIZNETINFO.lla[7],\
 8002618:	4b6c      	ldr	r3, [pc, #432]	; (80027cc <print_network_information+0x29c>)
 800261a:	7ddb      	ldrb	r3, [r3, #23]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 800261c:	461d      	mov	r5, r3
									gWIZNETINFO.lla[4],gWIZNETINFO.lla[5],gWIZNETINFO.lla[6],gWIZNETINFO.lla[7],\
 800261e:	4b6b      	ldr	r3, [pc, #428]	; (80027cc <print_network_information+0x29c>)
 8002620:	7e1b      	ldrb	r3, [r3, #24]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 8002622:	461e      	mov	r6, r3
									gWIZNETINFO.lla[4],gWIZNETINFO.lla[5],gWIZNETINFO.lla[6],gWIZNETINFO.lla[7],\
 8002624:	4b69      	ldr	r3, [pc, #420]	; (80027cc <print_network_information+0x29c>)
 8002626:	7e5b      	ldrb	r3, [r3, #25]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 8002628:	617b      	str	r3, [r7, #20]
									gWIZNETINFO.lla[8],gWIZNETINFO.lla[9],gWIZNETINFO.lla[10],gWIZNETINFO.lla[11],\
 800262a:	4b68      	ldr	r3, [pc, #416]	; (80027cc <print_network_information+0x29c>)
 800262c:	7e9b      	ldrb	r3, [r3, #26]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 800262e:	613b      	str	r3, [r7, #16]
									gWIZNETINFO.lla[8],gWIZNETINFO.lla[9],gWIZNETINFO.lla[10],gWIZNETINFO.lla[11],\
 8002630:	4b66      	ldr	r3, [pc, #408]	; (80027cc <print_network_information+0x29c>)
 8002632:	7edb      	ldrb	r3, [r3, #27]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 8002634:	60fb      	str	r3, [r7, #12]
									gWIZNETINFO.lla[8],gWIZNETINFO.lla[9],gWIZNETINFO.lla[10],gWIZNETINFO.lla[11],\
 8002636:	4b65      	ldr	r3, [pc, #404]	; (80027cc <print_network_information+0x29c>)
 8002638:	7f1b      	ldrb	r3, [r3, #28]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 800263a:	60bb      	str	r3, [r7, #8]
									gWIZNETINFO.lla[8],gWIZNETINFO.lla[9],gWIZNETINFO.lla[10],gWIZNETINFO.lla[11],\
 800263c:	4b63      	ldr	r3, [pc, #396]	; (80027cc <print_network_information+0x29c>)
 800263e:	7f5b      	ldrb	r3, [r3, #29]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 8002640:	607b      	str	r3, [r7, #4]
									gWIZNETINFO.lla[12],gWIZNETINFO.lla[13],gWIZNETINFO.lla[14],gWIZNETINFO.lla[15]);
 8002642:	4b62      	ldr	r3, [pc, #392]	; (80027cc <print_network_information+0x29c>)
 8002644:	7f9b      	ldrb	r3, [r3, #30]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 8002646:	603b      	str	r3, [r7, #0]
									gWIZNETINFO.lla[12],gWIZNETINFO.lla[13],gWIZNETINFO.lla[14],gWIZNETINFO.lla[15]);
 8002648:	4b60      	ldr	r3, [pc, #384]	; (80027cc <print_network_information+0x29c>)
 800264a:	7fdb      	ldrb	r3, [r3, #31]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 800264c:	4619      	mov	r1, r3
									gWIZNETINFO.lla[12],gWIZNETINFO.lla[13],gWIZNETINFO.lla[14],gWIZNETINFO.lla[15]);
 800264e:	4b5f      	ldr	r3, [pc, #380]	; (80027cc <print_network_information+0x29c>)
 8002650:	f893 3020 	ldrb.w	r3, [r3, #32]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 8002654:	461a      	mov	r2, r3
									gWIZNETINFO.lla[12],gWIZNETINFO.lla[13],gWIZNETINFO.lla[14],gWIZNETINFO.lla[15]);
 8002656:	4b5d      	ldr	r3, [pc, #372]	; (80027cc <print_network_information+0x29c>)
 8002658:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 800265c:	930c      	str	r3, [sp, #48]	; 0x30
 800265e:	920b      	str	r2, [sp, #44]	; 0x2c
 8002660:	910a      	str	r1, [sp, #40]	; 0x28
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	9209      	str	r2, [sp, #36]	; 0x24
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	9208      	str	r2, [sp, #32]
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	9207      	str	r2, [sp, #28]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	9206      	str	r2, [sp, #24]
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	9205      	str	r2, [sp, #20]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	9304      	str	r3, [sp, #16]
 800267a:	9603      	str	r6, [sp, #12]
 800267c:	9502      	str	r5, [sp, #8]
 800267e:	9401      	str	r4, [sp, #4]
 8002680:	9000      	str	r0, [sp, #0]
 8002682:	4643      	mov	r3, r8
 8002684:	4672      	mov	r2, lr
 8002686:	4661      	mov	r1, ip
 8002688:	4856      	ldr	r0, [pc, #344]	; (80027e4 <print_network_information+0x2b4>)
 800268a:	f002 fe45 	bl	8005318 <iprintf>
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 800268e:	4b4f      	ldr	r3, [pc, #316]	; (80027cc <print_network_information+0x29c>)
 8002690:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002694:	469c      	mov	ip, r3
 8002696:	4b4d      	ldr	r3, [pc, #308]	; (80027cc <print_network_information+0x29c>)
 8002698:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800269c:	469e      	mov	lr, r3
 800269e:	4b4b      	ldr	r3, [pc, #300]	; (80027cc <print_network_information+0x29c>)
 80026a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026a4:	4698      	mov	r8, r3
 80026a6:	4b49      	ldr	r3, [pc, #292]	; (80027cc <print_network_information+0x29c>)
 80026a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026ac:	4618      	mov	r0, r3
									gWIZNETINFO.gua[4],gWIZNETINFO.gua[5],gWIZNETINFO.gua[6],gWIZNETINFO.gua[7],\
 80026ae:	4b47      	ldr	r3, [pc, #284]	; (80027cc <print_network_information+0x29c>)
 80026b0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80026b4:	461c      	mov	r4, r3
									gWIZNETINFO.gua[4],gWIZNETINFO.gua[5],gWIZNETINFO.gua[6],gWIZNETINFO.gua[7],\
 80026b6:	4b45      	ldr	r3, [pc, #276]	; (80027cc <print_network_information+0x29c>)
 80026b8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80026bc:	461d      	mov	r5, r3
									gWIZNETINFO.gua[4],gWIZNETINFO.gua[5],gWIZNETINFO.gua[6],gWIZNETINFO.gua[7],\
 80026be:	4b43      	ldr	r3, [pc, #268]	; (80027cc <print_network_information+0x29c>)
 80026c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80026c4:	461e      	mov	r6, r3
									gWIZNETINFO.gua[4],gWIZNETINFO.gua[5],gWIZNETINFO.gua[6],gWIZNETINFO.gua[7],\
 80026c6:	4b41      	ldr	r3, [pc, #260]	; (80027cc <print_network_information+0x29c>)
 80026c8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80026cc:	617b      	str	r3, [r7, #20]
									gWIZNETINFO.gua[8],gWIZNETINFO.gua[9],gWIZNETINFO.gua[10],gWIZNETINFO.gua[11],\
 80026ce:	4b3f      	ldr	r3, [pc, #252]	; (80027cc <print_network_information+0x29c>)
 80026d0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80026d4:	613b      	str	r3, [r7, #16]
									gWIZNETINFO.gua[8],gWIZNETINFO.gua[9],gWIZNETINFO.gua[10],gWIZNETINFO.gua[11],\
 80026d6:	4b3d      	ldr	r3, [pc, #244]	; (80027cc <print_network_information+0x29c>)
 80026d8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80026dc:	60fb      	str	r3, [r7, #12]
									gWIZNETINFO.gua[8],gWIZNETINFO.gua[9],gWIZNETINFO.gua[10],gWIZNETINFO.gua[11],\
 80026de:	4b3b      	ldr	r3, [pc, #236]	; (80027cc <print_network_information+0x29c>)
 80026e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80026e4:	60bb      	str	r3, [r7, #8]
									gWIZNETINFO.gua[8],gWIZNETINFO.gua[9],gWIZNETINFO.gua[10],gWIZNETINFO.gua[11],\
 80026e6:	4b39      	ldr	r3, [pc, #228]	; (80027cc <print_network_information+0x29c>)
 80026e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80026ec:	607b      	str	r3, [r7, #4]
									gWIZNETINFO.gua[12],gWIZNETINFO.gua[13],gWIZNETINFO.gua[14],gWIZNETINFO.gua[15]);
 80026ee:	4b37      	ldr	r3, [pc, #220]	; (80027cc <print_network_information+0x29c>)
 80026f0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80026f4:	603b      	str	r3, [r7, #0]
									gWIZNETINFO.gua[12],gWIZNETINFO.gua[13],gWIZNETINFO.gua[14],gWIZNETINFO.gua[15]);
 80026f6:	4b35      	ldr	r3, [pc, #212]	; (80027cc <print_network_information+0x29c>)
 80026f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80026fc:	4619      	mov	r1, r3
									gWIZNETINFO.gua[12],gWIZNETINFO.gua[13],gWIZNETINFO.gua[14],gWIZNETINFO.gua[15]);
 80026fe:	4b33      	ldr	r3, [pc, #204]	; (80027cc <print_network_information+0x29c>)
 8002700:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 8002704:	461a      	mov	r2, r3
									gWIZNETINFO.gua[12],gWIZNETINFO.gua[13],gWIZNETINFO.gua[14],gWIZNETINFO.gua[15]);
 8002706:	4b31      	ldr	r3, [pc, #196]	; (80027cc <print_network_information+0x29c>)
 8002708:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 800270c:	930c      	str	r3, [sp, #48]	; 0x30
 800270e:	920b      	str	r2, [sp, #44]	; 0x2c
 8002710:	910a      	str	r1, [sp, #40]	; 0x28
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	9209      	str	r2, [sp, #36]	; 0x24
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	9208      	str	r2, [sp, #32]
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	9207      	str	r2, [sp, #28]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	9206      	str	r2, [sp, #24]
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	9205      	str	r2, [sp, #20]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	9304      	str	r3, [sp, #16]
 800272a:	9603      	str	r6, [sp, #12]
 800272c:	9502      	str	r5, [sp, #8]
 800272e:	9401      	str	r4, [sp, #4]
 8002730:	9000      	str	r0, [sp, #0]
 8002732:	4643      	mov	r3, r8
 8002734:	4672      	mov	r2, lr
 8002736:	4661      	mov	r1, ip
 8002738:	482b      	ldr	r0, [pc, #172]	; (80027e8 <print_network_information+0x2b8>)
 800273a:	f002 fded 	bl	8005318 <iprintf>
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 800273e:	4b23      	ldr	r3, [pc, #140]	; (80027cc <print_network_information+0x29c>)
 8002740:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002744:	469c      	mov	ip, r3
 8002746:	4b21      	ldr	r3, [pc, #132]	; (80027cc <print_network_information+0x29c>)
 8002748:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800274c:	469e      	mov	lr, r3
 800274e:	4b1f      	ldr	r3, [pc, #124]	; (80027cc <print_network_information+0x29c>)
 8002750:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002754:	4698      	mov	r8, r3
 8002756:	4b1d      	ldr	r3, [pc, #116]	; (80027cc <print_network_information+0x29c>)
 8002758:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800275c:	4618      	mov	r0, r3
									gWIZNETINFO.sn6[4],gWIZNETINFO.sn6[5],gWIZNETINFO.sn6[6],gWIZNETINFO.sn6[7],\
 800275e:	4b1b      	ldr	r3, [pc, #108]	; (80027cc <print_network_information+0x29c>)
 8002760:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 8002764:	461c      	mov	r4, r3
									gWIZNETINFO.sn6[4],gWIZNETINFO.sn6[5],gWIZNETINFO.sn6[6],gWIZNETINFO.sn6[7],\
 8002766:	4b19      	ldr	r3, [pc, #100]	; (80027cc <print_network_information+0x29c>)
 8002768:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 800276c:	461d      	mov	r5, r3
									gWIZNETINFO.sn6[4],gWIZNETINFO.sn6[5],gWIZNETINFO.sn6[6],gWIZNETINFO.sn6[7],\
 800276e:	4b17      	ldr	r3, [pc, #92]	; (80027cc <print_network_information+0x29c>)
 8002770:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 8002774:	461e      	mov	r6, r3
									gWIZNETINFO.sn6[4],gWIZNETINFO.sn6[5],gWIZNETINFO.sn6[6],gWIZNETINFO.sn6[7],\
 8002776:	4b15      	ldr	r3, [pc, #84]	; (80027cc <print_network_information+0x29c>)
 8002778:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 800277c:	617b      	str	r3, [r7, #20]
									gWIZNETINFO.sn6[8],gWIZNETINFO.sn6[9],gWIZNETINFO.sn6[10],gWIZNETINFO.sn6[11],\
 800277e:	4b13      	ldr	r3, [pc, #76]	; (80027cc <print_network_information+0x29c>)
 8002780:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 8002784:	613b      	str	r3, [r7, #16]
									gWIZNETINFO.sn6[8],gWIZNETINFO.sn6[9],gWIZNETINFO.sn6[10],gWIZNETINFO.sn6[11],\
 8002786:	4b11      	ldr	r3, [pc, #68]	; (80027cc <print_network_information+0x29c>)
 8002788:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 800278c:	60fb      	str	r3, [r7, #12]
									gWIZNETINFO.sn6[8],gWIZNETINFO.sn6[9],gWIZNETINFO.sn6[10],gWIZNETINFO.sn6[11],\
 800278e:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <print_network_information+0x29c>)
 8002790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 8002794:	60bb      	str	r3, [r7, #8]
									gWIZNETINFO.sn6[8],gWIZNETINFO.sn6[9],gWIZNETINFO.sn6[10],gWIZNETINFO.sn6[11],\
 8002796:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <print_network_information+0x29c>)
 8002798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 800279c:	607b      	str	r3, [r7, #4]
									gWIZNETINFO.sn6[12],gWIZNETINFO.sn6[13],gWIZNETINFO.sn6[14],gWIZNETINFO.sn6[15]);
 800279e:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <print_network_information+0x29c>)
 80027a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 80027a4:	603b      	str	r3, [r7, #0]
									gWIZNETINFO.sn6[12],gWIZNETINFO.sn6[13],gWIZNETINFO.sn6[14],gWIZNETINFO.sn6[15]);
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <print_network_information+0x29c>)
 80027a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 80027ac:	4619      	mov	r1, r3
									gWIZNETINFO.sn6[12],gWIZNETINFO.sn6[13],gWIZNETINFO.sn6[14],gWIZNETINFO.sn6[15]);
 80027ae:	4b07      	ldr	r3, [pc, #28]	; (80027cc <print_network_information+0x29c>)
 80027b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 80027b4:	461a      	mov	r2, r3
									gWIZNETINFO.sn6[12],gWIZNETINFO.sn6[13],gWIZNETINFO.sn6[14],gWIZNETINFO.sn6[15]);
 80027b6:	4b05      	ldr	r3, [pc, #20]	; (80027cc <print_network_information+0x29c>)
 80027b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 80027bc:	930c      	str	r3, [sp, #48]	; 0x30
 80027be:	920b      	str	r2, [sp, #44]	; 0x2c
 80027c0:	910a      	str	r1, [sp, #40]	; 0x28
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	9209      	str	r2, [sp, #36]	; 0x24
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	e010      	b.n	80027ec <print_network_information+0x2bc>
 80027ca:	bf00      	nop
 80027cc:	20000008 	.word	0x20000008
 80027d0:	08006330 	.word	0x08006330
 80027d4:	08006360 	.word	0x08006360
 80027d8:	0800637c 	.word	0x0800637c
 80027dc:	08006398 	.word	0x08006398
 80027e0:	080063b4 	.word	0x080063b4
 80027e4:	080063d0 	.word	0x080063d0
 80027e8:	08006424 	.word	0x08006424
 80027ec:	9208      	str	r2, [sp, #32]
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	9207      	str	r2, [sp, #28]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	9206      	str	r2, [sp, #24]
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	9205      	str	r2, [sp, #20]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	9304      	str	r3, [sp, #16]
 80027fe:	9603      	str	r6, [sp, #12]
 8002800:	9502      	str	r5, [sp, #8]
 8002802:	9401      	str	r4, [sp, #4]
 8002804:	9000      	str	r0, [sp, #0]
 8002806:	4643      	mov	r3, r8
 8002808:	4672      	mov	r2, lr
 800280a:	4661      	mov	r1, ip
 800280c:	482f      	ldr	r0, [pc, #188]	; (80028cc <print_network_information+0x39c>)
 800280e:	f002 fd83 	bl	8005318 <iprintf>
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8002812:	4b2f      	ldr	r3, [pc, #188]	; (80028d0 <print_network_information+0x3a0>)
 8002814:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002818:	469c      	mov	ip, r3
 800281a:	4b2d      	ldr	r3, [pc, #180]	; (80028d0 <print_network_information+0x3a0>)
 800281c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002820:	469e      	mov	lr, r3
 8002822:	4b2b      	ldr	r3, [pc, #172]	; (80028d0 <print_network_information+0x3a0>)
 8002824:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002828:	4698      	mov	r8, r3
 800282a:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <print_network_information+0x3a0>)
 800282c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002830:	4618      	mov	r0, r3
									gWIZNETINFO.gw6[4],gWIZNETINFO.gw6[5],gWIZNETINFO.gw6[6],gWIZNETINFO.gw6[7],\
 8002832:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <print_network_information+0x3a0>)
 8002834:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8002838:	461c      	mov	r4, r3
									gWIZNETINFO.gw6[4],gWIZNETINFO.gw6[5],gWIZNETINFO.gw6[6],gWIZNETINFO.gw6[7],\
 800283a:	4b25      	ldr	r3, [pc, #148]	; (80028d0 <print_network_information+0x3a0>)
 800283c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8002840:	461d      	mov	r5, r3
									gWIZNETINFO.gw6[4],gWIZNETINFO.gw6[5],gWIZNETINFO.gw6[6],gWIZNETINFO.gw6[7],\
 8002842:	4b23      	ldr	r3, [pc, #140]	; (80028d0 <print_network_information+0x3a0>)
 8002844:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8002848:	461e      	mov	r6, r3
									gWIZNETINFO.gw6[4],gWIZNETINFO.gw6[5],gWIZNETINFO.gw6[6],gWIZNETINFO.gw6[7],\
 800284a:	4b21      	ldr	r3, [pc, #132]	; (80028d0 <print_network_information+0x3a0>)
 800284c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8002850:	617b      	str	r3, [r7, #20]
									gWIZNETINFO.gw6[8],gWIZNETINFO.gw6[9],gWIZNETINFO.gw6[10],gWIZNETINFO.gw6[11],\
 8002852:	4b1f      	ldr	r3, [pc, #124]	; (80028d0 <print_network_information+0x3a0>)
 8002854:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8002858:	613b      	str	r3, [r7, #16]
									gWIZNETINFO.gw6[8],gWIZNETINFO.gw6[9],gWIZNETINFO.gw6[10],gWIZNETINFO.gw6[11],\
 800285a:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <print_network_information+0x3a0>)
 800285c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8002860:	60fb      	str	r3, [r7, #12]
									gWIZNETINFO.gw6[8],gWIZNETINFO.gw6[9],gWIZNETINFO.gw6[10],gWIZNETINFO.gw6[11],\
 8002862:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <print_network_information+0x3a0>)
 8002864:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8002868:	60bb      	str	r3, [r7, #8]
									gWIZNETINFO.gw6[8],gWIZNETINFO.gw6[9],gWIZNETINFO.gw6[10],gWIZNETINFO.gw6[11],\
 800286a:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <print_network_information+0x3a0>)
 800286c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8002870:	607b      	str	r3, [r7, #4]
									gWIZNETINFO.gw6[12],gWIZNETINFO.gw6[13],gWIZNETINFO.gw6[14],gWIZNETINFO.gw6[15]);
 8002872:	4b17      	ldr	r3, [pc, #92]	; (80028d0 <print_network_information+0x3a0>)
 8002874:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8002878:	603b      	str	r3, [r7, #0]
									gWIZNETINFO.gw6[12],gWIZNETINFO.gw6[13],gWIZNETINFO.gw6[14],gWIZNETINFO.gw6[15]);
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <print_network_information+0x3a0>)
 800287c:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8002880:	4619      	mov	r1, r3
									gWIZNETINFO.gw6[12],gWIZNETINFO.gw6[13],gWIZNETINFO.gw6[14],gWIZNETINFO.gw6[15]);
 8002882:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <print_network_information+0x3a0>)
 8002884:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8002888:	461a      	mov	r2, r3
									gWIZNETINFO.gw6[12],gWIZNETINFO.gw6[13],gWIZNETINFO.gw6[14],gWIZNETINFO.gw6[15]);
 800288a:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <print_network_information+0x3a0>)
 800288c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8002890:	930c      	str	r3, [sp, #48]	; 0x30
 8002892:	920b      	str	r2, [sp, #44]	; 0x2c
 8002894:	910a      	str	r1, [sp, #40]	; 0x28
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	9209      	str	r2, [sp, #36]	; 0x24
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	9208      	str	r2, [sp, #32]
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	9207      	str	r2, [sp, #28]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	9206      	str	r2, [sp, #24]
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	9205      	str	r2, [sp, #20]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	9304      	str	r3, [sp, #16]
 80028ae:	9603      	str	r6, [sp, #12]
 80028b0:	9502      	str	r5, [sp, #8]
 80028b2:	9401      	str	r4, [sp, #4]
 80028b4:	9000      	str	r0, [sp, #0]
 80028b6:	4643      	mov	r3, r8
 80028b8:	4672      	mov	r2, lr
 80028ba:	4661      	mov	r1, ip
 80028bc:	4805      	ldr	r0, [pc, #20]	; (80028d4 <print_network_information+0x3a4>)
 80028be:	f002 fd2b 	bl	8005318 <iprintf>


}
 80028c2:	bf00      	nop
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028cc:	08006478 	.word	0x08006478
 80028d0:	20000008 	.word	0x20000008
 80028d4:	080064cc 	.word	0x080064cc

080028d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80028ea:	4b15      	ldr	r3, [pc, #84]	; (8002940 <HAL_MspInit+0x5c>)
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	4a14      	ldr	r2, [pc, #80]	; (8002940 <HAL_MspInit+0x5c>)
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	6193      	str	r3, [r2, #24]
 80028f6:	4b12      	ldr	r3, [pc, #72]	; (8002940 <HAL_MspInit+0x5c>)
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002902:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <HAL_MspInit+0x5c>)
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	4a0e      	ldr	r2, [pc, #56]	; (8002940 <HAL_MspInit+0x5c>)
 8002908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290c:	61d3      	str	r3, [r2, #28]
 800290e:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <HAL_MspInit+0x5c>)
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002916:	607b      	str	r3, [r7, #4]
 8002918:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800291a:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <HAL_MspInit+0x60>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	4a04      	ldr	r2, [pc, #16]	; (8002944 <HAL_MspInit+0x60>)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002936:	bf00      	nop
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr
 8002940:	40021000 	.word	0x40021000
 8002944:	40010000 	.word	0x40010000

08002948 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002950:	f107 0310 	add.w	r3, r7, #16
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a1c      	ldr	r2, [pc, #112]	; (80029d4 <HAL_SPI_MspInit+0x8c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d131      	bne.n	80029cc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002968:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <HAL_SPI_MspInit+0x90>)
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	4a1a      	ldr	r2, [pc, #104]	; (80029d8 <HAL_SPI_MspInit+0x90>)
 800296e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002972:	61d3      	str	r3, [r2, #28]
 8002974:	4b18      	ldr	r3, [pc, #96]	; (80029d8 <HAL_SPI_MspInit+0x90>)
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002980:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <HAL_SPI_MspInit+0x90>)
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	4a14      	ldr	r2, [pc, #80]	; (80029d8 <HAL_SPI_MspInit+0x90>)
 8002986:	f043 0308 	orr.w	r3, r3, #8
 800298a:	6193      	str	r3, [r2, #24]
 800298c:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <HAL_SPI_MspInit+0x90>)
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002998:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800299c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299e:	2302      	movs	r3, #2
 80029a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029a2:	2303      	movs	r3, #3
 80029a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a6:	f107 0310 	add.w	r3, r7, #16
 80029aa:	4619      	mov	r1, r3
 80029ac:	480b      	ldr	r0, [pc, #44]	; (80029dc <HAL_SPI_MspInit+0x94>)
 80029ae:	f7fd fed1 	bl	8000754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80029b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c0:	f107 0310 	add.w	r3, r7, #16
 80029c4:	4619      	mov	r1, r3
 80029c6:	4805      	ldr	r0, [pc, #20]	; (80029dc <HAL_SPI_MspInit+0x94>)
 80029c8:	f7fd fec4 	bl	8000754 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80029cc:	bf00      	nop
 80029ce:	3720      	adds	r7, #32
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40003800 	.word	0x40003800
 80029d8:	40021000 	.word	0x40021000
 80029dc:	40010c00 	.word	0x40010c00

080029e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 0310 	add.w	r3, r7, #16
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a20      	ldr	r2, [pc, #128]	; (8002a7c <HAL_UART_MspInit+0x9c>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d139      	bne.n	8002a74 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a00:	4b1f      	ldr	r3, [pc, #124]	; (8002a80 <HAL_UART_MspInit+0xa0>)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	4a1e      	ldr	r2, [pc, #120]	; (8002a80 <HAL_UART_MspInit+0xa0>)
 8002a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a0a:	6193      	str	r3, [r2, #24]
 8002a0c:	4b1c      	ldr	r3, [pc, #112]	; (8002a80 <HAL_UART_MspInit+0xa0>)
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a18:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <HAL_UART_MspInit+0xa0>)
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	4a18      	ldr	r2, [pc, #96]	; (8002a80 <HAL_UART_MspInit+0xa0>)
 8002a1e:	f043 0304 	orr.w	r3, r3, #4
 8002a22:	6193      	str	r3, [r2, #24]
 8002a24:	4b16      	ldr	r3, [pc, #88]	; (8002a80 <HAL_UART_MspInit+0xa0>)
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a36:	2302      	movs	r3, #2
 8002a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3e:	f107 0310 	add.w	r3, r7, #16
 8002a42:	4619      	mov	r1, r3
 8002a44:	480f      	ldr	r0, [pc, #60]	; (8002a84 <HAL_UART_MspInit+0xa4>)
 8002a46:	f7fd fe85 	bl	8000754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a58:	f107 0310 	add.w	r3, r7, #16
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4809      	ldr	r0, [pc, #36]	; (8002a84 <HAL_UART_MspInit+0xa4>)
 8002a60:	f7fd fe78 	bl	8000754 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a64:	2200      	movs	r2, #0
 8002a66:	2100      	movs	r1, #0
 8002a68:	2025      	movs	r0, #37	; 0x25
 8002a6a:	f7fd fd34 	bl	80004d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a6e:	2025      	movs	r0, #37	; 0x25
 8002a70:	f7fd fd4d 	bl	800050e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a74:	bf00      	nop
 8002a76:	3720      	adds	r7, #32
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40013800 	.word	0x40013800
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40010800 	.word	0x40010800

08002a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr

08002a94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a98:	e7fe      	b.n	8002a98 <HardFault_Handler+0x4>

08002a9a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a9e:	e7fe      	b.n	8002a9e <MemManage_Handler+0x4>

08002aa0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aa4:	e7fe      	b.n	8002aa4 <BusFault_Handler+0x4>

08002aa6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aaa:	e7fe      	b.n	8002aaa <UsageFault_Handler+0x4>

08002aac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ab0:	bf00      	nop
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ad4:	f7fd fbec 	bl	80002b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ad8:	bf00      	nop
 8002ada:	bd80      	pop	{r7, pc}

08002adc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ae0:	4802      	ldr	r0, [pc, #8]	; (8002aec <USART1_IRQHandler+0x10>)
 8002ae2:	f7fe ffd1 	bl	8001a88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	200009cc 	.word	0x200009cc

08002af0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	e00a      	b.n	8002b18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b02:	f3af 8000 	nop.w
 8002b06:	4601      	mov	r1, r0
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	1c5a      	adds	r2, r3, #1
 8002b0c:	60ba      	str	r2, [r7, #8]
 8002b0e:	b2ca      	uxtb	r2, r1
 8002b10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	3301      	adds	r3, #1
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	dbf0      	blt.n	8002b02 <_read+0x12>
	}

return len;
 8002b20:	687b      	ldr	r3, [r7, #4]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <_close>:
	}
	return len;
}

int _close(int file)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
	return -1;
 8002b32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr

08002b40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b50:	605a      	str	r2, [r3, #4]
	return 0;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr

08002b5e <_isatty>:

int _isatty(int file)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
	return 1;
 8002b66:	2301      	movs	r3, #1
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr

08002b72 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b085      	sub	sp, #20
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	60f8      	str	r0, [r7, #12]
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	607a      	str	r2, [r7, #4]
	return 0;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr
	...

08002b8c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002b94:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <_sbrk+0x50>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d102      	bne.n	8002ba2 <_sbrk+0x16>
		heap_end = &end;
 8002b9c:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <_sbrk+0x50>)
 8002b9e:	4a10      	ldr	r2, [pc, #64]	; (8002be0 <_sbrk+0x54>)
 8002ba0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002ba2:	4b0e      	ldr	r3, [pc, #56]	; (8002bdc <_sbrk+0x50>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <_sbrk+0x50>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4413      	add	r3, r2
 8002bb0:	466a      	mov	r2, sp
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d907      	bls.n	8002bc6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002bb6:	f002 fb7d 	bl	80052b4 <__errno>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	220c      	movs	r2, #12
 8002bbe:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc4:	e006      	b.n	8002bd4 <_sbrk+0x48>
	}

	heap_end += incr;
 8002bc6:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <_sbrk+0x50>)
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4413      	add	r3, r2
 8002bce:	4a03      	ldr	r2, [pc, #12]	; (8002bdc <_sbrk+0x50>)
 8002bd0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	2000012c 	.word	0x2000012c
 8002be0:	20000a20 	.word	0x20000a20

08002be4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002be8:	4b15      	ldr	r3, [pc, #84]	; (8002c40 <SystemInit+0x5c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a14      	ldr	r2, [pc, #80]	; (8002c40 <SystemInit+0x5c>)
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002bf4:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <SystemInit+0x5c>)
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	4911      	ldr	r1, [pc, #68]	; (8002c40 <SystemInit+0x5c>)
 8002bfa:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <SystemInit+0x60>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002c00:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <SystemInit+0x5c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a0e      	ldr	r2, [pc, #56]	; (8002c40 <SystemInit+0x5c>)
 8002c06:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c0e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c10:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <SystemInit+0x5c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a0a      	ldr	r2, [pc, #40]	; (8002c40 <SystemInit+0x5c>)
 8002c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c1a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002c1c:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <SystemInit+0x5c>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	4a07      	ldr	r2, [pc, #28]	; (8002c40 <SystemInit+0x5c>)
 8002c22:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002c26:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <SystemInit+0x5c>)
 8002c2a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002c2e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002c30:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <SystemInit+0x64>)
 8002c32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c36:	609a      	str	r2, [r3, #8]
#endif 
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr
 8002c40:	40021000 	.word	0x40021000
 8002c44:	f8ff0000 	.word	0xf8ff0000
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <W6100Initialze>:
#ifdef USE_STDPERIPH_DRIVER
DMA_InitTypeDef		DMA_RX_InitStructure, DMA_TX_InitStructure;
#elif defined USE_HAL_DRIVER
#endif
void W6100Initialze(void)
{
 8002c4c:	b590      	push	{r4, r7, lr}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
	W6100Reset();
 8002c52:	f000 f8ad 	bl	8002db0 <W6100Reset>
#if _WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_
/* SPI method callback registration */
	#if defined SPI_DMA
	reg_wizchip_spi_cbfunc(W6100SpiReadByte, W6100SpiWriteByte, W6100SpiReadBurst, W6100SpiWriteBurst);
	#else
	reg_wizchip_spi_cbfunc(W6100SpiReadByte, W6100SpiWriteByte, 0, 0);
 8002c56:	2300      	movs	r3, #0
 8002c58:	2200      	movs	r2, #0
 8002c5a:	491f      	ldr	r1, [pc, #124]	; (8002cd8 <W6100Initialze+0x8c>)
 8002c5c:	481f      	ldr	r0, [pc, #124]	; (8002cdc <W6100Initialze+0x90>)
 8002c5e:	f001 fc1b 	bl	8004498 <reg_wizchip_spi_cbfunc>
	#endif
	/* CS function register */
	reg_wizchip_cs_cbfunc(W6100CsEnable, W6100CsDisable);
 8002c62:	491f      	ldr	r1, [pc, #124]	; (8002ce0 <W6100Initialze+0x94>)
 8002c64:	481f      	ldr	r0, [pc, #124]	; (8002ce4 <W6100Initialze+0x98>)
 8002c66:	f001 fbf3 	bl	8004450 <reg_wizchip_cs_cbfunc>
	reg_wizchip_bus_cbfunc(W6100BusReadByte, W6100BusWriteByte, 0, 0);
	#endif
#endif

	uint8_t temp;
	unsigned char W6100_AdrSet[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
 8002c6a:	4b1f      	ldr	r3, [pc, #124]	; (8002ce8 <W6100Initialze+0x9c>)
 8002c6c:	1d3c      	adds	r4, r7, #4
 8002c6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	do
	{
		if (ctlwizchip(CW_GET_PHYLINK, (void *)&temp) == -1)
 8002c74:	f107 0317 	add.w	r3, r7, #23
 8002c78:	4619      	mov	r1, r3
 8002c7a:	2017      	movs	r0, #23
 8002c7c:	f001 fc52 	bl	8004524 <ctlwizchip>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c86:	d102      	bne.n	8002c8e <W6100Initialze+0x42>
		{
			printf("Unknown PHY link status.\r\n");
 8002c88:	4818      	ldr	r0, [pc, #96]	; (8002cec <W6100Initialze+0xa0>)
 8002c8a:	f002 fbcb 	bl	8005424 <puts>
		}
	} while (temp == PHY_LINK_OFF);
 8002c8e:	7dfb      	ldrb	r3, [r7, #23]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0ef      	beq.n	8002c74 <W6100Initialze+0x28>
	printf("PHY OK.\r\n");
 8002c94:	4816      	ldr	r0, [pc, #88]	; (8002cf0 <W6100Initialze+0xa4>)
 8002c96:	f002 fbc5 	bl	8005424 <puts>

	temp = IK_DEST_UNREACH;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	75fb      	strb	r3, [r7, #23]

	if (ctlwizchip(CW_INIT_WIZCHIP, (void *)W6100_AdrSet) == -1)
 8002c9e:	1d3b      	adds	r3, r7, #4
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	2004      	movs	r0, #4
 8002ca4:	f001 fc3e 	bl	8004524 <ctlwizchip>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cae:	d102      	bne.n	8002cb6 <W6100Initialze+0x6a>
	{
		printf("W6100 initialized fail.\r\n");
 8002cb0:	4810      	ldr	r0, [pc, #64]	; (8002cf4 <W6100Initialze+0xa8>)
 8002cb2:	f002 fbb7 	bl	8005424 <puts>
	}

	if (ctlwizchip(CW_SET_INTRMASK, &temp) == -1)
 8002cb6:	f107 0317 	add.w	r3, r7, #23
 8002cba:	4619      	mov	r1, r3
 8002cbc:	2007      	movs	r0, #7
 8002cbe:	f001 fc31 	bl	8004524 <ctlwizchip>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc8:	d102      	bne.n	8002cd0 <W6100Initialze+0x84>
	{
		printf("W6100 interrupt\r\n");
 8002cca:	480b      	ldr	r0, [pc, #44]	; (8002cf8 <W6100Initialze+0xac>)
 8002ccc:	f002 fbaa 	bl	8005424 <puts>
	}
	//printf("interrupt mask: %02x\r\n",getIMR());
}
 8002cd0:	bf00      	nop
 8002cd2:	371c      	adds	r7, #28
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd90      	pop	{r4, r7, pc}
 8002cd8:	08002d29 	.word	0x08002d29
 8002cdc:	08002cfd 	.word	0x08002cfd
 8002ce0:	08002d69 	.word	0x08002d69
 8002ce4:	08002d51 	.word	0x08002d51
 8002ce8:	08006578 	.word	0x08006578
 8002cec:	08006520 	.word	0x08006520
 8002cf0:	0800653c 	.word	0x0800653c
 8002cf4:	08006548 	.word	0x08006548
 8002cf8:	08006564 	.word	0x08006564

08002cfc <W6100SpiReadByte>:

uint8_t W6100SpiReadByte(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af02      	add	r7, sp, #8
	while (SPI_I2S_GetFlagStatus(W6100_SPI, SPI_I2S_FLAG_RXNE) == RESET);
	return SPI_I2S_ReceiveData(W6100_SPI);

#elif defined USE_HAL_DRIVER

	uint8_t rx = 0, tx = 0xFF;
 8002d02:	2300      	movs	r3, #0
 8002d04:	71fb      	strb	r3, [r7, #7]
 8002d06:	23ff      	movs	r3, #255	; 0xff
 8002d08:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_TransmitReceive(&W6100_SPI, &tx, &rx, W6100_SPI_SIZE, W6100_SPI_TIMEOUT);
 8002d0a:	1dfa      	adds	r2, r7, #7
 8002d0c:	1db9      	adds	r1, r7, #6
 8002d0e:	230a      	movs	r3, #10
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	2301      	movs	r3, #1
 8002d14:	4803      	ldr	r0, [pc, #12]	; (8002d24 <W6100SpiReadByte+0x28>)
 8002d16:	f7fe faf1 	bl	80012fc <HAL_SPI_TransmitReceive>
	return rx;
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
#elif defined USE_HAL_DRIVER

	// Sppi read
#endif
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20000174 	.word	0x20000174

08002d28 <W6100SpiWriteByte>:

void W6100SpiWriteByte(uint8_t byte)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	4603      	mov	r3, r0
 8002d30:	71fb      	strb	r3, [r7, #7]
	SPI_I2S_ReceiveData(W6100_SPI);

#elif defined USE_HAL_DRIVER

	uint8_t rx;
	HAL_SPI_TransmitReceive(&W6100_SPI, &byte, &rx, W6100_SPI_SIZE, W6100_SPI_TIMEOUT);
 8002d32:	f107 020f 	add.w	r2, r7, #15
 8002d36:	1df9      	adds	r1, r7, #7
 8002d38:	230a      	movs	r3, #10
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	4803      	ldr	r0, [pc, #12]	; (8002d4c <W6100SpiWriteByte+0x24>)
 8002d40:	f7fe fadc 	bl	80012fc <HAL_SPI_TransmitReceive>
#endif

}
 8002d44:	bf00      	nop
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20000174 	.word	0x20000174

08002d50 <W6100CsEnable>:
#endif

}

inline void W6100CsEnable(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0

	GPIO_ResetBits(W6100_CS_PORT, W6100_CS_PIN);

#elif defined USE_HAL_DRIVER

	HAL_GPIO_WritePin(W6100_CS_PORT, W6100_CS_PIN, GPIO_PIN_RESET);
 8002d54:	2200      	movs	r2, #0
 8002d56:	2180      	movs	r1, #128	; 0x80
 8002d58:	4802      	ldr	r0, [pc, #8]	; (8002d64 <W6100CsEnable+0x14>)
 8002d5a:	f7fd fe93 	bl	8000a84 <HAL_GPIO_WritePin>
#endif

}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40011400 	.word	0x40011400

08002d68 <W6100CsDisable>:

inline void W6100CsDisable(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0

	GPIO_SetBits(W6100_CS_PORT, W6100_CS_PIN);

#elif defined USE_HAL_DRIVER

	HAL_GPIO_WritePin(W6100_CS_PORT, W6100_CS_PIN, GPIO_PIN_SET);
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	2180      	movs	r1, #128	; 0x80
 8002d70:	4802      	ldr	r0, [pc, #8]	; (8002d7c <W6100CsDisable+0x14>)
 8002d72:	f7fd fe87 	bl	8000a84 <HAL_GPIO_WritePin>
#endif

}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40011400 	.word	0x40011400

08002d80 <W6100ResetAssert>:

inline void W6100ResetAssert(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0

	GPIO_ResetBits(W6100_RESET_PORT, W6100_RESET_PIN);

#elif defined USE_HAL_DRIVER

	HAL_GPIO_WritePin(W6100_RESET_PORT, W6100_RESET_PIN, GPIO_PIN_RESET);
 8002d84:	2200      	movs	r2, #0
 8002d86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d8a:	4802      	ldr	r0, [pc, #8]	; (8002d94 <W6100ResetAssert+0x14>)
 8002d8c:	f7fd fe7a 	bl	8000a84 <HAL_GPIO_WritePin>
#endif

}
 8002d90:	bf00      	nop
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40011400 	.word	0x40011400

08002d98 <W6100ResetDeassert>:

inline void W6100ResetDeassert(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0

	GPIO_SetBits(W6100_RESET_PORT, W6100_RESET_PIN);

#elif defined USE_HAL_DRIVER

	HAL_GPIO_WritePin(W6100_RESET_PORT, W6100_RESET_PIN, GPIO_PIN_SET);
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002da2:	4802      	ldr	r0, [pc, #8]	; (8002dac <W6100ResetDeassert+0x14>)
 8002da4:	f7fd fe6e 	bl	8000a84 <HAL_GPIO_WritePin>
#endif

}
 8002da8:	bf00      	nop
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40011400 	.word	0x40011400

08002db0 <W6100Reset>:

void W6100Reset(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
	W6100ResetAssert();
	delay(10);
	W6100ResetDeassert();
	delay(10);
#elif defined USE_HAL_DRIVER
	W6100ResetAssert();
 8002db4:	f7ff ffe4 	bl	8002d80 <W6100ResetAssert>
	HAL_Delay(10);
 8002db8:	200a      	movs	r0, #10
 8002dba:	f7fd fa95 	bl	80002e8 <HAL_Delay>
	W6100ResetDeassert();
 8002dbe:	f7ff ffeb 	bl	8002d98 <W6100ResetDeassert>
	HAL_Delay(10);
 8002dc2:	200a      	movs	r0, #10
 8002dc4:	f7fd fa90 	bl	80002e8 <HAL_Delay>
#endif
}
 8002dc8:	bf00      	nop
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002dcc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002dce:	e003      	b.n	8002dd8 <LoopCopyDataInit>

08002dd0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002dd2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002dd4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002dd6:	3104      	adds	r1, #4

08002dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002dd8:	480a      	ldr	r0, [pc, #40]	; (8002e04 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002dda:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002ddc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002dde:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002de0:	d3f6      	bcc.n	8002dd0 <CopyDataInit>
  ldr r2, =_sbss
 8002de2:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002de4:	e002      	b.n	8002dec <LoopFillZerobss>

08002de6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002de6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002de8:	f842 3b04 	str.w	r3, [r2], #4

08002dec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002dec:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002dee:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002df0:	d3f9      	bcc.n	8002de6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002df2:	f7ff fef7 	bl	8002be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002df6:	f002 fa63 	bl	80052c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002dfa:	f7ff fa11 	bl	8002220 <main>
  bx lr
 8002dfe:	4770      	bx	lr
  ldr r3, =_sidata
 8002e00:	080066f4 	.word	0x080066f4
  ldr r0, =_sdata
 8002e04:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002e08:	20000110 	.word	0x20000110
  ldr r2, =_sbss
 8002e0c:	20000110 	.word	0x20000110
  ldr r3, = _ebss
 8002e10:	20000a1c 	.word	0x20000a1c

08002e14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e14:	e7fe      	b.n	8002e14 <ADC1_2_IRQHandler>
	...

08002e18 <loopback_tcps>:
uint8_t* msg_v4 = "IPv4 mode";
uint8_t* msg_v6 = "IPv6 mode";
uint8_t* msg_dual = "Dual IP mode";

int32_t loopback_tcps(uint8_t sn, uint8_t* buf, uint16_t port, uint8_t loopback_mode)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b088      	sub	sp, #32
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6039      	str	r1, [r7, #0]
 8002e20:	4611      	mov	r1, r2
 8002e22:	461a      	mov	r2, r3
 8002e24:	4603      	mov	r3, r0
 8002e26:	71fb      	strb	r3, [r7, #7]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	80bb      	strh	r3, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	71bb      	strb	r3, [r7, #6]
    int32_t ret;
    datasize_t sentsize=0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	83fb      	strh	r3, [r7, #30]
    int8_t status,inter;
    uint8_t tmp = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	777b      	strb	r3, [r7, #29]
    datasize_t received_size;
    uint8_t arg_tmp8;
    uint8_t* mode_msg;

    if(loopback_mode == AS_IPV4)
 8002e38:	79bb      	ldrb	r3, [r7, #6]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d103      	bne.n	8002e46 <loopback_tcps+0x2e>
    {
       mode_msg = msg_v4;
 8002e3e:	4bb0      	ldr	r3, [pc, #704]	; (8003100 <loopback_tcps+0x2e8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	61bb      	str	r3, [r7, #24]
 8002e44:	e009      	b.n	8002e5a <loopback_tcps+0x42>
    }else if(loopback_mode == AS_IPV6)
 8002e46:	79bb      	ldrb	r3, [r7, #6]
 8002e48:	2b17      	cmp	r3, #23
 8002e4a:	d103      	bne.n	8002e54 <loopback_tcps+0x3c>
    {
       mode_msg = msg_v6;
 8002e4c:	4bad      	ldr	r3, [pc, #692]	; (8003104 <loopback_tcps+0x2ec>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	61bb      	str	r3, [r7, #24]
 8002e52:	e002      	b.n	8002e5a <loopback_tcps+0x42>
    }else
    {
       mode_msg = msg_dual;
 8002e54:	4bac      	ldr	r3, [pc, #688]	; (8003108 <loopback_tcps+0x2f0>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	61bb      	str	r3, [r7, #24]
    }
    #ifdef _LOOPBACK_DEBUG_
        uint8_t dst_ip[16], ext_status;
        uint16_t dst_port;
    #endif
        getsockopt(sn, SO_STATUS, &status);
 8002e5a:	f107 0213 	add.w	r2, r7, #19
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	210a      	movs	r1, #10
 8002e62:	4618      	mov	r0, r3
 8002e64:	f001 f8c6 	bl	8003ff4 <getsockopt>
        switch(status)
 8002e68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002e6c:	2b1c      	cmp	r3, #28
 8002e6e:	f200 813a 	bhi.w	80030e6 <loopback_tcps+0x2ce>
 8002e72:	a201      	add	r2, pc, #4	; (adr r2, 8002e78 <loopback_tcps+0x60>)
 8002e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e78:	0800308d 	.word	0x0800308d
 8002e7c:	080030e7 	.word	0x080030e7
 8002e80:	080030e7 	.word	0x080030e7
 8002e84:	080030e7 	.word	0x080030e7
 8002e88:	080030e7 	.word	0x080030e7
 8002e8c:	080030e7 	.word	0x080030e7
 8002e90:	080030e7 	.word	0x080030e7
 8002e94:	080030e7 	.word	0x080030e7
 8002e98:	080030e7 	.word	0x080030e7
 8002e9c:	080030e7 	.word	0x080030e7
 8002ea0:	080030e7 	.word	0x080030e7
 8002ea4:	080030e7 	.word	0x080030e7
 8002ea8:	080030e7 	.word	0x080030e7
 8002eac:	080030e7 	.word	0x080030e7
 8002eb0:	080030e7 	.word	0x080030e7
 8002eb4:	080030e7 	.word	0x080030e7
 8002eb8:	080030e7 	.word	0x080030e7
 8002ebc:	080030e7 	.word	0x080030e7
 8002ec0:	080030e7 	.word	0x080030e7
 8002ec4:	08003069 	.word	0x08003069
 8002ec8:	080030e7 	.word	0x080030e7
 8002ecc:	080030e7 	.word	0x080030e7
 8002ed0:	080030e7 	.word	0x080030e7
 8002ed4:	08002eed 	.word	0x08002eed
 8002ed8:	080030e7 	.word	0x080030e7
 8002edc:	080030e7 	.word	0x080030e7
 8002ee0:	080030e7 	.word	0x080030e7
 8002ee4:	080030e7 	.word	0x080030e7
 8002ee8:	08002fb9 	.word	0x08002fb9
        {
        case SOCK_ESTABLISHED :
            ctlsocket(sn,CS_GET_INTERRUPT,&inter);
 8002eec:	f107 0212 	add.w	r2, r7, #18
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
 8002ef2:	2105      	movs	r1, #5
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 ff8d 	bl	8003e14 <ctlsocket>
            if(inter & Sn_IR_CON)
 8002efa:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d008      	beq.n	8002f1a <loopback_tcps+0x102>
                            sn, dst_ip[0], dst_ip[1], dst_ip[2], dst_ip[3]);
                }
                getsockopt(sn,SO_DESTPORT,&dst_port);
                printf("Peer Port : %d\r\n", dst_port);
            #endif
                arg_tmp8 = Sn_IR_CON;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
                ctlsocket(sn,CS_CLR_INTERRUPT,&arg_tmp8);
 8002f0c:	f107 020f 	add.w	r2, r7, #15
 8002f10:	79fb      	ldrb	r3, [r7, #7]
 8002f12:	2104      	movs	r1, #4
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 ff7d 	bl	8003e14 <ctlsocket>
            }
            getsockopt(sn,SO_RECVBUF,&received_size);
 8002f1a:	f107 0210 	add.w	r2, r7, #16
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	2109      	movs	r1, #9
 8002f22:	4618      	mov	r0, r3
 8002f24:	f001 f866 	bl	8003ff4 <getsockopt>

            if(received_size > 0){
 8002f28:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f340 80dc 	ble.w	80030ea <loopback_tcps+0x2d2>
                if(received_size > DATA_BUF_SIZE) received_size = DATA_BUF_SIZE;
 8002f32:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002f36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f3a:	dd02      	ble.n	8002f42 <loopback_tcps+0x12a>
 8002f3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f40:	823b      	strh	r3, [r7, #16]
                ret = recv(sn, buf, received_size);
 8002f42:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	6839      	ldr	r1, [r7, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 fee2 	bl	8003d14 <recv>
 8002f50:	4603      	mov	r3, r0
 8002f52:	617b      	str	r3, [r7, #20]

                if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	dc01      	bgt.n	8002f5e <loopback_tcps+0x146>
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	e0cb      	b.n	80030f6 <loopback_tcps+0x2de>
                received_size = (uint16_t) ret;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	b21b      	sxth	r3, r3
 8002f62:	823b      	strh	r3, [r7, #16]
                sentsize = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	83fb      	strh	r3, [r7, #30]

                while(received_size != sentsize)
 8002f68:	e01f      	b.n	8002faa <loopback_tcps+0x192>
                {
                    ret = send(sn, buf+sentsize, received_size-sentsize);
 8002f6a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	18d1      	adds	r1, r2, r3
 8002f72:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	8bfb      	ldrh	r3, [r7, #30]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	b21a      	sxth	r2, r3
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fde4 	bl	8003b50 <send>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	617b      	str	r3, [r7, #20]
                    if(ret < 0)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	da05      	bge.n	8002f9e <loopback_tcps+0x186>
                    {
                        close(sn);
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 fcb1 	bl	80038fc <close>
                        return ret;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	e0ab      	b.n	80030f6 <loopback_tcps+0x2de>
                    }
                    sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	8bfb      	ldrh	r3, [r7, #30]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	83fb      	strh	r3, [r7, #30]
                while(received_size != sentsize)
 8002faa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002fae:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d1d9      	bne.n	8002f6a <loopback_tcps+0x152>
                }
            }
            break;
 8002fb6:	e098      	b.n	80030ea <loopback_tcps+0x2d2>
        case SOCK_CLOSE_WAIT :
            #ifdef _LOOPBACK_DEBUG_
                printf("%d:CloseWait\r\n",sn);
            #endif
            getsockopt(sn, SO_RECVBUF, &received_size);
 8002fb8:	f107 0210 	add.w	r2, r7, #16
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	2109      	movs	r1, #9
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f001 f817 	bl	8003ff4 <getsockopt>
            if(received_size > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 8002fc6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	dd41      	ble.n	8003052 <loopback_tcps+0x23a>
            {
                if(received_size > DATA_BUF_SIZE) received_size = DATA_BUF_SIZE;
 8002fce:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002fd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fd6:	dd02      	ble.n	8002fde <loopback_tcps+0x1c6>
 8002fd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fdc:	823b      	strh	r3, [r7, #16]
                ret = recv(sn, buf, received_size);
 8002fde:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	6839      	ldr	r1, [r7, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fe94 	bl	8003d14 <recv>
 8002fec:	4603      	mov	r3, r0
 8002fee:	617b      	str	r3, [r7, #20]

                if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	dc01      	bgt.n	8002ffa <loopback_tcps+0x1e2>
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	e07d      	b.n	80030f6 <loopback_tcps+0x2de>
                received_size = (uint16_t) ret;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	b21b      	sxth	r3, r3
 8002ffe:	823b      	strh	r3, [r7, #16]
                sentsize = 0;
 8003000:	2300      	movs	r3, #0
 8003002:	83fb      	strh	r3, [r7, #30]

                while(received_size != sentsize)
 8003004:	e01f      	b.n	8003046 <loopback_tcps+0x22e>
                {
                    ret = send(sn, buf+sentsize, received_size-sentsize);
 8003006:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	18d1      	adds	r1, r2, r3
 800300e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003012:	b29a      	uxth	r2, r3
 8003014:	8bfb      	ldrh	r3, [r7, #30]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	b29b      	uxth	r3, r3
 800301a:	b21a      	sxth	r2, r3
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fd96 	bl	8003b50 <send>
 8003024:	4603      	mov	r3, r0
 8003026:	617b      	str	r3, [r7, #20]
                    if(ret < 0)
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	2b00      	cmp	r3, #0
 800302c:	da05      	bge.n	800303a <loopback_tcps+0x222>
                    {
                        close(sn);
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	4618      	mov	r0, r3
 8003032:	f000 fc63 	bl	80038fc <close>
                        return ret;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	e05d      	b.n	80030f6 <loopback_tcps+0x2de>
                    }
                    sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	b29a      	uxth	r2, r3
 800303e:	8bfb      	ldrh	r3, [r7, #30]
 8003040:	4413      	add	r3, r2
 8003042:	b29b      	uxth	r3, r3
 8003044:	83fb      	strh	r3, [r7, #30]
                while(received_size != sentsize)
 8003046:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800304a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800304e:	429a      	cmp	r2, r3
 8003050:	d1d9      	bne.n	8003006 <loopback_tcps+0x1ee>
                }
            }

            if((ret = disconnect(sn)) != SOCK_OK) return ret;
 8003052:	79fb      	ldrb	r3, [r7, #7]
 8003054:	4618      	mov	r0, r3
 8003056:	f000 fd09 	bl	8003a6c <disconnect>
 800305a:	4603      	mov	r3, r0
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d044      	beq.n	80030ee <loopback_tcps+0x2d6>
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	e046      	b.n	80030f6 <loopback_tcps+0x2de>
                #ifdef _LOOPBACK_DEBUG_
                    printf("%d:Socket Closed\r\n", sn);
                #endif
            break;
        case SOCK_INIT :
            if( (ret = listen(sn)) != SOCK_OK) return ret;
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fcb4 	bl	80039d8 <listen>
 8003070:	4603      	mov	r3, r0
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d001      	beq.n	800307e <loopback_tcps+0x266>
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	e03b      	b.n	80030f6 <loopback_tcps+0x2de>
                #ifdef _LOOPBACK_DEBUG_
                    printf("%d:Listen, TCP server loopback, port [%d] as %s\r\n", sn, port, mode_msg);
                #endif
                    printf("%d:Listen, TCP server loopback, port [%d] as %s\r\n", sn, port, mode_msg);
 800307e:	79f9      	ldrb	r1, [r7, #7]
 8003080:	88ba      	ldrh	r2, [r7, #4]
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	4821      	ldr	r0, [pc, #132]	; (800310c <loopback_tcps+0x2f4>)
 8003086:	f002 f947 	bl	8005318 <iprintf>
            break;
 800308a:	e033      	b.n	80030f4 <loopback_tcps+0x2dc>
        case SOCK_CLOSED:
            #ifdef _LOOPBACK_DEBUG_
                printf("%d:TCP server loopback start\r\n",sn);
            #endif
                switch(loopback_mode)
 800308c:	79bb      	ldrb	r3, [r7, #6]
 800308e:	2b17      	cmp	r3, #23
 8003090:	d00f      	beq.n	80030b2 <loopback_tcps+0x29a>
 8003092:	2b17      	cmp	r3, #23
 8003094:	dc1f      	bgt.n	80030d6 <loopback_tcps+0x2be>
 8003096:	2b02      	cmp	r3, #2
 8003098:	d002      	beq.n	80030a0 <loopback_tcps+0x288>
 800309a:	2b0b      	cmp	r3, #11
 800309c:	d012      	beq.n	80030c4 <loopback_tcps+0x2ac>
                    break;
                case AS_IPDUAL:
                    tmp = socket(sn, Sn_MR_TCPD, port, SOCK_IO_NONBLOCK);
                    break;
                default:
                    break;
 800309e:	e01a      	b.n	80030d6 <loopback_tcps+0x2be>
                    tmp = socket(sn, Sn_MR_TCP4, port, SOCK_IO_NONBLOCK);
 80030a0:	88ba      	ldrh	r2, [r7, #4]
 80030a2:	79f8      	ldrb	r0, [r7, #7]
 80030a4:	2301      	movs	r3, #1
 80030a6:	2101      	movs	r1, #1
 80030a8:	f000 fa34 	bl	8003514 <socket>
 80030ac:	4603      	mov	r3, r0
 80030ae:	777b      	strb	r3, [r7, #29]
                    break;
 80030b0:	e012      	b.n	80030d8 <loopback_tcps+0x2c0>
                    tmp = socket(sn, Sn_MR_TCP6, port, SOCK_IO_NONBLOCK);
 80030b2:	88ba      	ldrh	r2, [r7, #4]
 80030b4:	79f8      	ldrb	r0, [r7, #7]
 80030b6:	2301      	movs	r3, #1
 80030b8:	2109      	movs	r1, #9
 80030ba:	f000 fa2b 	bl	8003514 <socket>
 80030be:	4603      	mov	r3, r0
 80030c0:	777b      	strb	r3, [r7, #29]
                    break;
 80030c2:	e009      	b.n	80030d8 <loopback_tcps+0x2c0>
                    tmp = socket(sn, Sn_MR_TCPD, port, SOCK_IO_NONBLOCK);
 80030c4:	88ba      	ldrh	r2, [r7, #4]
 80030c6:	79f8      	ldrb	r0, [r7, #7]
 80030c8:	2301      	movs	r3, #1
 80030ca:	210d      	movs	r1, #13
 80030cc:	f000 fa22 	bl	8003514 <socket>
 80030d0:	4603      	mov	r3, r0
 80030d2:	777b      	strb	r3, [r7, #29]
                    break;
 80030d4:	e000      	b.n	80030d8 <loopback_tcps+0x2c0>
                    break;
 80030d6:	bf00      	nop
                }
                if(tmp != sn)    /* reinitialize the socket */
 80030d8:	7f7a      	ldrb	r2, [r7, #29]
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d008      	beq.n	80030f2 <loopback_tcps+0x2da>
                {
                    #ifdef _LOOPBACK_DEBUG_
                        printf("%d : Fail to create socket.\r\n",sn);
                    #endif
                    return SOCKERR_SOCKNUM;
 80030e0:	f04f 33ff 	mov.w	r3, #4294967295
 80030e4:	e007      	b.n	80030f6 <loopback_tcps+0x2de>
                printf("%d:Socket opened[%d]\r\n",sn, getSn_SR(sn));
                sock_state[sn] = 1;
            #endif
            break;
        default:
            break;
 80030e6:	bf00      	nop
 80030e8:	e004      	b.n	80030f4 <loopback_tcps+0x2dc>
            break;
 80030ea:	bf00      	nop
 80030ec:	e002      	b.n	80030f4 <loopback_tcps+0x2dc>
            break;
 80030ee:	bf00      	nop
 80030f0:	e000      	b.n	80030f4 <loopback_tcps+0x2dc>
            break;
 80030f2:	bf00      	nop
        }
    return 1;
 80030f4:	2301      	movs	r3, #1
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3720      	adds	r7, #32
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20000074 	.word	0x20000074
 8003104:	20000078 	.word	0x20000078
 8003108:	2000007c 	.word	0x2000007c
 800310c:	080065b0 	.word	0x080065b0

08003110 <WIZCHIP_WRITE>:

#define _W6100_SPI_OP_          _WIZCHIP_SPI_VDM_OP_

//////////////////////////////////////////////////
void WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	70fb      	strb	r3, [r7, #3]
   uint8_t tAD[4];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	0c1b      	lsrs	r3, r3, #16
 8003120:	b2db      	uxtb	r3, r3
 8003122:	733b      	strb	r3, [r7, #12]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	0a1b      	lsrs	r3, r3, #8
 8003128:	b2db      	uxtb	r3, r3
 800312a:	737b      	strb	r3, [r7, #13]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	73bb      	strb	r3, [r7, #14]
   tAD[3] = wb;
 8003132:	78fb      	ldrb	r3, [r7, #3]
 8003134:	73fb      	strb	r3, [r7, #15]

   WIZCHIP_CRITICAL_ENTER();
 8003136:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <WIZCHIP_WRITE+0x60>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 800313c:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <WIZCHIP_WRITE+0x60>)
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_WRITE_ | _W6100_SPI_OP_);
 8003142:	7bbb      	ldrb	r3, [r7, #14]
 8003144:	f043 0304 	orr.w	r3, r3, #4
 8003148:	b2db      	uxtb	r3, r3
 800314a:	73bb      	strb	r3, [r7, #14]
   WIZCHIP.IF.SPI._write_byte_buf(tAD, 4);
 800314c:	4b08      	ldr	r3, [pc, #32]	; (8003170 <WIZCHIP_WRITE+0x60>)
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	f107 020c 	add.w	r2, r7, #12
 8003154:	2104      	movs	r1, #4
 8003156:	4610      	mov	r0, r2
 8003158:	4798      	blx	r3
   WIZCHIP.IF.BUS._write_data_buf(IDM_AR0, tAD, 4, 1);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 800315a:	4b05      	ldr	r3, [pc, #20]	; (8003170 <WIZCHIP_WRITE+0x60>)
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003160:	4b03      	ldr	r3, [pc, #12]	; (8003170 <WIZCHIP_WRITE+0x60>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	4798      	blx	r3
}
 8003166:	bf00      	nop
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20000084 	.word	0x20000084

08003174 <WIZCHIP_READ>:

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t tAD[3];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	0c1b      	lsrs	r3, r3, #16
 8003180:	b2db      	uxtb	r3, r3
 8003182:	733b      	strb	r3, [r7, #12]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	0a1b      	lsrs	r3, r3, #8
 8003188:	b2db      	uxtb	r3, r3
 800318a:	737b      	strb	r3, [r7, #13]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	73bb      	strb	r3, [r7, #14]

   WIZCHIP_CRITICAL_ENTER();
 8003192:	4b0f      	ldr	r3, [pc, #60]	; (80031d0 <WIZCHIP_READ+0x5c>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 8003198:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <WIZCHIP_READ+0x5c>)
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ ==  _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_READ_ | _W6100_SPI_OP_);
 800319e:	7bbb      	ldrb	r3, [r7, #14]
 80031a0:	73bb      	strb	r3, [r7, #14]
   WIZCHIP.IF.SPI._write_byte_buf(tAD, 3);
 80031a2:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <WIZCHIP_READ+0x5c>)
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	f107 020c 	add.w	r2, r7, #12
 80031aa:	2103      	movs	r1, #3
 80031ac:	4610      	mov	r0, r2
 80031ae:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte();
 80031b0:	4b07      	ldr	r3, [pc, #28]	; (80031d0 <WIZCHIP_READ+0x5c>)
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	4798      	blx	r3
 80031b6:	4603      	mov	r3, r0
 80031b8:	73fb      	strb	r3, [r7, #15]
   ret = WIZCHIP.IF.BUS._read_data(IDM_DR);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W6100. !!!"   
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 80031ba:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <WIZCHIP_READ+0x5c>)
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80031c0:	4b03      	ldr	r3, [pc, #12]	; (80031d0 <WIZCHIP_READ+0x5c>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	4798      	blx	r3
   return ret;
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	20000084 	.word	0x20000084

080031d4 <WIZCHIP_WRITE_BUF>:

void WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, datasize_t len)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	4613      	mov	r3, r2
 80031e0:	80fb      	strh	r3, [r7, #6]
   uint8_t tAD[3];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	0c1b      	lsrs	r3, r3, #16
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	753b      	strb	r3, [r7, #20]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	0a1b      	lsrs	r3, r3, #8
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	757b      	strb	r3, [r7, #21]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	75bb      	strb	r3, [r7, #22]


   WIZCHIP_CRITICAL_ENTER();
 80031f8:	4b11      	ldr	r3, [pc, #68]	; (8003240 <WIZCHIP_WRITE_BUF+0x6c>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 80031fe:	4b10      	ldr	r3, [pc, #64]	; (8003240 <WIZCHIP_WRITE_BUF+0x6c>)
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	4798      	blx	r3

#if((_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_WRITE_ | _W6100_SPI_OP_);
 8003204:	7dbb      	ldrb	r3, [r7, #22]
 8003206:	f043 0304 	orr.w	r3, r3, #4
 800320a:	b2db      	uxtb	r3, r3
 800320c:	75bb      	strb	r3, [r7, #22]

   WIZCHIP.IF.SPI._write_byte_buf(tAD, 3);
 800320e:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <WIZCHIP_WRITE_BUF+0x6c>)
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	f107 0214 	add.w	r2, r7, #20
 8003216:	2103      	movs	r1, #3
 8003218:	4610      	mov	r0, r2
 800321a:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte_buf(pBuf, len);
 800321c:	4b08      	ldr	r3, [pc, #32]	; (8003240 <WIZCHIP_WRITE_BUF+0x6c>)
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003224:	4611      	mov	r1, r2
 8003226:	68b8      	ldr	r0, [r7, #8]
 8003228:	4798      	blx	r3
   WIZCHIP.IF.BUS._write_data_buf(IDM_DR,pBuf,len, 0);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W6100. !!!!"
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 800322a:	4b05      	ldr	r3, [pc, #20]	; (8003240 <WIZCHIP_WRITE_BUF+0x6c>)
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003230:	4b03      	ldr	r3, [pc, #12]	; (8003240 <WIZCHIP_WRITE_BUF+0x6c>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	4798      	blx	r3
}
 8003236:	bf00      	nop
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000084 	.word	0x20000084

08003244 <WIZCHIP_READ_BUF>:

void WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, datasize_t len)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	4613      	mov	r3, r2
 8003250:	80fb      	strh	r3, [r7, #6]
   uint8_t tAD[3];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	0c1b      	lsrs	r3, r3, #16
 8003256:	b2db      	uxtb	r3, r3
 8003258:	753b      	strb	r3, [r7, #20]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	0a1b      	lsrs	r3, r3, #8
 800325e:	b2db      	uxtb	r3, r3
 8003260:	757b      	strb	r3, [r7, #21]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	b2db      	uxtb	r3, r3
 8003266:	75bb      	strb	r3, [r7, #22]

   WIZCHIP_CRITICAL_ENTER();
 8003268:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <WIZCHIP_READ_BUF+0x64>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 800326e:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <WIZCHIP_READ_BUF+0x64>)
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	4798      	blx	r3

#if((_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_READ_ | _W6100_SPI_OP_);
 8003274:	7dbb      	ldrb	r3, [r7, #22]
 8003276:	75bb      	strb	r3, [r7, #22]
   WIZCHIP.IF.SPI._write_byte_buf(tAD,3);
 8003278:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <WIZCHIP_READ_BUF+0x64>)
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	f107 0214 	add.w	r2, r7, #20
 8003280:	2103      	movs	r1, #3
 8003282:	4610      	mov	r0, r2
 8003284:	4798      	blx	r3
   WIZCHIP.IF.SPI._read_byte_buf(pBuf, len);
 8003286:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <WIZCHIP_READ_BUF+0x64>)
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800328e:	4611      	mov	r1, r2
 8003290:	68b8      	ldr	r0, [r7, #8]
 8003292:	4798      	blx	r3
   WIZCHIP.IF.BUS._write_data_buf(IDM_AR0,tAD,3,1);
   WIZCHIP.IF.BUS._read_data_buf(IDM_DR,pBuf,len,0);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W6100. !!!!"
#endif
   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 8003294:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <WIZCHIP_READ_BUF+0x64>)
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800329a:	4b03      	ldr	r3, [pc, #12]	; (80032a8 <WIZCHIP_READ_BUF+0x64>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	4798      	blx	r3
}
 80032a0:	bf00      	nop
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	20000084 	.word	0x20000084

080032ac <getSn_TX_FSR>:

datasize_t getSn_TX_FSR(uint8_t sn)
{
 80032ac:	b590      	push	{r4, r7, lr}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	71fb      	strb	r3, [r7, #7]
   datasize_t prev_val=-1,val=0;
 80032b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032ba:	81bb      	strh	r3, [r7, #12]
 80032bc:	2300      	movs	r3, #0
 80032be:	81fb      	strh	r3, [r7, #14]
   do
   {
      prev_val = val;
 80032c0:	89fb      	ldrh	r3, [r7, #14]
 80032c2:	81bb      	strh	r3, [r7, #12]
      val = WIZCHIP_READ(_Sn_TX_FSR_(sn));
 80032c4:	79fb      	ldrb	r3, [r7, #7]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	3301      	adds	r3, #1
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff ff4f 	bl	8003174 <WIZCHIP_READ>
 80032d6:	4603      	mov	r3, r0
 80032d8:	81fb      	strh	r3, [r7, #14]
      val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(_Sn_TX_FSR_(sn),1));
 80032da:	89fb      	ldrh	r3, [r7, #14]
 80032dc:	021b      	lsls	r3, r3, #8
 80032de:	b29c      	uxth	r4, r3
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	3301      	adds	r3, #1
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 80032ec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff ff3f 	bl	8003174 <WIZCHIP_READ>
 80032f6:	4603      	mov	r3, r0
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	4423      	add	r3, r4
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	81fb      	strh	r3, [r7, #14]
   }while (val != prev_val);
 8003300:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003304:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003308:	429a      	cmp	r2, r3
 800330a:	d1d9      	bne.n	80032c0 <getSn_TX_FSR+0x14>
   return val;
 800330c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	bd90      	pop	{r4, r7, pc}

08003318 <getSn_RX_RSR>:

datasize_t getSn_RX_RSR(uint8_t sn)
{
 8003318:	b590      	push	{r4, r7, lr}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	71fb      	strb	r3, [r7, #7]
   datasize_t prev_val=-1,val=0;
 8003322:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003326:	81bb      	strh	r3, [r7, #12]
 8003328:	2300      	movs	r3, #0
 800332a:	81fb      	strh	r3, [r7, #14]
   do
   {
      prev_val = val;
 800332c:	89fb      	ldrh	r3, [r7, #14]
 800332e:	81bb      	strh	r3, [r7, #12]
      val = WIZCHIP_READ(_Sn_RX_RSR_(sn));
 8003330:	79fb      	ldrb	r3, [r7, #7]
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	3301      	adds	r3, #1
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	f503 3309 	add.w	r3, r3, #140288	; 0x22400
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff ff19 	bl	8003174 <WIZCHIP_READ>
 8003342:	4603      	mov	r3, r0
 8003344:	81fb      	strh	r3, [r7, #14]
      val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(_Sn_RX_RSR_(sn),1));
 8003346:	89fb      	ldrh	r3, [r7, #14]
 8003348:	021b      	lsls	r3, r3, #8
 800334a:	b29c      	uxth	r4, r3
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	3301      	adds	r3, #1
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	f503 3309 	add.w	r3, r3, #140288	; 0x22400
 8003358:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff ff09 	bl	8003174 <WIZCHIP_READ>
 8003362:	4603      	mov	r3, r0
 8003364:	b29b      	uxth	r3, r3
 8003366:	4423      	add	r3, r4
 8003368:	b29b      	uxth	r3, r3
 800336a:	81fb      	strh	r3, [r7, #14]
   }while (val != prev_val);
 800336c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003370:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003374:	429a      	cmp	r2, r3
 8003376:	d1d9      	bne.n	800332c <getSn_RX_RSR+0x14>
   return val;
 8003378:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	bd90      	pop	{r4, r7, pc}

08003384 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, datasize_t len)
{
 8003384:	b590      	push	{r4, r7, lr}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	6039      	str	r1, [r7, #0]
 800338e:	71fb      	strb	r3, [r7, #7]
 8003390:	4613      	mov	r3, r2
 8003392:	80bb      	strh	r3, [r7, #4]
   datasize_t ptr = 0;
 8003394:	2300      	movs	r3, #0
 8003396:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003398:	2300      	movs	r3, #0
 800339a:	60bb      	str	r3, [r7, #8]
   ptr = getSn_TX_WR(sn);
 800339c:	79fb      	ldrb	r3, [r7, #7]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	3301      	adds	r3, #1
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff fee3 	bl	8003174 <WIZCHIP_READ>
 80033ae:	4603      	mov	r3, r0
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	021b      	lsls	r3, r3, #8
 80033b4:	b29c      	uxth	r4, r3
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	3301      	adds	r3, #1
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 80033c2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff fed4 	bl	8003174 <WIZCHIP_READ>
 80033cc:	4603      	mov	r3, r0
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	4423      	add	r3, r4
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	81fb      	strh	r3, [r7, #14]
   addrsel = ((uint32_t)ptr << 8) + WIZCHIP_TXBUF_BLOCK(sn);
 80033d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033da:	021b      	lsls	r3, r3, #8
 80033dc:	79fa      	ldrb	r2, [r7, #7]
 80033de:	0092      	lsls	r2, r2, #2
 80033e0:	3202      	adds	r2, #2
 80033e2:	00d2      	lsls	r2, r2, #3
 80033e4:	4413      	add	r3, r2
 80033e6:	60bb      	str	r3, [r7, #8]
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80033e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80033ec:	461a      	mov	r2, r3
 80033ee:	6839      	ldr	r1, [r7, #0]
 80033f0:	68b8      	ldr	r0, [r7, #8]
 80033f2:	f7ff feef 	bl	80031d4 <WIZCHIP_WRITE_BUF>
   ptr += len;
 80033f6:	89fa      	ldrh	r2, [r7, #14]
 80033f8:	88bb      	ldrh	r3, [r7, #4]
 80033fa:	4413      	add	r3, r2
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8003400:	79fb      	ldrb	r3, [r7, #7]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	3301      	adds	r3, #1
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 800340c:	461a      	mov	r2, r3
 800340e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003412:	121b      	asrs	r3, r3, #8
 8003414:	b21b      	sxth	r3, r3
 8003416:	b2db      	uxtb	r3, r3
 8003418:	4619      	mov	r1, r3
 800341a:	4610      	mov	r0, r2
 800341c:	f7ff fe78 	bl	8003110 <WIZCHIP_WRITE>
 8003420:	79fb      	ldrb	r3, [r7, #7]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	3301      	adds	r3, #1
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 800342c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003430:	461a      	mov	r2, r3
 8003432:	89fb      	ldrh	r3, [r7, #14]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	4619      	mov	r1, r3
 8003438:	4610      	mov	r0, r2
 800343a:	f7ff fe69 	bl	8003110 <WIZCHIP_WRITE>
}
 800343e:	bf00      	nop
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	bd90      	pop	{r4, r7, pc}

08003446 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, datasize_t len)
{
 8003446:	b590      	push	{r4, r7, lr}
 8003448:	b085      	sub	sp, #20
 800344a:	af00      	add	r7, sp, #0
 800344c:	4603      	mov	r3, r0
 800344e:	6039      	str	r1, [r7, #0]
 8003450:	71fb      	strb	r3, [r7, #7]
 8003452:	4613      	mov	r3, r2
 8003454:	80bb      	strh	r3, [r7, #4]
   datasize_t ptr = 0;
 8003456:	2300      	movs	r3, #0
 8003458:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800345a:	2300      	movs	r3, #0
 800345c:	60bb      	str	r3, [r7, #8]
   if(len == 0) return;
 800345e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d051      	beq.n	800350a <wiz_recv_data+0xc4>
   ptr = getSn_RX_RD(sn);
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	3301      	adds	r3, #1
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff fe7e 	bl	8003174 <WIZCHIP_READ>
 8003478:	4603      	mov	r3, r0
 800347a:	b29b      	uxth	r3, r3
 800347c:	021b      	lsls	r3, r3, #8
 800347e:	b29c      	uxth	r4, r3
 8003480:	79fb      	ldrb	r3, [r7, #7]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	3301      	adds	r3, #1
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 800348c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff fe6f 	bl	8003174 <WIZCHIP_READ>
 8003496:	4603      	mov	r3, r0
 8003498:	b29b      	uxth	r3, r3
 800349a:	4423      	add	r3, r4
 800349c:	b29b      	uxth	r3, r3
 800349e:	81fb      	strh	r3, [r7, #14]
   addrsel = ((uint32_t)ptr << 8) + WIZCHIP_RXBUF_BLOCK(sn);
 80034a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034a4:	021b      	lsls	r3, r3, #8
 80034a6:	79fa      	ldrb	r2, [r7, #7]
 80034a8:	0092      	lsls	r2, r2, #2
 80034aa:	3203      	adds	r2, #3
 80034ac:	00d2      	lsls	r2, r2, #3
 80034ae:	4413      	add	r3, r2
 80034b0:	60bb      	str	r3, [r7, #8]
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80034b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80034b6:	461a      	mov	r2, r3
 80034b8:	6839      	ldr	r1, [r7, #0]
 80034ba:	68b8      	ldr	r0, [r7, #8]
 80034bc:	f7ff fec2 	bl	8003244 <WIZCHIP_READ_BUF>
   ptr += len;
 80034c0:	89fa      	ldrh	r2, [r7, #14]
 80034c2:	88bb      	ldrh	r3, [r7, #4]
 80034c4:	4413      	add	r3, r2
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 80034ca:	79fb      	ldrb	r3, [r7, #7]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	3301      	adds	r3, #1
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 80034d6:	461a      	mov	r2, r3
 80034d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034dc:	121b      	asrs	r3, r3, #8
 80034de:	b21b      	sxth	r3, r3
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	4619      	mov	r1, r3
 80034e4:	4610      	mov	r0, r2
 80034e6:	f7ff fe13 	bl	8003110 <WIZCHIP_WRITE>
 80034ea:	79fb      	ldrb	r3, [r7, #7]
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	3301      	adds	r3, #1
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 80034f6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80034fa:	461a      	mov	r2, r3
 80034fc:	89fb      	ldrh	r3, [r7, #14]
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	4619      	mov	r1, r3
 8003502:	4610      	mov	r0, r2
 8003504:	f7ff fe04 	bl	8003110 <WIZCHIP_WRITE>
 8003508:	e000      	b.n	800350c <wiz_recv_data+0xc6>
   if(len == 0) return;
 800350a:	bf00      	nop
}
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	bd90      	pop	{r4, r7, pc}
	...

08003514 <socket>:
   }while(0);



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{ 
 8003514:	b590      	push	{r4, r7, lr}
 8003516:	b08d      	sub	sp, #52	; 0x34
 8003518:	af00      	add	r7, sp, #0
 800351a:	4604      	mov	r4, r0
 800351c:	4608      	mov	r0, r1
 800351e:	4611      	mov	r1, r2
 8003520:	461a      	mov	r2, r3
 8003522:	4623      	mov	r3, r4
 8003524:	71fb      	strb	r3, [r7, #7]
 8003526:	4603      	mov	r3, r0
 8003528:	71bb      	strb	r3, [r7, #6]
 800352a:	460b      	mov	r3, r1
 800352c:	80bb      	strh	r3, [r7, #4]
 800352e:	4613      	mov	r3, r2
 8003530:	70fb      	strb	r3, [r7, #3]
   uint8_t taddr[16];
   uint16_t local_port=0;
 8003532:	2300      	movs	r3, #0
 8003534:	83fb      	strh	r3, [r7, #30]
   CHECK_SOCKNUM(); 
 8003536:	79fb      	ldrb	r3, [r7, #7]
 8003538:	2b07      	cmp	r3, #7
 800353a:	d902      	bls.n	8003542 <socket+0x2e>
 800353c:	f04f 33ff 	mov.w	r3, #4294967295
 8003540:	e1ce      	b.n	80038e0 <socket+0x3cc>
   switch (protocol & 0x0F)
 8003542:	79bb      	ldrb	r3, [r7, #6]
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	3b01      	subs	r3, #1
 800354a:	2b0d      	cmp	r3, #13
 800354c:	f200 80bc 	bhi.w	80036c8 <socket+0x1b4>
 8003550:	a201      	add	r2, pc, #4	; (adr r2, 8003558 <socket+0x44>)
 8003552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003556:	bf00      	nop
 8003558:	08003591 	.word	0x08003591
 800355c:	080036cf 	.word	0x080036cf
 8003560:	080036cf 	.word	0x080036cf
 8003564:	080036c9 	.word	0x080036c9
 8003568:	080036c9 	.word	0x080036c9
 800356c:	080036c9 	.word	0x080036c9
 8003570:	080036cf 	.word	0x080036cf
 8003574:	080036c9 	.word	0x080036c9
 8003578:	080035df 	.word	0x080035df
 800357c:	080036cf 	.word	0x080036cf
 8003580:	080036cf 	.word	0x080036cf
 8003584:	080036c9 	.word	0x080036c9
 8003588:	0800362d 	.word	0x0800362d
 800358c:	080036cf 	.word	0x080036cf
   {
      case Sn_MR_TCP4 :
         getSIPR(taddr);
 8003590:	f107 030c 	add.w	r3, r7, #12
 8003594:	2204      	movs	r2, #4
 8003596:	4619      	mov	r1, r3
 8003598:	4875      	ldr	r0, [pc, #468]	; (8003770 <socket+0x25c>)
 800359a:	f7ff fe53 	bl	8003244 <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 4);
 800359e:	2300      	movs	r3, #0
 80035a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80035a2:	2300      	movs	r3, #0
 80035a4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80035a8:	e00f      	b.n	80035ca <socket+0xb6>
 80035aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80035ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80035b2:	4413      	add	r3, r2
 80035b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80035bc:	4413      	add	r3, r2
 80035be:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80035c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80035c4:	3301      	adds	r3, #1
 80035c6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80035ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80035ce:	2b03      	cmp	r3, #3
 80035d0:	d9eb      	bls.n	80035aa <socket+0x96>
 80035d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d17c      	bne.n	80036d2 <socket+0x1be>
 80035d8:	f06f 030b 	mvn.w	r3, #11
 80035dc:	e180      	b.n	80038e0 <socket+0x3cc>
         break;
      case Sn_MR_TCP6 :
         getLLAR(taddr);
 80035de:	f107 030c 	add.w	r3, r7, #12
 80035e2:	2210      	movs	r2, #16
 80035e4:	4619      	mov	r1, r3
 80035e6:	4863      	ldr	r0, [pc, #396]	; (8003774 <socket+0x260>)
 80035e8:	f7ff fe2c 	bl	8003244 <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 16);
 80035ec:	2300      	movs	r3, #0
 80035ee:	857b      	strh	r3, [r7, #42]	; 0x2a
 80035f0:	2300      	movs	r3, #0
 80035f2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80035f6:	e00f      	b.n	8003618 <socket+0x104>
 80035f8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80035fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003600:	4413      	add	r3, r2
 8003602:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003606:	b29a      	uxth	r2, r3
 8003608:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800360a:	4413      	add	r3, r2
 800360c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800360e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003612:	3301      	adds	r3, #1
 8003614:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8003618:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800361c:	2b0f      	cmp	r3, #15
 800361e:	d9eb      	bls.n	80035f8 <socket+0xe4>
 8003620:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003622:	2b00      	cmp	r3, #0
 8003624:	d157      	bne.n	80036d6 <socket+0x1c2>
 8003626:	f06f 030b 	mvn.w	r3, #11
 800362a:	e159      	b.n	80038e0 <socket+0x3cc>
         //getGUAR(taddr);
         //CHECK_IPZERO(taddr, 16);
         break;
      case Sn_MR_TCPD :  
         getSIPR(taddr);
 800362c:	f107 030c 	add.w	r3, r7, #12
 8003630:	2204      	movs	r2, #4
 8003632:	4619      	mov	r1, r3
 8003634:	484e      	ldr	r0, [pc, #312]	; (8003770 <socket+0x25c>)
 8003636:	f7ff fe05 	bl	8003244 <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 4);
 800363a:	2300      	movs	r3, #0
 800363c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800363e:	2300      	movs	r3, #0
 8003640:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003644:	e00f      	b.n	8003666 <socket+0x152>
 8003646:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800364a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800364e:	4413      	add	r3, r2
 8003650:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003654:	b29a      	uxth	r2, r3
 8003656:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003658:	4413      	add	r3, r2
 800365a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800365c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003660:	3301      	adds	r3, #1
 8003662:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003666:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800366a:	2b03      	cmp	r3, #3
 800366c:	d9eb      	bls.n	8003646 <socket+0x132>
 800366e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003670:	2b00      	cmp	r3, #0
 8003672:	d102      	bne.n	800367a <socket+0x166>
 8003674:	f06f 030b 	mvn.w	r3, #11
 8003678:	e132      	b.n	80038e0 <socket+0x3cc>
         getLLAR(taddr);
 800367a:	f107 030c 	add.w	r3, r7, #12
 800367e:	2210      	movs	r2, #16
 8003680:	4619      	mov	r1, r3
 8003682:	483c      	ldr	r0, [pc, #240]	; (8003774 <socket+0x260>)
 8003684:	f7ff fdde 	bl	8003244 <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 16);
 8003688:	2300      	movs	r3, #0
 800368a:	847b      	strh	r3, [r7, #34]	; 0x22
 800368c:	2300      	movs	r3, #0
 800368e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003692:	e00f      	b.n	80036b4 <socket+0x1a0>
 8003694:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003698:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800369c:	4413      	add	r3, r2
 800369e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80036a6:	4413      	add	r3, r2
 80036a8:	847b      	strh	r3, [r7, #34]	; 0x22
 80036aa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80036ae:	3301      	adds	r3, #1
 80036b0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80036b4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80036b8:	2b0f      	cmp	r3, #15
 80036ba:	d9eb      	bls.n	8003694 <socket+0x180>
 80036bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10b      	bne.n	80036da <socket+0x1c6>
 80036c2:	f06f 030b 	mvn.w	r3, #11
 80036c6:	e10b      	b.n	80038e0 <socket+0x3cc>
      case Sn_MR_MACRAW :
      case Sn_MR_IPRAW4 :
      case Sn_MR_IPRAW6 :
         break; 
      default :
        return SOCKERR_SOCKMODE;
 80036c8:	f06f 0304 	mvn.w	r3, #4
 80036cc:	e108      	b.n	80038e0 <socket+0x3cc>
         break; 
 80036ce:	bf00      	nop
 80036d0:	e004      	b.n	80036dc <socket+0x1c8>
         break;
 80036d2:	bf00      	nop
 80036d4:	e002      	b.n	80036dc <socket+0x1c8>
         break;
 80036d6:	bf00      	nop
 80036d8:	e000      	b.n	80036dc <socket+0x1c8>
         break;
 80036da:	bf00      	nop
   } 

   if((flag & 0x04)) return SOCKERR_SOCKFLAG;
 80036dc:	78fb      	ldrb	r3, [r7, #3]
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <socket+0x1d8>
 80036e6:	f06f 0305 	mvn.w	r3, #5
 80036ea:	e0f9      	b.n	80038e0 <socket+0x3cc>
   if(flag != 0)
 80036ec:	78fb      	ldrb	r3, [r7, #3]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d036      	beq.n	8003760 <socket+0x24c>
   {
      switch(protocol)
 80036f2:	79bb      	ldrb	r3, [r7, #6]
 80036f4:	3b01      	subs	r3, #1
 80036f6:	2b0c      	cmp	r3, #12
 80036f8:	d834      	bhi.n	8003764 <socket+0x250>
 80036fa:	a201      	add	r2, pc, #4	; (adr r2, 8003700 <socket+0x1ec>)
 80036fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003700:	08003745 	.word	0x08003745
 8003704:	08003765 	.word	0x08003765
 8003708:	08003755 	.word	0x08003755
 800370c:	08003765 	.word	0x08003765
 8003710:	08003765 	.word	0x08003765
 8003714:	08003765 	.word	0x08003765
 8003718:	08003735 	.word	0x08003735
 800371c:	08003765 	.word	0x08003765
 8003720:	08003745 	.word	0x08003745
 8003724:	08003765 	.word	0x08003765
 8003728:	08003755 	.word	0x08003755
 800372c:	08003765 	.word	0x08003765
 8003730:	08003745 	.word	0x08003745
      {
         case Sn_MR_MACRAW:
            if((flag & (SF_DHA_MANUAL | SF_FORCE_ARP)) != 0)
 8003734:	78fb      	ldrb	r3, [r7, #3]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d014      	beq.n	8003768 <socket+0x254>
            	return SOCKERR_SOCKFLAG;
 800373e:	f06f 0305 	mvn.w	r3, #5
 8003742:	e0cd      	b.n	80038e0 <socket+0x3cc>
            break;
         case Sn_MR_TCP4:
         case Sn_MR_TCP6:
         case Sn_MR_TCPD:     
            if((flag & (SF_MULTI_ENABLE | SF_UNI_BLOCK)) !=0)
 8003744:	78fb      	ldrb	r3, [r7, #3]
 8003746:	f003 0390 	and.w	r3, r3, #144	; 0x90
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00e      	beq.n	800376c <socket+0x258>
            	return SOCKERR_SOCKFLAG;
 800374e:	f06f 0305 	mvn.w	r3, #5
 8003752:	e0c5      	b.n	80038e0 <socket+0x3cc>
            break;
         case Sn_MR_IPRAW4:
         case Sn_MR_IPRAW6:
            if(flag !=0)
 8003754:	78fb      	ldrb	r3, [r7, #3]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00e      	beq.n	8003778 <socket+0x264>
            	return SOCKERR_SOCKFLAG;
 800375a:	f06f 0305 	mvn.w	r3, #5
 800375e:	e0bf      	b.n	80038e0 <socket+0x3cc>
            break;
         default:
            break;
      }
   }
 8003760:	bf00      	nop
 8003762:	e00a      	b.n	800377a <socket+0x266>
            break;
 8003764:	bf00      	nop
 8003766:	e008      	b.n	800377a <socket+0x266>
            break;
 8003768:	bf00      	nop
 800376a:	e006      	b.n	800377a <socket+0x266>
            break;
 800376c:	bf00      	nop
 800376e:	e004      	b.n	800377a <socket+0x266>
 8003770:	00413800 	.word	0x00413800
 8003774:	00414000 	.word	0x00414000
            break;
 8003778:	bf00      	nop
   close(sn);
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	4618      	mov	r0, r3
 800377e:	f000 f8bd 	bl	80038fc <close>
   setSn_MR(sn,(protocol | (flag & 0xF0)));
 8003782:	79fb      	ldrb	r3, [r7, #7]
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	3301      	adds	r3, #1
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	4618      	mov	r0, r3
 800378c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003790:	f023 030f 	bic.w	r3, r3, #15
 8003794:	b25a      	sxtb	r2, r3
 8003796:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800379a:	4313      	orrs	r3, r2
 800379c:	b25b      	sxtb	r3, r3
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	4619      	mov	r1, r3
 80037a2:	f7ff fcb5 	bl	8003110 <WIZCHIP_WRITE>
   setSn_MR2(sn, flag & 0x03);  
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	3301      	adds	r3, #1
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 80037b2:	461a      	mov	r2, r3
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	4619      	mov	r1, r3
 80037be:	4610      	mov	r0, r2
 80037c0:	f7ff fca6 	bl	8003110 <WIZCHIP_WRITE>
   if(!port)
 80037c4:	88bb      	ldrh	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d110      	bne.n	80037ec <socket+0x2d8>
   {
      port = sock_any_port++;
 80037ca:	4b47      	ldr	r3, [pc, #284]	; (80038e8 <socket+0x3d4>)
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	b291      	uxth	r1, r2
 80037d2:	4a45      	ldr	r2, [pc, #276]	; (80038e8 <socket+0x3d4>)
 80037d4:	8011      	strh	r1, [r2, #0]
 80037d6:	80bb      	strh	r3, [r7, #4]
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80037d8:	4b43      	ldr	r3, [pc, #268]	; (80038e8 <socket+0x3d4>)
 80037da:	881b      	ldrh	r3, [r3, #0]
 80037dc:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d103      	bne.n	80037ec <socket+0x2d8>
 80037e4:	4b40      	ldr	r3, [pc, #256]	; (80038e8 <socket+0x3d4>)
 80037e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037ea:	801a      	strh	r2, [r3, #0]
   }
   setSn_PORTR(sn,port);
 80037ec:	79fb      	ldrb	r3, [r7, #7]
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	3301      	adds	r3, #1
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 80037f8:	461a      	mov	r2, r3
 80037fa:	88bb      	ldrh	r3, [r7, #4]
 80037fc:	0a1b      	lsrs	r3, r3, #8
 80037fe:	b29b      	uxth	r3, r3
 8003800:	b2db      	uxtb	r3, r3
 8003802:	4619      	mov	r1, r3
 8003804:	4610      	mov	r0, r2
 8003806:	f7ff fc83 	bl	8003110 <WIZCHIP_WRITE>
 800380a:	79fb      	ldrb	r3, [r7, #7]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	3301      	adds	r3, #1
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 8003816:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800381a:	461a      	mov	r2, r3
 800381c:	88bb      	ldrh	r3, [r7, #4]
 800381e:	b2db      	uxtb	r3, r3
 8003820:	4619      	mov	r1, r3
 8003822:	4610      	mov	r0, r2
 8003824:	f7ff fc74 	bl	8003110 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	3301      	adds	r3, #1
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003834:	2101      	movs	r1, #1
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff fc6a 	bl	8003110 <WIZCHIP_WRITE>

   while(getSn_CR(sn));
 800383c:	bf00      	nop
 800383e:	79fb      	ldrb	r3, [r7, #7]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	3301      	adds	r3, #1
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff fc92 	bl	8003174 <WIZCHIP_READ>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f3      	bne.n	800383e <socket+0x32a>

   sock_io_mode &= ~(1 <<sn);
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	2201      	movs	r2, #1
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	b21b      	sxth	r3, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	b21a      	sxth	r2, r3
 8003864:	4b21      	ldr	r3, [pc, #132]	; (80038ec <socket+0x3d8>)
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	b21b      	sxth	r3, r3
 800386a:	4013      	ands	r3, r2
 800386c:	b21b      	sxth	r3, r3
 800386e:	b29a      	uxth	r2, r3
 8003870:	4b1e      	ldr	r3, [pc, #120]	; (80038ec <socket+0x3d8>)
 8003872:	801a      	strh	r2, [r3, #0]
   sock_io_mode |= ((flag & (SF_IO_NONBLOCK>>3)) << sn);
 8003874:	78fb      	ldrb	r3, [r7, #3]
 8003876:	f003 0201 	and.w	r2, r3, #1
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	b21a      	sxth	r2, r3
 8003882:	4b1a      	ldr	r3, [pc, #104]	; (80038ec <socket+0x3d8>)
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	b21b      	sxth	r3, r3
 8003888:	4313      	orrs	r3, r2
 800388a:	b21b      	sxth	r3, r3
 800388c:	b29a      	uxth	r2, r3
 800388e:	4b17      	ldr	r3, [pc, #92]	; (80038ec <socket+0x3d8>)
 8003890:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	2201      	movs	r2, #1
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	b21b      	sxth	r3, r3
 800389c:	43db      	mvns	r3, r3
 800389e:	b21a      	sxth	r2, r3
 80038a0:	4b13      	ldr	r3, [pc, #76]	; (80038f0 <socket+0x3dc>)
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	b21b      	sxth	r3, r3
 80038a6:	4013      	ands	r3, r2
 80038a8:	b21b      	sxth	r3, r3
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	4b10      	ldr	r3, [pc, #64]	; (80038f0 <socket+0x3dc>)
 80038ae:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80038b0:	79fb      	ldrb	r3, [r7, #7]
 80038b2:	4a10      	ldr	r2, [pc, #64]	; (80038f4 <socket+0x3e0>)
 80038b4:	2100      	movs	r1, #0
 80038b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_pack_info[sn] = PACK_NONE;
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	4a0e      	ldr	r2, [pc, #56]	; (80038f8 <socket+0x3e4>)
 80038be:	2100      	movs	r1, #0
 80038c0:	54d1      	strb	r1, [r2, r3]

   while(getSn_SR(sn) == SOCK_CLOSED) ;
 80038c2:	bf00      	nop
 80038c4:	79fb      	ldrb	r3, [r7, #7]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	3301      	adds	r3, #1
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff fc4f 	bl	8003174 <WIZCHIP_READ>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0f3      	beq.n	80038c4 <socket+0x3b0>
//   printf("[%d]%d\r\n", sn, getSn_PORTR(sn));
   return sn;
 80038dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}  
 80038e0:	4618      	mov	r0, r3
 80038e2:	3734      	adds	r7, #52	; 0x34
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd90      	pop	{r4, r7, pc}
 80038e8:	20000080 	.word	0x20000080
 80038ec:	20000130 	.word	0x20000130
 80038f0:	20000132 	.word	0x20000132
 80038f4:	20000134 	.word	0x20000134
 80038f8:	20000144 	.word	0x20000144

080038fc <close>:


int8_t close(uint8_t sn)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8003906:	79fb      	ldrb	r3, [r7, #7]
 8003908:	2b07      	cmp	r3, #7
 800390a:	d902      	bls.n	8003912 <close+0x16>
 800390c:	f04f 33ff 	mov.w	r3, #4294967295
 8003910:	e055      	b.n	80039be <close+0xc2>
   setSn_CR(sn,Sn_CR_CLOSE);
 8003912:	79fb      	ldrb	r3, [r7, #7]
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	3301      	adds	r3, #1
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800391e:	2110      	movs	r1, #16
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff fbf5 	bl	8003110 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while( getSn_CR(sn) );
 8003926:	bf00      	nop
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	3301      	adds	r3, #1
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff fc1d 	bl	8003174 <WIZCHIP_READ>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1f3      	bne.n	8003928 <close+0x2c>
   /* clear all interrupt of SOCKETn. */
   setSn_IRCLR(sn, 0xFF);
 8003940:	79fb      	ldrb	r3, [r7, #7]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	3301      	adds	r3, #1
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800394c:	21ff      	movs	r1, #255	; 0xff
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff fbde 	bl	8003110 <WIZCHIP_WRITE>
   /* Release the sock_io_mode of SOCKETn. */
   sock_io_mode &= ~(1<<sn); 
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	2201      	movs	r2, #1
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	b21b      	sxth	r3, r3
 800395e:	43db      	mvns	r3, r3
 8003960:	b21a      	sxth	r2, r3
 8003962:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <close+0xcc>)
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	b21b      	sxth	r3, r3
 8003968:	4013      	ands	r3, r2
 800396a:	b21b      	sxth	r3, r3
 800396c:	b29a      	uxth	r2, r3
 800396e:	4b16      	ldr	r3, [pc, #88]	; (80039c8 <close+0xcc>)
 8003970:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	4a15      	ldr	r2, [pc, #84]	; (80039cc <close+0xd0>)
 8003976:	2100      	movs	r1, #0
 8003978:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_is_sending &= ~(1<<sn);
 800397c:	79fb      	ldrb	r3, [r7, #7]
 800397e:	2201      	movs	r2, #1
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	b21b      	sxth	r3, r3
 8003986:	43db      	mvns	r3, r3
 8003988:	b21a      	sxth	r2, r3
 800398a:	4b11      	ldr	r3, [pc, #68]	; (80039d0 <close+0xd4>)
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	b21b      	sxth	r3, r3
 8003990:	4013      	ands	r3, r2
 8003992:	b21b      	sxth	r3, r3
 8003994:	b29a      	uxth	r2, r3
 8003996:	4b0e      	ldr	r3, [pc, #56]	; (80039d0 <close+0xd4>)
 8003998:	801a      	strh	r2, [r3, #0]
   sock_pack_info[sn] = PACK_NONE;
 800399a:	79fb      	ldrb	r3, [r7, #7]
 800399c:	4a0d      	ldr	r2, [pc, #52]	; (80039d4 <close+0xd8>)
 800399e:	2100      	movs	r1, #0
 80039a0:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) != SOCK_CLOSED);
 80039a2:	bf00      	nop
 80039a4:	79fb      	ldrb	r3, [r7, #7]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	3301      	adds	r3, #1
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff fbdf 	bl	8003174 <WIZCHIP_READ>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1f3      	bne.n	80039a4 <close+0xa8>
   return SOCK_OK;
 80039bc:	2301      	movs	r3, #1
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20000130 	.word	0x20000130
 80039cc:	20000134 	.word	0x20000134
 80039d0:	20000132 	.word	0x20000132
 80039d4:	20000144 	.word	0x20000144

080039d8 <listen>:


int8_t listen(uint8_t sn)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	4603      	mov	r3, r0
 80039e0:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	2b07      	cmp	r3, #7
 80039e6:	d902      	bls.n	80039ee <listen+0x16>
 80039e8:	f04f 33ff 	mov.w	r3, #4294967295
 80039ec:	e03a      	b.n	8003a64 <listen+0x8c>
   CHECK_SOCKINIT();
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	3301      	adds	r3, #1
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff fbba 	bl	8003174 <WIZCHIP_READ>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b13      	cmp	r3, #19
 8003a04:	d002      	beq.n	8003a0c <listen+0x34>
 8003a06:	f06f 0302 	mvn.w	r3, #2
 8003a0a:	e02b      	b.n	8003a64 <listen+0x8c>
   setSn_CR(sn,Sn_CR_LISTEN);
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	3301      	adds	r3, #1
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a18:	2102      	movs	r1, #2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff fb78 	bl	8003110 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003a20:	bf00      	nop
 8003a22:	79fb      	ldrb	r3, [r7, #7]
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	3301      	adds	r3, #1
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff fba0 	bl	8003174 <WIZCHIP_READ>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1f3      	bne.n	8003a22 <listen+0x4a>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8003a3a:	e006      	b.n	8003a4a <listen+0x72>
   {
      close(sn);
 8003a3c:	79fb      	ldrb	r3, [r7, #7]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff ff5c 	bl	80038fc <close>
      return SOCKERR_SOCKCLOSED;
 8003a44:	f06f 0303 	mvn.w	r3, #3
 8003a48:	e00c      	b.n	8003a64 <listen+0x8c>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8003a4a:	79fb      	ldrb	r3, [r7, #7]
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	3301      	adds	r3, #1
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff fb8c 	bl	8003174 <WIZCHIP_READ>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b14      	cmp	r3, #20
 8003a60:	d1ec      	bne.n	8003a3c <listen+0x64>
   }
   return SOCK_OK;
 8003a62:	2301      	movs	r3, #1
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <disconnect>:
   } 
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	2b07      	cmp	r3, #7
 8003a7a:	d902      	bls.n	8003a82 <disconnect+0x16>
 8003a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a80:	e05f      	b.n	8003b42 <disconnect+0xd6>
   CHECK_TCPMODE();
 8003a82:	79fb      	ldrb	r3, [r7, #7]
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	3301      	adds	r3, #1
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff fb72 	bl	8003174 <WIZCHIP_READ>
 8003a90:	4603      	mov	r3, r0
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d002      	beq.n	8003aa0 <disconnect+0x34>
 8003a9a:	f06f 0304 	mvn.w	r3, #4
 8003a9e:	e050      	b.n	8003b42 <disconnect+0xd6>
   if(getSn_SR(sn) != SOCK_CLOSED)
 8003aa0:	79fb      	ldrb	r3, [r7, #7]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff fb61 	bl	8003174 <WIZCHIP_READ>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d043      	beq.n	8003b40 <disconnect+0xd4>
   {
      setSn_CR(sn,Sn_CR_DISCON);
 8003ab8:	79fb      	ldrb	r3, [r7, #7]
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	3301      	adds	r3, #1
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ac4:	2108      	movs	r1, #8
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff fb22 	bl	8003110 <WIZCHIP_WRITE>
      /* wait to process the command... */
      while(getSn_CR(sn));
 8003acc:	bf00      	nop
 8003ace:	79fb      	ldrb	r3, [r7, #7]
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7ff fb4a 	bl	8003174 <WIZCHIP_READ>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f3      	bne.n	8003ace <disconnect+0x62>
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8003ae6:	4b19      	ldr	r3, [pc, #100]	; (8003b4c <disconnect+0xe0>)
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	fa42 f303 	asr.w	r3, r2, r3
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d016      	beq.n	8003b28 <disconnect+0xbc>
 8003afa:	2300      	movs	r3, #0
 8003afc:	e021      	b.n	8003b42 <disconnect+0xd6>
      while(getSn_SR(sn) != SOCK_CLOSED)
      {
         if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	3301      	adds	r3, #1
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff fb32 	bl	8003174 <WIZCHIP_READ>
 8003b10:	4603      	mov	r3, r0
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d006      	beq.n	8003b28 <disconnect+0xbc>
         {
            close(sn);
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff feed 	bl	80038fc <close>
            return SOCKERR_TIMEOUT;
 8003b22:	f06f 030c 	mvn.w	r3, #12
 8003b26:	e00c      	b.n	8003b42 <disconnect+0xd6>
      while(getSn_SR(sn) != SOCK_CLOSED)
 8003b28:	79fb      	ldrb	r3, [r7, #7]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff fb1d 	bl	8003174 <WIZCHIP_READ>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1de      	bne.n	8003afe <disconnect+0x92>
         }
      }
   }
   return SOCK_OK;
 8003b40:	2301      	movs	r3, #1
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	20000130 	.word	0x20000130

08003b50 <send>:


datasize_t send(uint8_t sn, uint8_t * buf, datasize_t len)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	4603      	mov	r3, r0
 8003b58:	6039      	str	r1, [r7, #0]
 8003b5a:	71fb      	strb	r3, [r7, #7]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8003b60:	2300      	movs	r3, #0
 8003b62:	73fb      	strb	r3, [r7, #15]
   datasize_t freesize=0;
 8003b64:	2300      	movs	r3, #0
 8003b66:	81bb      	strh	r3, [r7, #12]
    */
   //CHECK_SOCKNUM();
   //CHECK_TCPMODE(Sn_MR_TCP4);
   /************/

   freesize = getSn_TxMAX(sn);
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff fafd 	bl	8003174 <WIZCHIP_READ>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	029b      	lsls	r3, r3, #10
 8003b7e:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8003b80:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003b84:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	dd01      	ble.n	8003b90 <send+0x40>
 8003b8c:	89bb      	ldrh	r3, [r7, #12]
 8003b8e:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = (datasize_t)getSn_TX_FSR(sn);
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff fb8a 	bl	80032ac <getSn_TX_FSR>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8003b9c:	79fb      	ldrb	r3, [r7, #7]
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff fae3 	bl	8003174 <WIZCHIP_READ>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
 8003bb4:	2b17      	cmp	r3, #23
 8003bb6:	d00c      	beq.n	8003bd2 <send+0x82>
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	2b1c      	cmp	r3, #28
 8003bbc:	d009      	beq.n	8003bd2 <send+0x82>
      {
         if(tmp == SOCK_CLOSED) close(sn);
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d103      	bne.n	8003bcc <send+0x7c>
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff fe98 	bl	80038fc <close>
         return SOCKERR_SOCKSTATUS;
 8003bcc:	f06f 0306 	mvn.w	r3, #6
 8003bd0:	e097      	b.n	8003d02 <send+0x1b2>
      }
      if(len <= freesize) break;
 8003bd2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003bd6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	dd0b      	ble.n	8003bf6 <send+0xa6>
      if( sock_io_mode & (1<<sn) ) return SOCK_BUSY;  
 8003bde:	4b4b      	ldr	r3, [pc, #300]	; (8003d0c <send+0x1bc>)
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	79fb      	ldrb	r3, [r7, #7]
 8003be6:	fa42 f303 	asr.w	r3, r2, r3
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0ce      	beq.n	8003b90 <send+0x40>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	e085      	b.n	8003d02 <send+0x1b2>
      if(len <= freesize) break;
 8003bf6:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8003bf8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003bfc:	79fb      	ldrb	r3, [r7, #7]
 8003bfe:	6839      	ldr	r1, [r7, #0]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff fbbf 	bl	8003384 <wiz_send_data>
   if(sock_is_sending & (1<<sn))
 8003c06:	4b42      	ldr	r3, [pc, #264]	; (8003d10 <send+0x1c0>)
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	79fb      	ldrb	r3, [r7, #7]
 8003c0e:	fa42 f303 	asr.w	r3, r2, r3
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d04d      	beq.n	8003cb6 <send+0x166>
   {
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 8003c1a:	e034      	b.n	8003c86 <send+0x136>
      {    
         tmp = getSn_SR(sn);
 8003c1c:	79fb      	ldrb	r3, [r7, #7]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	3301      	adds	r3, #1
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff faa3 	bl	8003174 <WIZCHIP_READ>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	73fb      	strb	r3, [r7, #15]
         if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT) )
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
 8003c34:	2b17      	cmp	r3, #23
 8003c36:	d01a      	beq.n	8003c6e <send+0x11e>
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	2b1c      	cmp	r3, #28
 8003c3c:	d017      	beq.n	8003c6e <send+0x11e>
         {
            if( (tmp == SOCK_CLOSED) || (getSn_IR(sn) & Sn_IR_TIMEOUT) ) close(sn);
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00d      	beq.n	8003c60 <send+0x110>
 8003c44:	79fb      	ldrb	r3, [r7, #7]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	3301      	adds	r3, #1
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff fa8f 	bl	8003174 <WIZCHIP_READ>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <send+0x118>
 8003c60:	79fb      	ldrb	r3, [r7, #7]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff fe4a 	bl	80038fc <close>
            return SOCKERR_SOCKSTATUS;
 8003c68:	f06f 0306 	mvn.w	r3, #6
 8003c6c:	e049      	b.n	8003d02 <send+0x1b2>
         }
         if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8003c6e:	4b27      	ldr	r3, [pc, #156]	; (8003d0c <send+0x1bc>)
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	461a      	mov	r2, r3
 8003c74:	79fb      	ldrb	r3, [r7, #7]
 8003c76:	fa42 f303 	asr.w	r3, r2, r3
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <send+0x136>
 8003c82:	2300      	movs	r3, #0
 8003c84:	e03d      	b.n	8003d02 <send+0x1b2>
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 8003c86:	79fb      	ldrb	r3, [r7, #7]
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff fa6e 	bl	8003174 <WIZCHIP_READ>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	f003 0310 	and.w	r3, r3, #16
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0bc      	beq.n	8003c1c <send+0xcc>
      } 
      setSn_IRCLR(sn, Sn_IR_SENDOK);
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003cae:	2110      	movs	r1, #16
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff fa2d 	bl	8003110 <WIZCHIP_WRITE>
   }
   setSn_CR(sn,Sn_CR_SEND);
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	3301      	adds	r3, #1
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cc2:	2120      	movs	r1, #32
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff fa23 	bl	8003110 <WIZCHIP_WRITE>
 
   while(getSn_CR(sn));   // wait to process the command...
 8003cca:	bf00      	nop
 8003ccc:	79fb      	ldrb	r3, [r7, #7]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff fa4b 	bl	8003174 <WIZCHIP_READ>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1f3      	bne.n	8003ccc <send+0x17c>
   sock_is_sending |= (1<<sn);
 8003ce4:	79fb      	ldrb	r3, [r7, #7]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	b21a      	sxth	r2, r3
 8003cee:	4b08      	ldr	r3, [pc, #32]	; (8003d10 <send+0x1c0>)
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	b21b      	sxth	r3, r3
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	b21b      	sxth	r3, r3
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <send+0x1c0>)
 8003cfc:	801a      	strh	r2, [r3, #0]
 
   return len;
 8003cfe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000130 	.word	0x20000130
 8003d10:	20000132 	.word	0x20000132

08003d14 <recv>:


datasize_t recv(uint8_t sn, uint8_t * buf, datasize_t len)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	6039      	str	r1, [r7, #0]
 8003d1e:	71fb      	strb	r3, [r7, #7]
 8003d20:	4613      	mov	r3, r2
 8003d22:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	73fb      	strb	r3, [r7, #15]
   datasize_t recvsize = 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	81bb      	strh	r3, [r7, #12]
   //CHECK_SOCKNUM();
   //CHECK_TCPMODE();
   //CHECK_SOCKDATA();
   /************/
 
   recvsize = getSn_RxMAX(sn); 
 8003d2c:	79fb      	ldrb	r3, [r7, #7]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	3301      	adds	r3, #1
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff fa1b 	bl	8003174 <WIZCHIP_READ>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	029b      	lsls	r3, r3, #10
 8003d42:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8003d44:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003d48:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	da01      	bge.n	8003d54 <recv+0x40>
 8003d50:	89bb      	ldrh	r3, [r7, #12]
 8003d52:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      recvsize = (datasize_t)getSn_RX_RSR(sn);
 8003d54:	79fb      	ldrb	r3, [r7, #7]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff fade 	bl	8003318 <getSn_RX_RSR>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8003d60:	79fb      	ldrb	r3, [r7, #7]
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	3301      	adds	r3, #1
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff fa01 	bl	8003174 <WIZCHIP_READ>
 8003d72:	4603      	mov	r3, r0
 8003d74:	73fb      	strb	r3, [r7, #15]
      if (tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT)
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
 8003d78:	2b17      	cmp	r3, #23
 8003d7a:	d00c      	beq.n	8003d96 <recv+0x82>
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	2b1c      	cmp	r3, #28
 8003d80:	d009      	beq.n	8003d96 <recv+0x82>
      {
         if(tmp == SOCK_CLOSED) close(sn);
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d103      	bne.n	8003d90 <recv+0x7c>
 8003d88:	79fb      	ldrb	r3, [r7, #7]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff fdb6 	bl	80038fc <close>
         return SOCKERR_SOCKSTATUS;
 8003d90:	f06f 0306 	mvn.w	r3, #6
 8003d94:	e038      	b.n	8003e08 <recv+0xf4>
      }
      if(recvsize) break;
 8003d96:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10b      	bne.n	8003db6 <recv+0xa2>
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8003d9e:	4b1c      	ldr	r3, [pc, #112]	; (8003e10 <recv+0xfc>)
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	79fb      	ldrb	r3, [r7, #7]
 8003da6:	fa42 f303 	asr.w	r3, r2, r3
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0d0      	beq.n	8003d54 <recv+0x40>
 8003db2:	2300      	movs	r3, #0
 8003db4:	e028      	b.n	8003e08 <recv+0xf4>
      if(recvsize) break;
 8003db6:	bf00      	nop
   }
   if(recvsize < len) len = recvsize;
 8003db8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003dbc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	da01      	bge.n	8003dc8 <recv+0xb4>
 8003dc4:	89bb      	ldrh	r3, [r7, #12]
 8003dc6:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len); 
 8003dc8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003dcc:	79fb      	ldrb	r3, [r7, #7]
 8003dce:	6839      	ldr	r1, [r7, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff fb38 	bl	8003446 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV); 
 8003dd6:	79fb      	ldrb	r3, [r7, #7]
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	3301      	adds	r3, #1
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003de2:	2140      	movs	r1, #64	; 0x40
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff f993 	bl	8003110 <WIZCHIP_WRITE>
   while(getSn_CR(sn));  
 8003dea:	bf00      	nop
 8003dec:	79fb      	ldrb	r3, [r7, #7]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	3301      	adds	r3, #1
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff f9bb 	bl	8003174 <WIZCHIP_READ>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1f3      	bne.n	8003dec <recv+0xd8>
   return len;
 8003e04:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	20000130 	.word	0x20000130

08003e14 <ctlsocket>:
 
   return pack_len;
}

int8_t ctlsocket(uint8_t sn, ctlsock_type cstype, void* arg)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	603a      	str	r2, [r7, #0]
 8003e1e:	71fb      	strb	r3, [r7, #7]
 8003e20:	460b      	mov	r3, r1
 8003e22:	71bb      	strb	r3, [r7, #6]
   uint8_t tmp = 0;
 8003e24:	2300      	movs	r3, #0
 8003e26:	73fb      	strb	r3, [r7, #15]
   CHECK_SOCKNUM();
 8003e28:	79fb      	ldrb	r3, [r7, #7]
 8003e2a:	2b07      	cmp	r3, #7
 8003e2c:	d902      	bls.n	8003e34 <ctlsocket+0x20>
 8003e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e32:	e0d8      	b.n	8003fe6 <ctlsocket+0x1d2>
   tmp = *((uint8_t*)arg); 
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	73fb      	strb	r3, [r7, #15]
   switch(cstype)
 8003e3a:	79bb      	ldrb	r3, [r7, #6]
 8003e3c:	2b09      	cmp	r3, #9
 8003e3e:	f200 80ce 	bhi.w	8003fde <ctlsocket+0x1ca>
 8003e42:	a201      	add	r2, pc, #4	; (adr r2, 8003e48 <ctlsocket+0x34>)
 8003e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e48:	08003e71 	.word	0x08003e71
 8003e4c:	08003ebf 	.word	0x08003ebf
 8003e50:	08003ed9 	.word	0x08003ed9
 8003e54:	08003ef7 	.word	0x08003ef7
 8003e58:	08003f15 	.word	0x08003f15
 8003e5c:	08003f3b 	.word	0x08003f3b
 8003e60:	08003f57 	.word	0x08003f57
 8003e64:	08003f7d 	.word	0x08003f7d
 8003e68:	08003f99 	.word	0x08003f99
 8003e6c:	08003fc3 	.word	0x08003fc3
   {
      case CS_SET_IOMODE:
         if(tmp == SOCK_IO_NONBLOCK)  sock_io_mode |= (1<<sn);
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d10d      	bne.n	8003e92 <ctlsocket+0x7e>
 8003e76:	79fb      	ldrb	r3, [r7, #7]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	b21a      	sxth	r2, r3
 8003e80:	4b5b      	ldr	r3, [pc, #364]	; (8003ff0 <ctlsocket+0x1dc>)
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	b21b      	sxth	r3, r3
 8003e86:	4313      	orrs	r3, r2
 8003e88:	b21b      	sxth	r3, r3
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	4b58      	ldr	r3, [pc, #352]	; (8003ff0 <ctlsocket+0x1dc>)
 8003e8e:	801a      	strh	r2, [r3, #0]
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
         else return SOCKERR_ARG;
         break;
 8003e90:	e0a8      	b.n	8003fe4 <ctlsocket+0x1d0>
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10f      	bne.n	8003eb8 <ctlsocket+0xa4>
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	b21b      	sxth	r3, r3
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	b21a      	sxth	r2, r3
 8003ea6:	4b52      	ldr	r3, [pc, #328]	; (8003ff0 <ctlsocket+0x1dc>)
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	b21b      	sxth	r3, r3
 8003eac:	4013      	ands	r3, r2
 8003eae:	b21b      	sxth	r3, r3
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	4b4f      	ldr	r3, [pc, #316]	; (8003ff0 <ctlsocket+0x1dc>)
 8003eb4:	801a      	strh	r2, [r3, #0]
         break;
 8003eb6:	e095      	b.n	8003fe4 <ctlsocket+0x1d0>
         else return SOCKERR_ARG;
 8003eb8:	f06f 0309 	mvn.w	r3, #9
 8003ebc:	e093      	b.n	8003fe6 <ctlsocket+0x1d2>
      case CS_GET_IOMODE: 
         *((uint8_t*)arg) = (uint8_t)((sock_io_mode >> sn) & 0x0001);
 8003ebe:	4b4c      	ldr	r3, [pc, #304]	; (8003ff0 <ctlsocket+0x1dc>)
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	79fb      	ldrb	r3, [r7, #7]
 8003ec6:	fa42 f303 	asr.w	r3, r2, r3
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	701a      	strb	r2, [r3, #0]
         break;
 8003ed6:	e085      	b.n	8003fe4 <ctlsocket+0x1d0>
      case CS_GET_MAXTXBUF:
         *((datasize_t*)arg) = getSn_TxMAX(sn);
 8003ed8:	79fb      	ldrb	r3, [r7, #7]
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	3301      	adds	r3, #1
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff f945 	bl	8003174 <WIZCHIP_READ>
 8003eea:	4603      	mov	r3, r0
 8003eec:	029b      	lsls	r3, r3, #10
 8003eee:	b21a      	sxth	r2, r3
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	801a      	strh	r2, [r3, #0]
         break;
 8003ef4:	e076      	b.n	8003fe4 <ctlsocket+0x1d0>
      case CS_GET_MAXRXBUF:  
         *((datasize_t*)arg) = getSn_RxMAX(sn);
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	3301      	adds	r3, #1
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff f936 	bl	8003174 <WIZCHIP_READ>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	029b      	lsls	r3, r3, #10
 8003f0c:	b21a      	sxth	r2, r3
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	801a      	strh	r2, [r3, #0]
         break;
 8003f12:	e067      	b.n	8003fe4 <ctlsocket+0x1d0>
      case CS_CLR_INTERRUPT:
         if( tmp > SIK_ALL) return SOCKERR_ARG;
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	2b1f      	cmp	r3, #31
 8003f18:	d902      	bls.n	8003f20 <ctlsocket+0x10c>
 8003f1a:	f06f 0309 	mvn.w	r3, #9
 8003f1e:	e062      	b.n	8003fe6 <ctlsocket+0x1d2>
         setSn_IRCLR(sn,tmp);
 8003f20:	79fb      	ldrb	r3, [r7, #7]
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	3301      	adds	r3, #1
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	4619      	mov	r1, r3
 8003f32:	4610      	mov	r0, r2
 8003f34:	f7ff f8ec 	bl	8003110 <WIZCHIP_WRITE>
         break;
 8003f38:	e054      	b.n	8003fe4 <ctlsocket+0x1d0>
      case CS_GET_INTERRUPT:
         *((uint8_t*)arg) = getSn_IR(sn);
 8003f3a:	79fb      	ldrb	r3, [r7, #7]
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	3301      	adds	r3, #1
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff f914 	bl	8003174 <WIZCHIP_READ>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	461a      	mov	r2, r3
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	701a      	strb	r2, [r3, #0]
         break;
 8003f54:	e046      	b.n	8003fe4 <ctlsocket+0x1d0>
      case CS_SET_INTMASK:
         if( tmp > SIK_ALL) return SOCKERR_ARG;
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	2b1f      	cmp	r3, #31
 8003f5a:	d902      	bls.n	8003f62 <ctlsocket+0x14e>
 8003f5c:	f06f 0309 	mvn.w	r3, #9
 8003f60:	e041      	b.n	8003fe6 <ctlsocket+0x1d2>
         setSn_IMR(sn,tmp);
 8003f62:	79fb      	ldrb	r3, [r7, #7]
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	3301      	adds	r3, #1
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003f6e:	461a      	mov	r2, r3
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
 8003f72:	4619      	mov	r1, r3
 8003f74:	4610      	mov	r0, r2
 8003f76:	f7ff f8cb 	bl	8003110 <WIZCHIP_WRITE>
         break;
 8003f7a:	e033      	b.n	8003fe4 <ctlsocket+0x1d0>
      case CS_GET_INTMASK:
         *((uint8_t*)arg) = getSn_IMR(sn);
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	3301      	adds	r3, #1
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff f8f3 	bl	8003174 <WIZCHIP_READ>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	461a      	mov	r2, r3
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	701a      	strb	r2, [r3, #0]
         break;
 8003f96:	e025      	b.n	8003fe4 <ctlsocket+0x1d0>
      case CS_SET_PREFER:
    	  if((tmp & 0x03) == 0x01) return SOCKERR_ARG;
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d102      	bne.n	8003fa8 <ctlsocket+0x194>
 8003fa2:	f06f 0309 	mvn.w	r3, #9
 8003fa6:	e01e      	b.n	8003fe6 <ctlsocket+0x1d2>
    	  setSn_PSR(sn, tmp);
 8003fa8:	79fb      	ldrb	r3, [r7, #7]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	3301      	adds	r3, #1
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4610      	mov	r0, r2
 8003fbc:	f7ff f8a8 	bl	8003110 <WIZCHIP_WRITE>
    	  break;
 8003fc0:	e010      	b.n	8003fe4 <ctlsocket+0x1d0>
      case CS_GET_PREFER:
    	  *(uint8_t*) arg = getSn_PSR(sn);
 8003fc2:	79fb      	ldrb	r3, [r7, #7]
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff f8d0 	bl	8003174 <WIZCHIP_READ>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	701a      	strb	r2, [r3, #0]
    	  break;
 8003fdc:	e002      	b.n	8003fe4 <ctlsocket+0x1d0>
      default:
         return SOCKERR_ARG;
 8003fde:	f06f 0309 	mvn.w	r3, #9
 8003fe2:	e000      	b.n	8003fe6 <ctlsocket+0x1d2>
   }
   return SOCK_OK;
 8003fe4:	2301      	movs	r3, #1
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	20000130 	.word	0x20000130

08003ff4 <getsockopt>:
   } 
   return SOCK_OK;
}

int8_t getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 8003ff4:	b590      	push	{r4, r7, lr}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	603a      	str	r2, [r7, #0]
 8003ffe:	71fb      	strb	r3, [r7, #7]
 8004000:	460b      	mov	r3, r1
 8004002:	71bb      	strb	r3, [r7, #6]
   CHECK_SOCKNUM();
 8004004:	79fb      	ldrb	r3, [r7, #7]
 8004006:	2b07      	cmp	r3, #7
 8004008:	d902      	bls.n	8004010 <getsockopt+0x1c>
 800400a:	f04f 33ff 	mov.w	r3, #4294967295
 800400e:	e1a2      	b.n	8004356 <getsockopt+0x362>
   switch(sotype)
 8004010:	79bb      	ldrb	r3, [r7, #6]
 8004012:	2b0e      	cmp	r3, #14
 8004014:	f200 819b 	bhi.w	800434e <getsockopt+0x35a>
 8004018:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <getsockopt+0x2c>)
 800401a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401e:	bf00      	nop
 8004020:	0800405d 	.word	0x0800405d
 8004024:	080040b5 	.word	0x080040b5
 8004028:	080040d1 	.word	0x080040d1
 800402c:	080040ed 	.word	0x080040ed
 8004030:	0800412b 	.word	0x0800412b
 8004034:	080041a5 	.word	0x080041a5
 8004038:	0800434f 	.word	0x0800434f
 800403c:	080041e3 	.word	0x080041e3
 8004040:	0800421d 	.word	0x0800421d
 8004044:	0800422f 	.word	0x0800422f
 8004048:	08004241 	.word	0x08004241
 800404c:	0800425d 	.word	0x0800425d
 8004050:	0800429b 	.word	0x0800429b
 8004054:	08004333 	.word	0x08004333
 8004058:	080042ef 	.word	0x080042ef
   {
      case SO_FLAG:
         *(uint8_t*)arg = (getSn_MR(sn) & 0xF0) | (getSn_MR2(sn)) | ((uint8_t)(((sock_io_mode >> sn) & 0x0001) << 3));
 800405c:	79fb      	ldrb	r3, [r7, #7]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	3301      	adds	r3, #1
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff f885 	bl	8003174 <WIZCHIP_READ>
 800406a:	4603      	mov	r3, r0
 800406c:	b25b      	sxtb	r3, r3
 800406e:	f023 030f 	bic.w	r3, r3, #15
 8004072:	b25c      	sxtb	r4, r3
 8004074:	79fb      	ldrb	r3, [r7, #7]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	3301      	adds	r3, #1
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff f877 	bl	8003174 <WIZCHIP_READ>
 8004086:	4603      	mov	r3, r0
 8004088:	b25b      	sxtb	r3, r3
 800408a:	4323      	orrs	r3, r4
 800408c:	b25a      	sxtb	r2, r3
 800408e:	4bb4      	ldr	r3, [pc, #720]	; (8004360 <getsockopt+0x36c>)
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	4619      	mov	r1, r3
 8004094:	79fb      	ldrb	r3, [r7, #7]
 8004096:	fa41 f303 	asr.w	r3, r1, r3
 800409a:	b2db      	uxtb	r3, r3
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	b25b      	sxtb	r3, r3
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	b25b      	sxtb	r3, r3
 80040a8:	4313      	orrs	r3, r2
 80040aa:	b25b      	sxtb	r3, r3
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	701a      	strb	r2, [r3, #0]
         break;
 80040b2:	e14f      	b.n	8004354 <getsockopt+0x360>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTLR(sn);
 80040b4:	79fb      	ldrb	r3, [r7, #7]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	3301      	adds	r3, #1
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7ff f857 	bl	8003174 <WIZCHIP_READ>
 80040c6:	4603      	mov	r3, r0
 80040c8:	461a      	mov	r2, r3
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	701a      	strb	r2, [r3, #0]
         break;
 80040ce:	e141      	b.n	8004354 <getsockopt+0x360>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOSR(sn);
 80040d0:	79fb      	ldrb	r3, [r7, #7]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	3301      	adds	r3, #1
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff f849 	bl	8003174 <WIZCHIP_READ>
 80040e2:	4603      	mov	r3, r0
 80040e4:	461a      	mov	r2, r3
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	701a      	strb	r2, [r3, #0]
         break;
 80040ea:	e133      	b.n	8004354 <getsockopt+0x360>
      case SO_MSS: 
         *(uint16_t*) arg = getSn_MSSR(sn);
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	3301      	adds	r3, #1
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff f83b 	bl	8003174 <WIZCHIP_READ>
 80040fe:	4603      	mov	r3, r0
 8004100:	b29b      	uxth	r3, r3
 8004102:	021b      	lsls	r3, r3, #8
 8004104:	b29c      	uxth	r4, r3
 8004106:	79fb      	ldrb	r3, [r7, #7]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	3301      	adds	r3, #1
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8004112:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004116:	4618      	mov	r0, r3
 8004118:	f7ff f82c 	bl	8003174 <WIZCHIP_READ>
 800411c:	4603      	mov	r3, r0
 800411e:	b29b      	uxth	r3, r3
 8004120:	4423      	add	r3, r4
 8004122:	b29a      	uxth	r2, r3
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	801a      	strh	r2, [r3, #0]
         break;
 8004128:	e114      	b.n	8004354 <getsockopt+0x360>
      case SO_DESTIP:
         CHECK_TCPMODE();
 800412a:	79fb      	ldrb	r3, [r7, #7]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	3301      	adds	r3, #1
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff f81e 	bl	8003174 <WIZCHIP_READ>
 8004138:	4603      	mov	r3, r0
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	2b01      	cmp	r3, #1
 8004140:	d002      	beq.n	8004148 <getsockopt+0x154>
 8004142:	f06f 0304 	mvn.w	r3, #4
 8004146:	e106      	b.n	8004356 <getsockopt+0x362>
         if(getSn_ESR(sn) & TCPSOCK_MODE) //IPv6 ?
 8004148:	79fb      	ldrb	r3, [r7, #7]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	3301      	adds	r3, #1
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	f503 5344 	add.w	r3, r3, #12544	; 0x3100
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff f80d 	bl	8003174 <WIZCHIP_READ>
 800415a:	4603      	mov	r3, r0
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00f      	beq.n	8004184 <getsockopt+0x190>
         {
            getSn_DIP6R(sn, ((wiz_IPAddress*)arg)->ip);
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	3301      	adds	r3, #1
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8004170:	4618      	mov	r0, r3
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2210      	movs	r2, #16
 8004176:	4619      	mov	r1, r3
 8004178:	f7ff f864 	bl	8003244 <WIZCHIP_READ_BUF>
            ((wiz_IPAddress*)arg)->len = 16;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	2210      	movs	r2, #16
 8004180:	741a      	strb	r2, [r3, #16]
         else
         {
            getSn_DIPR(sn, ((wiz_IPAddress*)arg)->ip);
            ((wiz_IPAddress*)arg)->len = 4;
         } 
         break;
 8004182:	e0e7      	b.n	8004354 <getsockopt+0x360>
            getSn_DIPR(sn, ((wiz_IPAddress*)arg)->ip);
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	3301      	adds	r3, #1
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 8004190:	4618      	mov	r0, r3
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2204      	movs	r2, #4
 8004196:	4619      	mov	r1, r3
 8004198:	f7ff f854 	bl	8003244 <WIZCHIP_READ_BUF>
            ((wiz_IPAddress*)arg)->len = 4;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	2204      	movs	r2, #4
 80041a0:	741a      	strb	r2, [r3, #16]
         break;
 80041a2:	e0d7      	b.n	8004354 <getsockopt+0x360>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORTR(sn);
 80041a4:	79fb      	ldrb	r3, [r7, #7]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	3301      	adds	r3, #1
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fe ffdf 	bl	8003174 <WIZCHIP_READ>
 80041b6:	4603      	mov	r3, r0
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	021b      	lsls	r3, r3, #8
 80041bc:	b29c      	uxth	r4, r3
 80041be:	79fb      	ldrb	r3, [r7, #7]
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	3301      	adds	r3, #1
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
 80041ca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fe ffd0 	bl	8003174 <WIZCHIP_READ>
 80041d4:	4603      	mov	r3, r0
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	4423      	add	r3, r4
 80041da:	b29a      	uxth	r2, r3
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	801a      	strh	r2, [r3, #0]
         break; 
 80041e0:	e0b8      	b.n	8004354 <getsockopt+0x360>
      case SO_KEEPALIVEAUTO:
         CHECK_TCPMODE();
 80041e2:	79fb      	ldrb	r3, [r7, #7]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	3301      	adds	r3, #1
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fe ffc2 	bl	8003174 <WIZCHIP_READ>
 80041f0:	4603      	mov	r3, r0
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d002      	beq.n	8004200 <getsockopt+0x20c>
 80041fa:	f06f 0304 	mvn.w	r3, #4
 80041fe:	e0aa      	b.n	8004356 <getsockopt+0x362>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	3301      	adds	r3, #1
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	f503 33c4 	add.w	r3, r3, #100352	; 0x18800
 800420c:	4618      	mov	r0, r3
 800420e:	f7fe ffb1 	bl	8003174 <WIZCHIP_READ>
 8004212:	4603      	mov	r3, r0
 8004214:	b29a      	uxth	r2, r3
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	801a      	strh	r2, [r3, #0]
         break;
 800421a:	e09b      	b.n	8004354 <getsockopt+0x360>
      case SO_SENDBUF:
         *(datasize_t*) arg = getSn_TX_FSR(sn);
 800421c:	79fb      	ldrb	r3, [r7, #7]
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff f844 	bl	80032ac <getSn_TX_FSR>
 8004224:	4603      	mov	r3, r0
 8004226:	461a      	mov	r2, r3
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	801a      	strh	r2, [r3, #0]
         break;
 800422c:	e092      	b.n	8004354 <getsockopt+0x360>
      case SO_RECVBUF:
         *(datasize_t*) arg = getSn_RX_RSR(sn);
 800422e:	79fb      	ldrb	r3, [r7, #7]
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff f871 	bl	8003318 <getSn_RX_RSR>
 8004236:	4603      	mov	r3, r0
 8004238:	461a      	mov	r2, r3
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	801a      	strh	r2, [r3, #0]
         break;
 800423e:	e089      	b.n	8004354 <getsockopt+0x360>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 8004240:	79fb      	ldrb	r3, [r7, #7]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	3301      	adds	r3, #1
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800424c:	4618      	mov	r0, r3
 800424e:	f7fe ff91 	bl	8003174 <WIZCHIP_READ>
 8004252:	4603      	mov	r3, r0
 8004254:	461a      	mov	r2, r3
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	701a      	strb	r2, [r3, #0]
         break;
 800425a:	e07b      	b.n	8004354 <getsockopt+0x360>
      case SO_EXTSTATUS:
         CHECK_TCPMODE();
 800425c:	79fb      	ldrb	r3, [r7, #7]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	3301      	adds	r3, #1
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	4618      	mov	r0, r3
 8004266:	f7fe ff85 	bl	8003174 <WIZCHIP_READ>
 800426a:	4603      	mov	r3, r0
 800426c:	f003 0303 	and.w	r3, r3, #3
 8004270:	2b01      	cmp	r3, #1
 8004272:	d002      	beq.n	800427a <getsockopt+0x286>
 8004274:	f06f 0304 	mvn.w	r3, #4
 8004278:	e06d      	b.n	8004356 <getsockopt+0x362>
         *(uint8_t*) arg = getSn_ESR(sn) & 0x07;
 800427a:	79fb      	ldrb	r3, [r7, #7]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	3301      	adds	r3, #1
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	f503 5344 	add.w	r3, r3, #12544	; 0x3100
 8004286:	4618      	mov	r0, r3
 8004288:	f7fe ff74 	bl	8003174 <WIZCHIP_READ>
 800428c:	4603      	mov	r3, r0
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	b2da      	uxtb	r2, r3
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	701a      	strb	r2, [r3, #0]
         break;
 8004298:	e05c      	b.n	8004354 <getsockopt+0x360>
      case SO_REMAINSIZE:
         if(getSn_MR(sn)==SOCK_CLOSED) return SOCKERR_SOCKSTATUS;
 800429a:	79fb      	ldrb	r3, [r7, #7]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	3301      	adds	r3, #1
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fe ff66 	bl	8003174 <WIZCHIP_READ>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d102      	bne.n	80042b4 <getsockopt+0x2c0>
 80042ae:	f06f 0306 	mvn.w	r3, #6
 80042b2:	e050      	b.n	8004356 <getsockopt+0x362>
         if(getSn_MR(sn) & 0x01)   *(uint16_t*)arg = getSn_RX_RSR(sn);
 80042b4:	79fb      	ldrb	r3, [r7, #7]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	3301      	adds	r3, #1
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fe ff59 	bl	8003174 <WIZCHIP_READ>
 80042c2:	4603      	mov	r3, r0
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d008      	beq.n	80042de <getsockopt+0x2ea>
 80042cc:	79fb      	ldrb	r3, [r7, #7]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7ff f822 	bl	8003318 <getSn_RX_RSR>
 80042d4:	4603      	mov	r3, r0
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	801a      	strh	r2, [r3, #0]
         else                      *(uint16_t*)arg = sock_remained_size[sn];
         break;
 80042dc:	e03a      	b.n	8004354 <getsockopt+0x360>
         else                      *(uint16_t*)arg = sock_remained_size[sn];
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	4a20      	ldr	r2, [pc, #128]	; (8004364 <getsockopt+0x370>)
 80042e2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	801a      	strh	r2, [r3, #0]
         break;
 80042ec:	e032      	b.n	8004354 <getsockopt+0x360>
      case SO_PACKINFO:
         if(getSn_MR(sn)==SOCK_CLOSED) return SOCKERR_SOCKSTATUS;
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	3301      	adds	r3, #1
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fe ff3c 	bl	8003174 <WIZCHIP_READ>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d102      	bne.n	8004308 <getsockopt+0x314>
 8004302:	f06f 0306 	mvn.w	r3, #6
 8004306:	e026      	b.n	8004356 <getsockopt+0x362>
         if(getSn_MR(sn) & 0x01)       return SOCKERR_SOCKMODE;
 8004308:	79fb      	ldrb	r3, [r7, #7]
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	3301      	adds	r3, #1
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	4618      	mov	r0, r3
 8004312:	f7fe ff2f 	bl	8003174 <WIZCHIP_READ>
 8004316:	4603      	mov	r3, r0
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <getsockopt+0x332>
 8004320:	f06f 0304 	mvn.w	r3, #4
 8004324:	e017      	b.n	8004356 <getsockopt+0x362>
         else *(uint8_t*)arg = sock_pack_info[sn];
 8004326:	79fb      	ldrb	r3, [r7, #7]
 8004328:	4a0f      	ldr	r2, [pc, #60]	; (8004368 <getsockopt+0x374>)
 800432a:	5cd2      	ldrb	r2, [r2, r3]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	701a      	strb	r2, [r3, #0]
         break;
 8004330:	e010      	b.n	8004354 <getsockopt+0x360>
      case SO_MODE:
         *(uint8_t*) arg = 0x0F & getSn_MR(sn);
 8004332:	79fb      	ldrb	r3, [r7, #7]
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	3301      	adds	r3, #1
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	4618      	mov	r0, r3
 800433c:	f7fe ff1a 	bl	8003174 <WIZCHIP_READ>
 8004340:	4603      	mov	r3, r0
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	b2da      	uxtb	r2, r3
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	701a      	strb	r2, [r3, #0]
         break;
 800434c:	e002      	b.n	8004354 <getsockopt+0x360>
      default:
         return SOCKERR_SOCKOPT;
 800434e:	f06f 0301 	mvn.w	r3, #1
 8004352:	e000      	b.n	8004356 <getsockopt+0x362>
   }
   return SOCK_OK;
 8004354:	2301      	movs	r3, #1
}
 8004356:	4618      	mov	r0, r3
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	bd90      	pop	{r4, r7, pc}
 800435e:	bf00      	nop
 8004360:	20000130 	.word	0x20000130
 8004364:	20000134 	.word	0x20000134
 8004368:	20000144 	.word	0x20000144

0800436c <wizchip_cris_enter>:
 * @details @ref wizchip_cris_enter() provides the default protection while @ref _WIZCHIP_ is accessed. \n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cris_cbfunc().
 * @sa wizchip_cris_exit()
 */
void wizchip_cris_enter(void)   {}
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
 8004370:	bf00      	nop
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr

08004378 <wizchip_cris_exit>:
 * @details @ref wizchip_cris_exit provides the default protection while @ref _WIZCHIP_ is accessed\n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cris_cbfunc().
 * @sa wizchip_cris_enter()
 */
void wizchip_cris_exit(void)   {}
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
 800437c:	bf00      	nop
 800437e:	46bd      	mov	sp, r7
 8004380:	bc80      	pop	{r7}
 8004382:	4770      	bx	lr

08004384 <wizchip_cs_select>:
 * @details @ref wizchip_cs_select() provides the default selection @ref _WIZCHIP_,\n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cs_cbfunc().
 * @sa wizchip_cs_deselect()
 */
void wizchip_cs_select(void)   {}
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
 8004388:	bf00      	nop
 800438a:	46bd      	mov	sp, r7
 800438c:	bc80      	pop	{r7}
 800438e:	4770      	bx	lr

08004390 <wizchip_cs_deselect>:
 * @details @ref wizchip_cs_deselect() provides the default de-selection @ref _WIZCHIP_, \n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cs_cbfunc().
 * @sa wizchip_cs_select()
 */
void wizchip_cs_deselect(void)   {}
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
 8004394:	bf00      	nop
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr

0800439c <wizchip_spi_read>:
 * @details @ref wizchip_spi_read() provides the default read one byte data from SPI of @ref _WIZCHIP_,\n
 *          but it is null function.
 * @return uint8_t 
 * @todo It should be overwritten with your function or register your functions by calling @ref reg_wizchip_spi_cbfunc().
 */
uint8_t wizchip_spi_read(void)        {return 0;}
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
 80043a0:	2300      	movs	r3, #0
 80043a2:	4618      	mov	r0, r3
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bc80      	pop	{r7}
 80043a8:	4770      	bx	lr

080043aa <wizchip_spi_write>:
 *          but it is null function.
 * @param wb uint8_t data to be written
 * @return void 
 * @todo It should be overwritten with your function or register your functions by calling @ref reg_wizchip_spi_cbfunc().
 */
void wizchip_spi_write(uint8_t wb) {}
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	4603      	mov	r3, r0
 80043b2:	71fb      	strb	r3, [r7, #7]
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr
	...

080043c0 <wizchip_spi_read_buf>:
 * @return void
 * @note It is use @ref wizchip_spi_read() as default. \n
 *       It can be overwritten with your function or register your functions by calling @ref reg_wizchip_spi_cbfunc().
 */
void wizchip_spi_read_buf(uint8_t* buf, datasize_t len)
{
 80043c0:	b590      	push	{r4, r7, lr}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	460b      	mov	r3, r1
 80043ca:	807b      	strh	r3, [r7, #2]
   for(datasize_t i=0; i < len; i++) *buf++ = WIZCHIP.IF.SPI._read_byte();
 80043cc:	2300      	movs	r3, #0
 80043ce:	81fb      	strh	r3, [r7, #14]
 80043d0:	e00d      	b.n	80043ee <wizchip_spi_read_buf+0x2e>
 80043d2:	4b0c      	ldr	r3, [pc, #48]	; (8004404 <wizchip_spi_read_buf+0x44>)
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	687c      	ldr	r4, [r7, #4]
 80043d8:	1c62      	adds	r2, r4, #1
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	4798      	blx	r3
 80043de:	4603      	mov	r3, r0
 80043e0:	7023      	strb	r3, [r4, #0]
 80043e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	3301      	adds	r3, #1
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	81fb      	strh	r3, [r7, #14]
 80043ee:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80043f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	dbeb      	blt.n	80043d2 <wizchip_spi_read_buf+0x12>
}
 80043fa:	bf00      	nop
 80043fc:	bf00      	nop
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	bd90      	pop	{r4, r7, pc}
 8004404:	20000084 	.word	0x20000084

08004408 <wizchip_spi_write_buf>:
 * @return void
 * @note It is use @ref wizchip_spi_write() as default. \n
 *       It can be overwritten with your function or register your functions by calling @ref reg_wizchip_spi_cbfunc().
 */
void wizchip_spi_write_buf(uint8_t* buf, datasize_t len)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	460b      	mov	r3, r1
 8004412:	807b      	strh	r3, [r7, #2]
   for(datasize_t i=0; i < len; i++) WIZCHIP.IF.SPI._write_byte(*buf++);
 8004414:	2300      	movs	r3, #0
 8004416:	81fb      	strh	r3, [r7, #14]
 8004418:	e00d      	b.n	8004436 <wizchip_spi_write_buf+0x2e>
 800441a:	4b0c      	ldr	r3, [pc, #48]	; (800444c <wizchip_spi_write_buf+0x44>)
 800441c:	69da      	ldr	r2, [r3, #28]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	1c59      	adds	r1, r3, #1
 8004422:	6079      	str	r1, [r7, #4]
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	4790      	blx	r2
 800442a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800442e:	b29b      	uxth	r3, r3
 8004430:	3301      	adds	r3, #1
 8004432:	b29b      	uxth	r3, r3
 8004434:	81fb      	strh	r3, [r7, #14]
 8004436:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800443a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800443e:	429a      	cmp	r2, r3
 8004440:	dbeb      	blt.n	800441a <wizchip_spi_write_buf+0x12>
}
 8004442:	bf00      	nop
 8004444:	bf00      	nop
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	20000084 	.word	0x20000084

08004450 <reg_wizchip_cs_cbfunc>:
   if(!cris_ex)   WIZCHIP.CRIS._e_x_i_t_  = wizchip_cris_exit;
   else           WIZCHIP.CRIS._e_x_i_t_  = cris_ex;
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
   if(!cs_sel)    WIZCHIP.CS._s_e_l_e_c_t_   = wizchip_cs_select;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d103      	bne.n	8004468 <reg_wizchip_cs_cbfunc+0x18>
 8004460:	4b0a      	ldr	r3, [pc, #40]	; (800448c <reg_wizchip_cs_cbfunc+0x3c>)
 8004462:	4a0b      	ldr	r2, [pc, #44]	; (8004490 <reg_wizchip_cs_cbfunc+0x40>)
 8004464:	611a      	str	r2, [r3, #16]
 8004466:	e002      	b.n	800446e <reg_wizchip_cs_cbfunc+0x1e>
   else           WIZCHIP.CS._s_e_l_e_c_t_   = cs_sel; 
 8004468:	4a08      	ldr	r2, [pc, #32]	; (800448c <reg_wizchip_cs_cbfunc+0x3c>)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6113      	str	r3, [r2, #16]
   if(!cs_desel)  WIZCHIP.CS._d_e_s_e_l_e_c_t_ = wizchip_cs_deselect;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d103      	bne.n	800447c <reg_wizchip_cs_cbfunc+0x2c>
 8004474:	4b05      	ldr	r3, [pc, #20]	; (800448c <reg_wizchip_cs_cbfunc+0x3c>)
 8004476:	4a07      	ldr	r2, [pc, #28]	; (8004494 <reg_wizchip_cs_cbfunc+0x44>)
 8004478:	615a      	str	r2, [r3, #20]
   else           WIZCHIP.CS._d_e_s_e_l_e_c_t_ = cs_desel;
}
 800447a:	e002      	b.n	8004482 <reg_wizchip_cs_cbfunc+0x32>
   else           WIZCHIP.CS._d_e_s_e_l_e_c_t_ = cs_desel;
 800447c:	4a03      	ldr	r2, [pc, #12]	; (800448c <reg_wizchip_cs_cbfunc+0x3c>)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6153      	str	r3, [r2, #20]
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	bc80      	pop	{r7}
 800448a:	4770      	bx	lr
 800448c:	20000084 	.word	0x20000084
 8004490:	08004385 	.word	0x08004385
 8004494:	08004391 	.word	0x08004391

08004498 <reg_wizchip_spi_cbfunc>:
#if (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_)
void reg_wizchip_spi_cbfunc( uint8_t (*spi_rb)(void), 
                             void (*spi_wb)(uint8_t wb),
                             void (*spi_rbuf)(uint8_t* buf, datasize_t len),
                             void (*spi_wbuf)(uint8_t* buf, datasize_t len) )
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	603b      	str	r3, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80044a6:	bf00      	nop
 80044a8:	4b19      	ldr	r3, [pc, #100]	; (8004510 <reg_wizchip_spi_cbfunc+0x78>)
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0f9      	beq.n	80044a8 <reg_wizchip_spi_cbfunc+0x10>
   
   if(!spi_rb)    WIZCHIP.IF.SPI._read_byte      = wizchip_spi_read;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d103      	bne.n	80044c2 <reg_wizchip_spi_cbfunc+0x2a>
 80044ba:	4b15      	ldr	r3, [pc, #84]	; (8004510 <reg_wizchip_spi_cbfunc+0x78>)
 80044bc:	4a15      	ldr	r2, [pc, #84]	; (8004514 <reg_wizchip_spi_cbfunc+0x7c>)
 80044be:	619a      	str	r2, [r3, #24]
 80044c0:	e002      	b.n	80044c8 <reg_wizchip_spi_cbfunc+0x30>
   else           WIZCHIP.IF.SPI._read_byte      = spi_rb;
 80044c2:	4a13      	ldr	r2, [pc, #76]	; (8004510 <reg_wizchip_spi_cbfunc+0x78>)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6193      	str	r3, [r2, #24]
   if(!spi_wb)    WIZCHIP.IF.SPI._write_byte     = wizchip_spi_write;
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d103      	bne.n	80044d6 <reg_wizchip_spi_cbfunc+0x3e>
 80044ce:	4b10      	ldr	r3, [pc, #64]	; (8004510 <reg_wizchip_spi_cbfunc+0x78>)
 80044d0:	4a11      	ldr	r2, [pc, #68]	; (8004518 <reg_wizchip_spi_cbfunc+0x80>)
 80044d2:	61da      	str	r2, [r3, #28]
 80044d4:	e002      	b.n	80044dc <reg_wizchip_spi_cbfunc+0x44>
   else           WIZCHIP.IF.SPI._write_byte     = spi_wb;
 80044d6:	4a0e      	ldr	r2, [pc, #56]	; (8004510 <reg_wizchip_spi_cbfunc+0x78>)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	61d3      	str	r3, [r2, #28]

   if(!spi_rbuf)  WIZCHIP.IF.SPI._read_byte_buf  = wizchip_spi_read_buf;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d103      	bne.n	80044ea <reg_wizchip_spi_cbfunc+0x52>
 80044e2:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <reg_wizchip_spi_cbfunc+0x78>)
 80044e4:	4a0d      	ldr	r2, [pc, #52]	; (800451c <reg_wizchip_spi_cbfunc+0x84>)
 80044e6:	621a      	str	r2, [r3, #32]
 80044e8:	e002      	b.n	80044f0 <reg_wizchip_spi_cbfunc+0x58>
   else           WIZCHIP.IF.SPI._read_byte_buf  = spi_rbuf;
 80044ea:	4a09      	ldr	r2, [pc, #36]	; (8004510 <reg_wizchip_spi_cbfunc+0x78>)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6213      	str	r3, [r2, #32]
   if(!spi_wbuf)  WIZCHIP.IF.SPI._write_byte_buf = wizchip_spi_write_buf;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d103      	bne.n	80044fe <reg_wizchip_spi_cbfunc+0x66>
 80044f6:	4b06      	ldr	r3, [pc, #24]	; (8004510 <reg_wizchip_spi_cbfunc+0x78>)
 80044f8:	4a09      	ldr	r2, [pc, #36]	; (8004520 <reg_wizchip_spi_cbfunc+0x88>)
 80044fa:	625a      	str	r2, [r3, #36]	; 0x24
   else           WIZCHIP.IF.SPI._write_byte_buf = spi_wbuf;
}
 80044fc:	e002      	b.n	8004504 <reg_wizchip_spi_cbfunc+0x6c>
   else           WIZCHIP.IF.SPI._write_byte_buf = spi_wbuf;
 80044fe:	4a04      	ldr	r2, [pc, #16]	; (8004510 <reg_wizchip_spi_cbfunc+0x78>)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	6253      	str	r3, [r2, #36]	; 0x24
}
 8004504:	bf00      	nop
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	bc80      	pop	{r7}
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	20000084 	.word	0x20000084
 8004514:	0800439d 	.word	0x0800439d
 8004518:	080043ab 	.word	0x080043ab
 800451c:	080043c1 	.word	0x080043c1
 8004520:	08004409 	.word	0x08004409

08004524 <ctlwizchip>:
#endif

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8004524:	b590      	push	{r4, r7, lr}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	4603      	mov	r3, r0
 800452c:	6039      	str	r1, [r7, #0]
 800452e:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = *(uint8_t*) arg;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	75fb      	strb	r3, [r7, #23]

   uint8_t* ptmp[2] = {0,0};
 8004536:	2300      	movs	r3, #0
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	2300      	movs	r3, #0
 800453c:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	2b17      	cmp	r3, #23
 8004542:	f200 8163 	bhi.w	800480c <ctlwizchip+0x2e8>
 8004546:	a201      	add	r2, pc, #4	; (adr r2, 800454c <ctlwizchip+0x28>)
 8004548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454c:	080045ad 	.word	0x080045ad
 8004550:	080045e7 	.word	0x080045e7
 8004554:	08004621 	.word	0x08004621
 8004558:	08004635 	.word	0x08004635
 800455c:	0800463b 	.word	0x0800463b
 8004560:	0800465b 	.word	0x0800465b
 8004564:	08004667 	.word	0x08004667
 8004568:	08004673 	.word	0x08004673
 800456c:	0800467f 	.word	0x0800467f
 8004570:	0800468b 	.word	0x0800468b
 8004574:	080046ad 	.word	0x080046ad
 8004578:	080046cf 	.word	0x080046cf
 800457c:	08004705 	.word	0x08004705
 8004580:	08004717 	.word	0x08004717
 8004584:	08004751 	.word	0x08004751
 8004588:	08004777 	.word	0x08004777
 800458c:	080047b5 	.word	0x080047b5
 8004590:	080047c9 	.word	0x080047c9
 8004594:	080047cf 	.word	0x080047cf
 8004598:	080047d7 	.word	0x080047d7
 800459c:	080047df 	.word	0x080047df
 80045a0:	080047e7 	.word	0x080047e7
 80045a4:	080047f1 	.word	0x080047f1
 80045a8:	080047ff 	.word	0x080047ff
   {
      case CW_SYS_LOCK:
         if(tmp & SYS_CHIP_LOCK) CHIPLOCK();
 80045ac:	7dfb      	ldrb	r3, [r7, #23]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <ctlwizchip+0x9a>
 80045b6:	21ff      	movs	r1, #255	; 0xff
 80045b8:	489b      	ldr	r0, [pc, #620]	; (8004828 <ctlwizchip+0x304>)
 80045ba:	f7fe fda9 	bl	8003110 <WIZCHIP_WRITE>
         if(tmp & SYS_NET_LOCK)  NETLOCK();
 80045be:	7dfb      	ldrb	r3, [r7, #23]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <ctlwizchip+0xac>
 80045c8:	21c5      	movs	r1, #197	; 0xc5
 80045ca:	4898      	ldr	r0, [pc, #608]	; (800482c <ctlwizchip+0x308>)
 80045cc:	f7fe fda0 	bl	8003110 <WIZCHIP_WRITE>
         if(tmp & SYS_PHY_LOCK)  PHYLOCK();
 80045d0:	7dfb      	ldrb	r3, [r7, #23]
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 811b 	beq.w	8004812 <ctlwizchip+0x2ee>
 80045dc:	21ff      	movs	r1, #255	; 0xff
 80045de:	4894      	ldr	r0, [pc, #592]	; (8004830 <ctlwizchip+0x30c>)
 80045e0:	f7fe fd96 	bl	8003110 <WIZCHIP_WRITE>
         break;
 80045e4:	e115      	b.n	8004812 <ctlwizchip+0x2ee>
      case CW_SYS_UNLOCK:
         if(tmp & SYS_CHIP_LOCK) CHIPUNLOCK();
 80045e6:	7dfb      	ldrb	r3, [r7, #23]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <ctlwizchip+0xd4>
 80045f0:	21ce      	movs	r1, #206	; 0xce
 80045f2:	488d      	ldr	r0, [pc, #564]	; (8004828 <ctlwizchip+0x304>)
 80045f4:	f7fe fd8c 	bl	8003110 <WIZCHIP_WRITE>
         if(tmp & SYS_NET_LOCK)  NETUNLOCK();
 80045f8:	7dfb      	ldrb	r3, [r7, #23]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <ctlwizchip+0xe6>
 8004602:	213a      	movs	r1, #58	; 0x3a
 8004604:	4889      	ldr	r0, [pc, #548]	; (800482c <ctlwizchip+0x308>)
 8004606:	f7fe fd83 	bl	8003110 <WIZCHIP_WRITE>
         if(tmp & SYS_PHY_LOCK)  PHYUNLOCK();
 800460a:	7dfb      	ldrb	r3, [r7, #23]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 8100 	beq.w	8004816 <ctlwizchip+0x2f2>
 8004616:	2153      	movs	r1, #83	; 0x53
 8004618:	4885      	ldr	r0, [pc, #532]	; (8004830 <ctlwizchip+0x30c>)
 800461a:	f7fe fd79 	bl	8003110 <WIZCHIP_WRITE>
         break;
 800461e:	e0fa      	b.n	8004816 <ctlwizchip+0x2f2>
      case CW_GET_SYSLOCK:
         *(uint8_t*)arg = getSYSR() >> 5;
 8004620:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004624:	f7fe fda6 	bl	8003174 <WIZCHIP_READ>
 8004628:	4603      	mov	r3, r0
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	b2da      	uxtb	r2, r3
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	701a      	strb	r2, [r3, #0]
         break;
 8004632:	e0f3      	b.n	800481c <ctlwizchip+0x2f8>
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8004634:	f000 f958 	bl	80048e8 <wizchip_sw_reset>
         break;
 8004638:	e0f0      	b.n	800481c <ctlwizchip+0x2f8>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d004      	beq.n	800464a <ctlwizchip+0x126>
         {
            ptmp[0] = (uint8_t*)arg;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	3308      	adds	r3, #8
 8004648:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	4611      	mov	r1, r2
 8004650:	4618      	mov	r0, r3
 8004652:	f000 f9fd 	bl	8004a50 <wizchip_init>
 8004656:	4603      	mov	r3, r0
 8004658:	e0e1      	b.n	800481e <ctlwizchip+0x2fa>
      case CW_GET_INTERRUPT:
        *(intr_kind*)arg = wizchip_getinterrupt();
 800465a:	f000 fabf 	bl	8004bdc <wizchip_getinterrupt>
 800465e:	4602      	mov	r2, r0
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	601a      	str	r2, [r3, #0]
         break;
 8004664:	e0da      	b.n	800481c <ctlwizchip+0x2f8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*(intr_kind*)arg);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fa7c 	bl	8004b68 <wizchip_clrinterrupt>
         break;
 8004670:	e0d4      	b.n	800481c <ctlwizchip+0x2f8>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*(intr_kind*)arg);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f000 face 	bl	8004c18 <wizchip_setinterruptmask>
         break;         
 800467c:	e0ce      	b.n	800481c <ctlwizchip+0x2f8>
      case CW_GET_INTRMASK:
         *(intr_kind*)arg = wizchip_getinterruptmask();
 800467e:	f000 faf1 	bl	8004c64 <wizchip_getinterruptmask>
 8004682:	4602      	mov	r2, r0
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	601a      	str	r2, [r3, #0]
         break;   
 8004688:	e0c8      	b.n	800481c <ctlwizchip+0x2f8>
      case CW_SET_INTRTIME:
         setINTPTMR(*(uint16_t*)arg);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	0a1b      	lsrs	r3, r3, #8
 8004690:	b29b      	uxth	r3, r3
 8004692:	b2db      	uxtb	r3, r3
 8004694:	4619      	mov	r1, r3
 8004696:	4867      	ldr	r0, [pc, #412]	; (8004834 <ctlwizchip+0x310>)
 8004698:	f7fe fd3a 	bl	8003110 <WIZCHIP_WRITE>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	4619      	mov	r1, r3
 80046a4:	4864      	ldr	r0, [pc, #400]	; (8004838 <ctlwizchip+0x314>)
 80046a6:	f7fe fd33 	bl	8003110 <WIZCHIP_WRITE>
         break;
 80046aa:	e0b7      	b.n	800481c <ctlwizchip+0x2f8>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTPTMR();
 80046ac:	4861      	ldr	r0, [pc, #388]	; (8004834 <ctlwizchip+0x310>)
 80046ae:	f7fe fd61 	bl	8003174 <WIZCHIP_READ>
 80046b2:	4603      	mov	r3, r0
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	021b      	lsls	r3, r3, #8
 80046b8:	b29c      	uxth	r4, r3
 80046ba:	485f      	ldr	r0, [pc, #380]	; (8004838 <ctlwizchip+0x314>)
 80046bc:	f7fe fd5a 	bl	8003174 <WIZCHIP_READ>
 80046c0:	4603      	mov	r3, r0
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	4423      	add	r3, r4
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	801a      	strh	r2, [r3, #0]
         break;   
 80046cc:	e0a6      	b.n	800481c <ctlwizchip+0x2f8>
      case CW_SET_IEN:
         tmp = getSYCR1();
 80046ce:	485b      	ldr	r0, [pc, #364]	; (800483c <ctlwizchip+0x318>)
 80046d0:	f7fe fd50 	bl	8003174 <WIZCHIP_READ>
 80046d4:	4603      	mov	r3, r0
 80046d6:	75fb      	strb	r3, [r7, #23]
         if(*(uint8_t*)arg == 1) setSYCR1(tmp | SYCR1_IEN);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d108      	bne.n	80046f2 <ctlwizchip+0x1ce>
 80046e0:	7dfb      	ldrb	r3, [r7, #23]
 80046e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	4619      	mov	r1, r3
 80046ea:	4854      	ldr	r0, [pc, #336]	; (800483c <ctlwizchip+0x318>)
 80046ec:	f7fe fd10 	bl	8003110 <WIZCHIP_WRITE>
         else                      setSYCR1(tmp & ~SYCR1_IEN);
         break;
 80046f0:	e094      	b.n	800481c <ctlwizchip+0x2f8>
         else                      setSYCR1(tmp & ~SYCR1_IEN);
 80046f2:	7dfb      	ldrb	r3, [r7, #23]
 80046f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	4619      	mov	r1, r3
 80046fc:	484f      	ldr	r0, [pc, #316]	; (800483c <ctlwizchip+0x318>)
 80046fe:	f7fe fd07 	bl	8003110 <WIZCHIP_WRITE>
         break;
 8004702:	e08b      	b.n	800481c <ctlwizchip+0x2f8>
      case CW_GET_IEN:
         *((uint8_t*)arg) = getSYCR1() >> 7;
 8004704:	484d      	ldr	r0, [pc, #308]	; (800483c <ctlwizchip+0x318>)
 8004706:	f7fe fd35 	bl	8003174 <WIZCHIP_READ>
 800470a:	4603      	mov	r3, r0
 800470c:	09db      	lsrs	r3, r3, #7
 800470e:	b2da      	uxtb	r2, r3
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	701a      	strb	r2, [r3, #0]
         break;
 8004714:	e082      	b.n	800481c <ctlwizchip+0x2f8>
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8004716:	4b4a      	ldr	r3, [pc, #296]	; (8004840 <ctlwizchip+0x31c>)
 8004718:	789a      	ldrb	r2, [r3, #2]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	3301      	adds	r3, #1
 8004722:	4a47      	ldr	r2, [pc, #284]	; (8004840 <ctlwizchip+0x31c>)
 8004724:	78d2      	ldrb	r2, [r2, #3]
 8004726:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	3302      	adds	r3, #2
 800472c:	4a44      	ldr	r2, [pc, #272]	; (8004840 <ctlwizchip+0x31c>)
 800472e:	7912      	ldrb	r2, [r2, #4]
 8004730:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	3303      	adds	r3, #3
 8004736:	4a42      	ldr	r2, [pc, #264]	; (8004840 <ctlwizchip+0x31c>)
 8004738:	7952      	ldrb	r2, [r2, #5]
 800473a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	3304      	adds	r3, #4
 8004740:	4a3f      	ldr	r2, [pc, #252]	; (8004840 <ctlwizchip+0x31c>)
 8004742:	7992      	ldrb	r2, [r2, #6]
 8004744:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	3305      	adds	r3, #5
 800474a:	2200      	movs	r2, #0
 800474c:	701a      	strb	r2, [r3, #0]
         break;   
 800474e:	e065      	b.n	800481c <ctlwizchip+0x2f8>
      case CW_GET_VER:
         *(uint16_t*)arg = getVER();
 8004750:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004754:	f7fe fd0e 	bl	8003174 <WIZCHIP_READ>
 8004758:	4603      	mov	r3, r0
 800475a:	b29b      	uxth	r3, r3
 800475c:	021b      	lsls	r3, r3, #8
 800475e:	b29c      	uxth	r4, r3
 8004760:	f44f 7040 	mov.w	r0, #768	; 0x300
 8004764:	f7fe fd06 	bl	8003174 <WIZCHIP_READ>
 8004768:	4603      	mov	r3, r0
 800476a:	b29b      	uxth	r3, r3
 800476c:	4423      	add	r3, r4
 800476e:	b29a      	uxth	r2, r3
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	801a      	strh	r2, [r3, #0]
         break;
 8004774:	e052      	b.n	800481c <ctlwizchip+0x2f8>
      case CW_SET_SYSCLK:
         tmp = getSYCR1();
 8004776:	4831      	ldr	r0, [pc, #196]	; (800483c <ctlwizchip+0x318>)
 8004778:	f7fe fcfc 	bl	8003174 <WIZCHIP_READ>
 800477c:	4603      	mov	r3, r0
 800477e:	75fb      	strb	r3, [r7, #23]
         if(*(uint8_t*)arg == SYSCLK_100MHZ)     setSYCR1(tmp & ~SYCR1_CLKSEL);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d108      	bne.n	800479a <ctlwizchip+0x276>
 8004788:	7dfb      	ldrb	r3, [r7, #23]
 800478a:	f023 0301 	bic.w	r3, r3, #1
 800478e:	b2db      	uxtb	r3, r3
 8004790:	4619      	mov	r1, r3
 8004792:	482a      	ldr	r0, [pc, #168]	; (800483c <ctlwizchip+0x318>)
 8004794:	f7fe fcbc 	bl	8003110 <WIZCHIP_WRITE>
         else if(*(uint8_t*)arg == SYSCLK_25MHZ) setSYCR1(tmp |  SYCR1_CLKSEL);
         break;
 8004798:	e03f      	b.n	800481a <ctlwizchip+0x2f6>
         else if(*(uint8_t*)arg == SYSCLK_25MHZ) setSYCR1(tmp |  SYCR1_CLKSEL);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d13b      	bne.n	800481a <ctlwizchip+0x2f6>
 80047a2:	7dfb      	ldrb	r3, [r7, #23]
 80047a4:	f043 0301 	orr.w	r3, r3, #1
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	4619      	mov	r1, r3
 80047ac:	4823      	ldr	r0, [pc, #140]	; (800483c <ctlwizchip+0x318>)
 80047ae:	f7fe fcaf 	bl	8003110 <WIZCHIP_WRITE>
         break;
 80047b2:	e032      	b.n	800481a <ctlwizchip+0x2f6>
      case CW_GET_SYSCLK:
         *(uint8_t*)arg = (getSYCR1() & SYCR1_CLKSEL);
 80047b4:	4821      	ldr	r0, [pc, #132]	; (800483c <ctlwizchip+0x318>)
 80047b6:	f7fe fcdd 	bl	8003174 <WIZCHIP_READ>
 80047ba:	4603      	mov	r3, r0
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	701a      	strb	r2, [r3, #0]
         break;
 80047c6:	e029      	b.n	800481c <ctlwizchip+0x2f8>
      case CW_RESET_PHY:
         wizphy_reset();
 80047c8:	f000 fa7a 	bl	8004cc0 <wizphy_reset>
         break;
 80047cc:	e026      	b.n	800481c <ctlwizchip+0x2f8>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 80047ce:	6838      	ldr	r0, [r7, #0]
 80047d0:	f000 fa96 	bl	8004d00 <wizphy_setphyconf>
         break;
 80047d4:	e022      	b.n	800481c <ctlwizchip+0x2f8>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 80047d6:	6838      	ldr	r0, [r7, #0]
 80047d8:	f000 fade 	bl	8004d98 <wizphy_getphyconf>
         break;
 80047dc:	e01e      	b.n	800481c <ctlwizchip+0x2f8>
      case CW_GET_PHYSTATUS:
         wizphy_getphystatus((wiz_PhyConf*)arg);
 80047de:	6838      	ldr	r0, [r7, #0]
 80047e0:	f000 fb1a 	bl	8004e18 <wizphy_getphystatus>
         break;
 80047e4:	e01a      	b.n	800481c <ctlwizchip+0x2f8>
      case CW_SET_PHYPOWMODE:
         wizphy_setphypmode(tmp);
 80047e6:	7dfb      	ldrb	r3, [r7, #23]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 fb55 	bl	8004e98 <wizphy_setphypmode>
         break;
 80047ee:	e015      	b.n	800481c <ctlwizchip+0x2f8>
      case CW_GET_PHYPOWMODE:
         *(uint8_t*)arg = wizphy_getphypmode();
 80047f0:	f000 fb74 	bl	8004edc <wizphy_getphypmode>
 80047f4:	4603      	mov	r3, r0
 80047f6:	b2da      	uxtb	r2, r3
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	701a      	strb	r2, [r3, #0]
         break;
 80047fc:	e00e      	b.n	800481c <ctlwizchip+0x2f8>
      case CW_GET_PHYLINK:
         *(uint8_t*)arg = wizphy_getphylink();
 80047fe:	f000 fa51 	bl	8004ca4 <wizphy_getphylink>
 8004802:	4603      	mov	r3, r0
 8004804:	b2da      	uxtb	r2, r3
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	701a      	strb	r2, [r3, #0]
         break;
 800480a:	e007      	b.n	800481c <ctlwizchip+0x2f8>
      default:
         return -1;
 800480c:	f04f 33ff 	mov.w	r3, #4294967295
 8004810:	e005      	b.n	800481e <ctlwizchip+0x2fa>
         break;
 8004812:	bf00      	nop
 8004814:	e002      	b.n	800481c <ctlwizchip+0x2f8>
         break;
 8004816:	bf00      	nop
 8004818:	e000      	b.n	800481c <ctlwizchip+0x2f8>
         break;
 800481a:	bf00      	nop
   }
   return 0;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	371c      	adds	r7, #28
 8004822:	46bd      	mov	sp, r7
 8004824:	bd90      	pop	{r4, r7, pc}
 8004826:	bf00      	nop
 8004828:	0041f400 	.word	0x0041f400
 800482c:	0041f500 	.word	0x0041f500
 8004830:	0041f600 	.word	0x0041f600
 8004834:	0041c500 	.word	0x0041c500
 8004838:	0041c600 	.word	0x0041c600
 800483c:	00200500 	.word	0x00200500
 8004840:	20000084 	.word	0x20000084

08004844 <ctlnetwork>:

int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	4603      	mov	r3, r0
 800484c:	6039      	str	r1, [r7, #0]
 800484e:	71fb      	strb	r3, [r7, #7]
   switch(cntype)
 8004850:	79fb      	ldrb	r3, [r7, #7]
 8004852:	2b07      	cmp	r3, #7
 8004854:	d83d      	bhi.n	80048d2 <ctlnetwork+0x8e>
 8004856:	a201      	add	r2, pc, #4	; (adr r2, 800485c <ctlnetwork+0x18>)
 8004858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485c:	0800487d 	.word	0x0800487d
 8004860:	08004885 	.word	0x08004885
 8004864:	0800488d 	.word	0x0800488d
 8004868:	08004899 	.word	0x08004899
 800486c:	080048a5 	.word	0x080048a5
 8004870:	080048ad 	.word	0x080048ad
 8004874:	080048b5 	.word	0x080048b5
 8004878:	080048c3 	.word	0x080048c3
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 800487c:	6838      	ldr	r0, [r7, #0]
 800487e:	f000 fb3f 	bl	8004f00 <wizchip_setnetinfo>
         break;
 8004882:	e029      	b.n	80048d8 <ctlnetwork+0x94>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8004884:	6838      	ldr	r0, [r7, #0]
 8004886:	f000 fbb9 	bl	8004ffc <wizchip_getnetinfo>
         break;
 800488a:	e025      	b.n	80048d8 <ctlnetwork+0x94>
      case CN_SET_NETMODE:
         wizchip_setnetmode(*(netmode_type*)arg);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fc33 	bl	80050fc <wizchip_setnetmode>
         break;
 8004896:	e01f      	b.n	80048d8 <ctlnetwork+0x94>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8004898:	f000 fc5c 	bl	8005154 <wizchip_getnetmode>
 800489c:	4602      	mov	r2, r0
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	601a      	str	r2, [r3, #0]
         break;
 80048a2:	e019      	b.n	80048d8 <ctlnetwork+0x94>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 80048a4:	6838      	ldr	r0, [r7, #0]
 80048a6:	f000 fc83 	bl	80051b0 <wizchip_settimeout>
         break;
 80048aa:	e015      	b.n	80048d8 <ctlnetwork+0x94>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 80048ac:	6838      	ldr	r0, [r7, #0]
 80048ae:	f000 fcbf 	bl	8005230 <wizchip_gettimeout>
         break;
 80048b2:	e011      	b.n	80048d8 <ctlnetwork+0x94>
      case CN_SET_PREFER:
         setSLPSR(*(uint8_t*)arg);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	4619      	mov	r1, r3
 80048ba:	480a      	ldr	r0, [pc, #40]	; (80048e4 <ctlnetwork+0xa0>)
 80048bc:	f7fe fc28 	bl	8003110 <WIZCHIP_WRITE>
         break;
 80048c0:	e00a      	b.n	80048d8 <ctlnetwork+0x94>
      case CN_GET_PREFER:
    	  *(uint8_t*)arg= getSLPSR();
 80048c2:	4808      	ldr	r0, [pc, #32]	; (80048e4 <ctlnetwork+0xa0>)
 80048c4:	f7fe fc56 	bl	8003174 <WIZCHIP_READ>
 80048c8:	4603      	mov	r3, r0
 80048ca:	461a      	mov	r2, r3
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	701a      	strb	r2, [r3, #0]
         break;
 80048d0:	e002      	b.n	80048d8 <ctlnetwork+0x94>
      default:
         return -1;
 80048d2:	f04f 33ff 	mov.w	r3, #4294967295
 80048d6:	e000      	b.n	80048da <ctlnetwork+0x96>
   }
   return 0;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	00212c00 	.word	0x00212c00

080048e8 <wizchip_sw_reset>:
          break;
   }
}

void wizchip_sw_reset(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b096      	sub	sp, #88	; 0x58
 80048ec:	af00      	add	r7, sp, #0
   uint8_t gw[4], sn[4], sip[4], gw6[16], sn6[16], lla[16], gua[16];
   uint8_t mac[6];
   uint8_t islock = getSYSR();
 80048ee:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80048f2:	f7fe fc3f 	bl	8003174 <WIZCHIP_READ>
 80048f6:	4603      	mov	r3, r0
 80048f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

   CHIPUNLOCK();
 80048fc:	21ce      	movs	r1, #206	; 0xce
 80048fe:	4849      	ldr	r0, [pc, #292]	; (8004a24 <wizchip_sw_reset+0x13c>)
 8004900:	f7fe fc06 	bl	8003110 <WIZCHIP_WRITE>

   getSHAR(mac);
 8004904:	463b      	mov	r3, r7
 8004906:	2206      	movs	r2, #6
 8004908:	4619      	mov	r1, r3
 800490a:	4847      	ldr	r0, [pc, #284]	; (8004a28 <wizchip_sw_reset+0x140>)
 800490c:	f7fe fc9a 	bl	8003244 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);	getGA6R(gw6); getSUB6R(sn6); getLLAR(lla); getGUAR(gua);
 8004910:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004914:	2204      	movs	r2, #4
 8004916:	4619      	mov	r1, r3
 8004918:	4844      	ldr	r0, [pc, #272]	; (8004a2c <wizchip_sw_reset+0x144>)
 800491a:	f7fe fc93 	bl	8003244 <WIZCHIP_READ_BUF>
 800491e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004922:	2204      	movs	r2, #4
 8004924:	4619      	mov	r1, r3
 8004926:	4842      	ldr	r0, [pc, #264]	; (8004a30 <wizchip_sw_reset+0x148>)
 8004928:	f7fe fc8c 	bl	8003244 <WIZCHIP_READ_BUF>
 800492c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004930:	2204      	movs	r2, #4
 8004932:	4619      	mov	r1, r3
 8004934:	483f      	ldr	r0, [pc, #252]	; (8004a34 <wizchip_sw_reset+0x14c>)
 8004936:	f7fe fc85 	bl	8003244 <WIZCHIP_READ_BUF>
 800493a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800493e:	2210      	movs	r2, #16
 8004940:	4619      	mov	r1, r3
 8004942:	483d      	ldr	r0, [pc, #244]	; (8004a38 <wizchip_sw_reset+0x150>)
 8004944:	f7fe fc7e 	bl	8003244 <WIZCHIP_READ_BUF>
 8004948:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800494c:	2210      	movs	r2, #16
 800494e:	4619      	mov	r1, r3
 8004950:	483a      	ldr	r0, [pc, #232]	; (8004a3c <wizchip_sw_reset+0x154>)
 8004952:	f7fe fc77 	bl	8003244 <WIZCHIP_READ_BUF>
 8004956:	f107 0318 	add.w	r3, r7, #24
 800495a:	2210      	movs	r2, #16
 800495c:	4619      	mov	r1, r3
 800495e:	4838      	ldr	r0, [pc, #224]	; (8004a40 <wizchip_sw_reset+0x158>)
 8004960:	f7fe fc70 	bl	8003244 <WIZCHIP_READ_BUF>
 8004964:	f107 0308 	add.w	r3, r7, #8
 8004968:	2210      	movs	r2, #16
 800496a:	4619      	mov	r1, r3
 800496c:	4835      	ldr	r0, [pc, #212]	; (8004a44 <wizchip_sw_reset+0x15c>)
 800496e:	f7fe fc69 	bl	8003244 <WIZCHIP_READ_BUF>
   setSYCR0(SYCR0_RST);
 8004972:	2100      	movs	r1, #0
 8004974:	4834      	ldr	r0, [pc, #208]	; (8004a48 <wizchip_sw_reset+0x160>)
 8004976:	f7fe fbcb 	bl	8003110 <WIZCHIP_WRITE>
   getSYCR0(); // for delay
 800497a:	4833      	ldr	r0, [pc, #204]	; (8004a48 <wizchip_sw_reset+0x160>)
 800497c:	f7fe fbfa 	bl	8003174 <WIZCHIP_READ>

   NETUNLOCK();
 8004980:	213a      	movs	r1, #58	; 0x3a
 8004982:	4832      	ldr	r0, [pc, #200]	; (8004a4c <wizchip_sw_reset+0x164>)
 8004984:	f7fe fbc4 	bl	8003110 <WIZCHIP_WRITE>

   setSHAR(mac);
 8004988:	463b      	mov	r3, r7
 800498a:	2206      	movs	r2, #6
 800498c:	4619      	mov	r1, r3
 800498e:	4826      	ldr	r0, [pc, #152]	; (8004a28 <wizchip_sw_reset+0x140>)
 8004990:	f7fe fc20 	bl	80031d4 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8004994:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004998:	2204      	movs	r2, #4
 800499a:	4619      	mov	r1, r3
 800499c:	4823      	ldr	r0, [pc, #140]	; (8004a2c <wizchip_sw_reset+0x144>)
 800499e:	f7fe fc19 	bl	80031d4 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80049a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80049a6:	2204      	movs	r2, #4
 80049a8:	4619      	mov	r1, r3
 80049aa:	4821      	ldr	r0, [pc, #132]	; (8004a30 <wizchip_sw_reset+0x148>)
 80049ac:	f7fe fc12 	bl	80031d4 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80049b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80049b4:	2204      	movs	r2, #4
 80049b6:	4619      	mov	r1, r3
 80049b8:	481e      	ldr	r0, [pc, #120]	; (8004a34 <wizchip_sw_reset+0x14c>)
 80049ba:	f7fe fc0b 	bl	80031d4 <WIZCHIP_WRITE_BUF>
   setGA6R(gw6); 
 80049be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80049c2:	2210      	movs	r2, #16
 80049c4:	4619      	mov	r1, r3
 80049c6:	481c      	ldr	r0, [pc, #112]	; (8004a38 <wizchip_sw_reset+0x150>)
 80049c8:	f7fe fc04 	bl	80031d4 <WIZCHIP_WRITE_BUF>
   setSUB6R(sn6); 
 80049cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049d0:	2210      	movs	r2, #16
 80049d2:	4619      	mov	r1, r3
 80049d4:	4819      	ldr	r0, [pc, #100]	; (8004a3c <wizchip_sw_reset+0x154>)
 80049d6:	f7fe fbfd 	bl	80031d4 <WIZCHIP_WRITE_BUF>
   setLLAR(lla);
 80049da:	f107 0318 	add.w	r3, r7, #24
 80049de:	2210      	movs	r2, #16
 80049e0:	4619      	mov	r1, r3
 80049e2:	4817      	ldr	r0, [pc, #92]	; (8004a40 <wizchip_sw_reset+0x158>)
 80049e4:	f7fe fbf6 	bl	80031d4 <WIZCHIP_WRITE_BUF>
   setGUAR(gua);
 80049e8:	f107 0308 	add.w	r3, r7, #8
 80049ec:	2210      	movs	r2, #16
 80049ee:	4619      	mov	r1, r3
 80049f0:	4814      	ldr	r0, [pc, #80]	; (8004a44 <wizchip_sw_reset+0x15c>)
 80049f2:	f7fe fbef 	bl	80031d4 <WIZCHIP_WRITE_BUF>
   if(islock & SYSR_CHPL) CHIPLOCK();
 80049f6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	da03      	bge.n	8004a06 <wizchip_sw_reset+0x11e>
 80049fe:	21ff      	movs	r1, #255	; 0xff
 8004a00:	4808      	ldr	r0, [pc, #32]	; (8004a24 <wizchip_sw_reset+0x13c>)
 8004a02:	f7fe fb85 	bl	8003110 <WIZCHIP_WRITE>
   if(islock & SYSR_NETL) NETLOCK();
 8004a06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <wizchip_sw_reset+0x132>
 8004a12:	21c5      	movs	r1, #197	; 0xc5
 8004a14:	480d      	ldr	r0, [pc, #52]	; (8004a4c <wizchip_sw_reset+0x164>)
 8004a16:	f7fe fb7b 	bl	8003110 <WIZCHIP_WRITE>
}
 8004a1a:	bf00      	nop
 8004a1c:	3758      	adds	r7, #88	; 0x58
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	0041f400 	.word	0x0041f400
 8004a28:	00412000 	.word	0x00412000
 8004a2c:	00413000 	.word	0x00413000
 8004a30:	00413400 	.word	0x00413400
 8004a34:	00413800 	.word	0x00413800
 8004a38:	00417000 	.word	0x00417000
 8004a3c:	00416000 	.word	0x00416000
 8004a40:	00414000 	.word	0x00414000
 8004a44:	00415000 	.word	0x00415000
 8004a48:	00200400 	.word	0x00200400
 8004a4c:	0041f500 	.word	0x0041f500

08004a50 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
   int8_t i;
   int8_t tmp = 0;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8004a5e:	f7ff ff43 	bl	80048e8 <wizchip_sw_reset>
   if(txsize)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d03b      	beq.n	8004ae0 <wizchip_init+0x90>
   {
      tmp = 0;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	73bb      	strb	r3, [r7, #14]
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	73fb      	strb	r3, [r7, #15]
 8004a70:	e015      	b.n	8004a9e <wizchip_init+0x4e>
			{
				tmp += txsize[i];		
 8004a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	4413      	add	r3, r2
 8004a7a:	781a      	ldrb	r2, [r3, #0]
 8004a7c:	7bbb      	ldrb	r3, [r7, #14]
 8004a7e:	4413      	add	r3, r2
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	73bb      	strb	r3, [r7, #14]
				if(tmp > 2*_WIZCHIP_SOCK_NUM_) return -1;		
 8004a84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a88:	2b10      	cmp	r3, #16
 8004a8a:	dd02      	ble.n	8004a92 <wizchip_init+0x42>
 8004a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a90:	e066      	b.n	8004b60 <wizchip_init+0x110>
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	3301      	adds	r3, #1
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	73fb      	strb	r3, [r7, #15]
 8004a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aa2:	2b07      	cmp	r3, #7
 8004aa4:	dde5      	ble.n	8004a72 <wizchip_init+0x22>
			}
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++) setSn_TXBUF_SIZE(i, txsize[i]);			
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	73fb      	strb	r3, [r7, #15]
 8004aaa:	e015      	b.n	8004ad8 <wizchip_init+0x88>
 8004aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004aba:	4618      	mov	r0, r3
 8004abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	f7fe fb22 	bl	8003110 <WIZCHIP_WRITE>
 8004acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	73fb      	strb	r3, [r7, #15]
 8004ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004adc:	2b07      	cmp	r3, #7
 8004ade:	dde5      	ble.n	8004aac <wizchip_init+0x5c>
   }
   if(rxsize)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d03b      	beq.n	8004b5e <wizchip_init+0x10e>
   {
      tmp = 0;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	73bb      	strb	r3, [r7, #14]
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004aea:	2300      	movs	r3, #0
 8004aec:	73fb      	strb	r3, [r7, #15]
 8004aee:	e015      	b.n	8004b1c <wizchip_init+0xcc>
			{
				tmp += rxsize[i];		
 8004af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	4413      	add	r3, r2
 8004af8:	781a      	ldrb	r2, [r3, #0]
 8004afa:	7bbb      	ldrb	r3, [r7, #14]
 8004afc:	4413      	add	r3, r2
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	73bb      	strb	r3, [r7, #14]
				if(tmp > 2*_WIZCHIP_SOCK_NUM_) return -1;		
 8004b02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b06:	2b10      	cmp	r3, #16
 8004b08:	dd02      	ble.n	8004b10 <wizchip_init+0xc0>
 8004b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b0e:	e027      	b.n	8004b60 <wizchip_init+0x110>
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	3301      	adds	r3, #1
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	73fb      	strb	r3, [r7, #15]
 8004b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b20:	2b07      	cmp	r3, #7
 8004b22:	dde5      	ble.n	8004af0 <wizchip_init+0xa0>
			}
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++) setSn_RXBUF_SIZE(i, rxsize[i]);
 8004b24:	2300      	movs	r3, #0
 8004b26:	73fb      	strb	r3, [r7, #15]
 8004b28:	e015      	b.n	8004b56 <wizchip_init+0x106>
 8004b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	3301      	adds	r3, #1
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	4413      	add	r3, r2
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	4619      	mov	r1, r3
 8004b46:	f7fe fae3 	bl	8003110 <WIZCHIP_WRITE>
 8004b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	3301      	adds	r3, #1
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	73fb      	strb	r3, [r7, #15]
 8004b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b5a:	2b07      	cmp	r3, #7
 8004b5c:	dde5      	ble.n	8004b2a <wizchip_init+0xda>
   }
   return 0;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
   int i;
   uint8_t ir   = (uint8_t)intr;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	72fb      	strb	r3, [r7, #11]
   uint8_t sir  = (uint8_t)((uint32_t)intr >> 8);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	0a1b      	lsrs	r3, r3, #8
 8004b78:	72bb      	strb	r3, [r7, #10]
   uint8_t slir = (uint8_t)((uint32_t)intr >> 16);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	0c1b      	lsrs	r3, r3, #16
 8004b7e:	727b      	strb	r3, [r7, #9]
   setIRCLR(ir);
 8004b80:	7afb      	ldrb	r3, [r7, #11]
 8004b82:	4619      	mov	r1, r3
 8004b84:	4813      	ldr	r0, [pc, #76]	; (8004bd4 <wizchip_clrinterrupt+0x6c>)
 8004b86:	f7fe fac3 	bl	8003110 <WIZCHIP_WRITE>
   for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	e014      	b.n	8004bba <wizchip_clrinterrupt+0x52>
   {
   	if(sir&(1<<i))   	setSn_IRCLR(i,0xFF);
 8004b90:	7aba      	ldrb	r2, [r7, #10]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	fa42 f303 	asr.w	r3, r2, r3
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d009      	beq.n	8004bb4 <wizchip_clrinterrupt+0x4c>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8004bac:	21ff      	movs	r1, #255	; 0xff
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fe faae 	bl	8003110 <WIZCHIP_WRITE>
   for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	60fb      	str	r3, [r7, #12]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2b07      	cmp	r3, #7
 8004bbe:	dde7      	ble.n	8004b90 <wizchip_clrinterrupt+0x28>
   }
   setSLIRCLR(slir);
 8004bc0:	7a7b      	ldrb	r3, [r7, #9]
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	4804      	ldr	r0, [pc, #16]	; (8004bd8 <wizchip_clrinterrupt+0x70>)
 8004bc6:	f7fe faa3 	bl	8003110 <WIZCHIP_WRITE>
}
 8004bca:	bf00      	nop
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	00210800 	.word	0x00210800
 8004bd8:	00212800 	.word	0x00212800

08004bdc <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8004bdc:	b590      	push	{r4, r7, lr}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
   uint32_t ret;
   ret = (((uint32_t)getSLIR())<<16) | (((uint32_t)getSIR())<<8) | (((uint32_t)getIR()));
 8004be2:	480b      	ldr	r0, [pc, #44]	; (8004c10 <wizchip_getinterrupt+0x34>)
 8004be4:	f7fe fac6 	bl	8003174 <WIZCHIP_READ>
 8004be8:	4603      	mov	r3, r0
 8004bea:	041c      	lsls	r4, r3, #16
 8004bec:	4809      	ldr	r0, [pc, #36]	; (8004c14 <wizchip_getinterrupt+0x38>)
 8004bee:	f7fe fac1 	bl	8003174 <WIZCHIP_READ>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	021b      	lsls	r3, r3, #8
 8004bf6:	431c      	orrs	r4, r3
 8004bf8:	f44f 1004 	mov.w	r0, #2162688	; 0x210000
 8004bfc:	f7fe faba 	bl	8003174 <WIZCHIP_READ>
 8004c00:	4603      	mov	r3, r0
 8004c02:	4323      	orrs	r3, r4
 8004c04:	607b      	str	r3, [r7, #4]
   return (intr_kind)ret;
 8004c06:	687b      	ldr	r3, [r7, #4]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd90      	pop	{r4, r7, pc}
 8004c10:	00210200 	.word	0x00210200
 8004c14:	00210100 	.word	0x00210100

08004c18 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
   uint8_t imr   = (uint8_t)intr;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	73fb      	strb	r3, [r7, #15]
   uint8_t simr  = (uint8_t)((uint32_t)intr >> 8);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	0a1b      	lsrs	r3, r3, #8
 8004c28:	73bb      	strb	r3, [r7, #14]
   uint8_t slimr = (uint8_t)((uint32_t)intr >> 16);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	0c1b      	lsrs	r3, r3, #16
 8004c2e:	737b      	strb	r3, [r7, #13]
   setIMR(imr);
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
 8004c32:	4619      	mov	r1, r3
 8004c34:	4808      	ldr	r0, [pc, #32]	; (8004c58 <wizchip_setinterruptmask+0x40>)
 8004c36:	f7fe fa6b 	bl	8003110 <WIZCHIP_WRITE>
   setSIMR(simr);
 8004c3a:	7bbb      	ldrb	r3, [r7, #14]
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4807      	ldr	r0, [pc, #28]	; (8004c5c <wizchip_setinterruptmask+0x44>)
 8004c40:	f7fe fa66 	bl	8003110 <WIZCHIP_WRITE>
   setSLIMR(slimr);
 8004c44:	7b7b      	ldrb	r3, [r7, #13]
 8004c46:	4619      	mov	r1, r3
 8004c48:	4805      	ldr	r0, [pc, #20]	; (8004c60 <wizchip_setinterruptmask+0x48>)
 8004c4a:	f7fe fa61 	bl	8003110 <WIZCHIP_WRITE>
}
 8004c4e:	bf00      	nop
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	00210400 	.word	0x00210400
 8004c5c:	00211400 	.word	0x00211400
 8004c60:	00212400 	.word	0x00212400

08004c64 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8004c64:	b590      	push	{r4, r7, lr}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
   uint32_t ret;
   ret = (((uint32_t)getSLIMR())<<16) | (((uint32_t)getSIMR())<<8) | (((uint32_t)getIMR()));
 8004c6a:	480b      	ldr	r0, [pc, #44]	; (8004c98 <wizchip_getinterruptmask+0x34>)
 8004c6c:	f7fe fa82 	bl	8003174 <WIZCHIP_READ>
 8004c70:	4603      	mov	r3, r0
 8004c72:	041c      	lsls	r4, r3, #16
 8004c74:	4809      	ldr	r0, [pc, #36]	; (8004c9c <wizchip_getinterruptmask+0x38>)
 8004c76:	f7fe fa7d 	bl	8003174 <WIZCHIP_READ>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	021b      	lsls	r3, r3, #8
 8004c7e:	431c      	orrs	r4, r3
 8004c80:	4807      	ldr	r0, [pc, #28]	; (8004ca0 <wizchip_getinterruptmask+0x3c>)
 8004c82:	f7fe fa77 	bl	8003174 <WIZCHIP_READ>
 8004c86:	4603      	mov	r3, r0
 8004c88:	4323      	orrs	r3, r4
 8004c8a:	607b      	str	r3, [r7, #4]
   return (intr_kind)ret;
 8004c8c:	687b      	ldr	r3, [r7, #4]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd90      	pop	{r4, r7, pc}
 8004c96:	bf00      	nop
 8004c98:	00212400 	.word	0x00212400
 8004c9c:	00211400 	.word	0x00211400
 8004ca0:	00210400 	.word	0x00210400

08004ca4 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   return (getPHYSR() & PHYSR_LNK);
 8004ca8:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8004cac:	f7fe fa62 	bl	8003174 <WIZCHIP_READ>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	b25b      	sxtb	r3, r3
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	b25b      	sxtb	r3, r3
#elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
   if(wiz_mdio_read(PHYRAR_BMSR) & BMSR_LINK_STATUS) return PHY_LINK_ON;
   return PHY_LINK_OFF;
#endif  
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	bd80      	pop	{r7, pc}
	...

08004cc0 <wizphy_reset>:

void wizphy_reset(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = getPHYCR1() | PHYCR1_RST;
 8004cc6:	480c      	ldr	r0, [pc, #48]	; (8004cf8 <wizphy_reset+0x38>)
 8004cc8:	f7fe fa54 	bl	8003174 <WIZCHIP_READ>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	f043 0301 	orr.w	r3, r3, #1
 8004cd2:	71fb      	strb	r3, [r7, #7]
   PHYUNLOCK();
 8004cd4:	2153      	movs	r1, #83	; 0x53
 8004cd6:	4809      	ldr	r0, [pc, #36]	; (8004cfc <wizphy_reset+0x3c>)
 8004cd8:	f7fe fa1a 	bl	8003110 <WIZCHIP_WRITE>
   setPHYCR1(tmp);
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4805      	ldr	r0, [pc, #20]	; (8004cf8 <wizphy_reset+0x38>)
 8004ce2:	f7fe fa15 	bl	8003110 <WIZCHIP_WRITE>
   PHYLOCK();
 8004ce6:	21ff      	movs	r1, #255	; 0xff
 8004ce8:	4804      	ldr	r0, [pc, #16]	; (8004cfc <wizphy_reset+0x3c>)
 8004cea:	f7fe fa11 	bl	8003110 <WIZCHIP_WRITE>
#elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
	wiz_mdio_write(PHYRAR_BMCR, wiz_mdio_read(PHYRAR_BMCR) | BMCR_RST);
	while(wiz_mdio_read(PHYRAR_BMCR) & BMCR_RST);
#endif
}
 8004cee:	bf00      	nop
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	00301d00 	.word	0x00301d00
 8004cfc:	0041f600 	.word	0x0041f600

08004d00 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = 0;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_TE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d10d      	bne.n	8004d30 <wizphy_setphyconf+0x30>
   {
      setPHYCR1(getPHYCR1() | PHYCR1_TE);
 8004d14:	481e      	ldr	r0, [pc, #120]	; (8004d90 <wizphy_setphyconf+0x90>)
 8004d16:	f7fe fa2d 	bl	8003174 <WIZCHIP_READ>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	f043 0308 	orr.w	r3, r3, #8
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	4619      	mov	r1, r3
 8004d24:	481a      	ldr	r0, [pc, #104]	; (8004d90 <wizphy_setphyconf+0x90>)
 8004d26:	f7fe f9f3 	bl	8003110 <WIZCHIP_WRITE>
      tmp = PHYCR0_AUTO;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	73fb      	strb	r3, [r7, #15]
 8004d2e:	e025      	b.n	8004d7c <wizphy_setphyconf+0x7c>
   }
   else
   {
      setPHYCR1(getPHYCR1() & ~PHYCR1_TE);
 8004d30:	4817      	ldr	r0, [pc, #92]	; (8004d90 <wizphy_setphyconf+0x90>)
 8004d32:	f7fe fa1f 	bl	8003174 <WIZCHIP_READ>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f023 0308 	bic.w	r3, r3, #8
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	4619      	mov	r1, r3
 8004d40:	4813      	ldr	r0, [pc, #76]	; (8004d90 <wizphy_setphyconf+0x90>)
 8004d42:	f7fe f9e5 	bl	8003110 <WIZCHIP_WRITE>
      if(phyconf->mode == PHY_MODE_AUTONEGO) tmp = PHYCR0_AUTO;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d102      	bne.n	8004d54 <wizphy_setphyconf+0x54>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	73fb      	strb	r3, [r7, #15]
 8004d52:	e013      	b.n	8004d7c <wizphy_setphyconf+0x7c>
      else
      {
         tmp |= 0x04;
 8004d54:	7bfb      	ldrb	r3, [r7, #15]
 8004d56:	f043 0304 	orr.w	r3, r3, #4
 8004d5a:	73fb      	strb	r3, [r7, #15]
         if(phyconf->speed  == PHY_SPEED_10)    tmp |= 0x02;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	785b      	ldrb	r3, [r3, #1]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d103      	bne.n	8004d6c <wizphy_setphyconf+0x6c>
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
 8004d66:	f043 0302 	orr.w	r3, r3, #2
 8004d6a:	73fb      	strb	r3, [r7, #15]
         if(phyconf->duplex == PHY_DUPLEX_HALF) tmp |= 0x01;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	789b      	ldrb	r3, [r3, #2]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d103      	bne.n	8004d7c <wizphy_setphyconf+0x7c>
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	f043 0301 	orr.w	r3, r3, #1
 8004d7a:	73fb      	strb	r3, [r7, #15]
      }
   }
   setPHYCR0(tmp);
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4804      	ldr	r0, [pc, #16]	; (8004d94 <wizphy_setphyconf+0x94>)
 8004d82:	f7fe f9c5 	bl	8003110 <WIZCHIP_WRITE>
         if(phyconf->speed == PHY_SPEED_100)    tmp |= BMCR_SPD;
      }
      wiz_mdio_write(PHYRAR_BMCR, tmp);
   }
#endif   
}
 8004d86:	bf00      	nop
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	00301d00 	.word	0x00301d00
 8004d94:	00301c00 	.word	0x00301c00

08004d98 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = 0;
 8004da0:	2300      	movs	r3, #0
 8004da2:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYSR();
 8004da4:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8004da8:	f7fe f9e4 	bl	8003174 <WIZCHIP_READ>
 8004dac:	4603      	mov	r3, r0
 8004dae:	73fb      	strb	r3, [r7, #15]
   if(getPHYCR1() & PHYCR1_TE) phyconf->mode = PHY_MODE_TE;
 8004db0:	4818      	ldr	r0, [pc, #96]	; (8004e14 <wizphy_getphyconf+0x7c>)
 8004db2:	f7fe f9df 	bl	8003174 <WIZCHIP_READ>
 8004db6:	4603      	mov	r3, r0
 8004db8:	f003 0308 	and.w	r3, r3, #8
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d003      	beq.n	8004dc8 <wizphy_getphyconf+0x30>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	701a      	strb	r2, [r3, #0]
 8004dc6:	e00a      	b.n	8004dde <wizphy_getphyconf+0x46>
   else                        phyconf->mode = (tmp & (1<<5)) ? PHY_MODE_MANUAL : PHY_MODE_AUTONEGO ;
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	f003 0320 	and.w	r3, r3, #32
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	bf0c      	ite	eq
 8004dd2:	2301      	moveq	r3, #1
 8004dd4:	2300      	movne	r3, #0
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	701a      	strb	r2, [r3, #0]
   phyconf->speed  = (tmp & (1<<4)) ? PHY_SPEED_10    : PHY_SPEED_100;
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
 8004de0:	f003 0310 	and.w	r3, r3, #16
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	bf0c      	ite	eq
 8004de8:	2301      	moveq	r3, #1
 8004dea:	2300      	movne	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	461a      	mov	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	705a      	strb	r2, [r3, #1]
   phyconf->duplex = (tmp & (1<<3)) ? PHY_DUPLEX_HALF : PHY_DUPLEX_FULL;
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	bf0c      	ite	eq
 8004dfe:	2301      	moveq	r3, #1
 8004e00:	2300      	movne	r3, #0
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	461a      	mov	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	709a      	strb	r2, [r3, #2]
   if(getPHYCR1() & PHYCR1_TE) phyconf->mode = PHY_MODE_TE;
   else phyconf->mode   = (tmp & BMCR_ANE) ? PHY_MODE_AUTONEGO : PHY_MODE_MANUAL;
   phyconf->duplex = (tmp & BMCR_DPX) ? PHY_DUPLEX_FULL   : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & BMCR_SPD) ? PHY_SPEED_100     : PHY_SPEED_10;
#endif
}
 8004e0a:	bf00      	nop
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	00301d00 	.word	0x00301d00

08004e18 <wizphy_getphystatus>:

void wizphy_getphystatus(wiz_PhyConf* phyconf)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8004e20:	2300      	movs	r3, #0
 8004e22:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYSR();
 8004e24:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8004e28:	f7fe f9a4 	bl	8003174 <WIZCHIP_READ>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	73fb      	strb	r3, [r7, #15]
   if(getPHYCR1() & PHYCR1_TE) phyconf->mode = PHY_MODE_TE;
 8004e30:	4818      	ldr	r0, [pc, #96]	; (8004e94 <wizphy_getphystatus+0x7c>)
 8004e32:	f7fe f99f 	bl	8003174 <WIZCHIP_READ>
 8004e36:	4603      	mov	r3, r0
 8004e38:	f003 0308 	and.w	r3, r3, #8
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <wizphy_getphystatus+0x30>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	701a      	strb	r2, [r3, #0]
 8004e46:	e00a      	b.n	8004e5e <wizphy_getphystatus+0x46>
   else phyconf->mode   = (tmp & (1<<5))    ? PHY_MODE_MANUAL : PHY_MODE_AUTONEGO ;
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	bf0c      	ite	eq
 8004e52:	2301      	moveq	r3, #1
 8004e54:	2300      	movne	r3, #0
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	461a      	mov	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	701a      	strb	r2, [r3, #0]
   phyconf->speed  = (tmp & PHYSR_SPD) ? PHY_SPEED_10    : PHY_SPEED_100;
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	bf0c      	ite	eq
 8004e68:	2301      	moveq	r3, #1
 8004e6a:	2300      	movne	r3, #0
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	461a      	mov	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	705a      	strb	r2, [r3, #1]
   phyconf->duplex = (tmp & PHYSR_DPX) ? PHY_DUPLEX_HALF : PHY_DUPLEX_FULL;
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	f003 0304 	and.w	r3, r3, #4
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	bf0c      	ite	eq
 8004e7e:	2301      	moveq	r3, #1
 8004e80:	2300      	movne	r3, #0
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	461a      	mov	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	709a      	strb	r2, [r3, #2]
}
 8004e8a:	bf00      	nop
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	00301d00 	.word	0x00301d00

08004e98 <wizphy_setphypmode>:

void wizphy_setphypmode(uint8_t pmode)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	71fb      	strb	r3, [r7, #7]
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = getPHYCR1();
 8004ea2:	480d      	ldr	r0, [pc, #52]	; (8004ed8 <wizphy_setphypmode+0x40>)
 8004ea4:	f7fe f966 	bl	8003174 <WIZCHIP_READ>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	73fb      	strb	r3, [r7, #15]
   if (pmode == PHY_POWER_DOWN)    tmp |= PHYCR1_PWDN;
 8004eac:	79fb      	ldrb	r3, [r7, #7]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d104      	bne.n	8004ebc <wizphy_setphypmode+0x24>
 8004eb2:	7bfb      	ldrb	r3, [r7, #15]
 8004eb4:	f043 0320 	orr.w	r3, r3, #32
 8004eb8:	73fb      	strb	r3, [r7, #15]
 8004eba:	e003      	b.n	8004ec4 <wizphy_setphypmode+0x2c>
   else                            tmp &= ~PHYCR1_PWDN;
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
 8004ebe:	f023 0320 	bic.w	r3, r3, #32
 8004ec2:	73fb      	strb	r3, [r7, #15]
   setPHYCR1(tmp);
 8004ec4:	7bfb      	ldrb	r3, [r7, #15]
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4803      	ldr	r0, [pc, #12]	; (8004ed8 <wizphy_setphypmode+0x40>)
 8004eca:	f7fe f921 	bl	8003110 <WIZCHIP_WRITE>
   tmp = wiz_mdio_read(PHYRAR_BMCR);
   if (pmode == PHY_POWER_DOWN)    tmp |= BMCR_PWDN;
   else                            tmp &= ~BMCR_PWDN;
   wiz_mdio_write(PHYRAR_BMCR, tmp);
#endif   
}
 8004ece:	bf00      	nop
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	00301d00 	.word	0x00301d00

08004edc <wizphy_getphypmode>:

int8_t wizphy_getphypmode(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   if (getPHYCR1() & PHYCR1_PWDN)              return PHY_POWER_DOWN;
 8004ee0:	4806      	ldr	r0, [pc, #24]	; (8004efc <wizphy_getphypmode+0x20>)
 8004ee2:	f7fe f947 	bl	8003174 <WIZCHIP_READ>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	f003 0320 	and.w	r3, r3, #32
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <wizphy_getphypmode+0x18>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e000      	b.n	8004ef6 <wizphy_getphypmode+0x1a>
#elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
   if (wiz_mdio_read(PHYRAR_BMCR) & BMCR_PWDN) return PHY_POWER_DOWN;
#endif   
   return PHY_POWER_NORM;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	00301d00 	.word	0x00301d00

08004f00 <wizchip_setnetinfo>:

void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
   uint8_t i=0;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	73fb      	strb	r3, [r7, #15]
   setSHAR(pnetinfo->mac);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2206      	movs	r2, #6
 8004f10:	4619      	mov	r1, r3
 8004f12:	482f      	ldr	r0, [pc, #188]	; (8004fd0 <wizchip_setnetinfo+0xd0>)
 8004f14:	f7fe f95e 	bl	80031d4 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	330e      	adds	r3, #14
 8004f1c:	2204      	movs	r2, #4
 8004f1e:	4619      	mov	r1, r3
 8004f20:	482c      	ldr	r0, [pc, #176]	; (8004fd4 <wizchip_setnetinfo+0xd4>)
 8004f22:	f7fe f957 	bl	80031d4 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	330a      	adds	r3, #10
 8004f2a:	2204      	movs	r2, #4
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	482a      	ldr	r0, [pc, #168]	; (8004fd8 <wizchip_setnetinfo+0xd8>)
 8004f30:	f7fe f950 	bl	80031d4 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);   
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3306      	adds	r3, #6
 8004f38:	2204      	movs	r2, #4
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	4827      	ldr	r0, [pc, #156]	; (8004fdc <wizchip_setnetinfo+0xdc>)
 8004f3e:	f7fe f949 	bl	80031d4 <WIZCHIP_WRITE_BUF>
   setGA6R(pnetinfo->gw6);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	3342      	adds	r3, #66	; 0x42
 8004f46:	2210      	movs	r2, #16
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4825      	ldr	r0, [pc, #148]	; (8004fe0 <wizchip_setnetinfo+0xe0>)
 8004f4c:	f7fe f942 	bl	80031d4 <WIZCHIP_WRITE_BUF>
   setSUB6R(pnetinfo->sn6);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3332      	adds	r3, #50	; 0x32
 8004f54:	2210      	movs	r2, #16
 8004f56:	4619      	mov	r1, r3
 8004f58:	4822      	ldr	r0, [pc, #136]	; (8004fe4 <wizchip_setnetinfo+0xe4>)
 8004f5a:	f7fe f93b 	bl	80031d4 <WIZCHIP_WRITE_BUF>
   setLLAR(pnetinfo->lla);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	3312      	adds	r3, #18
 8004f62:	2210      	movs	r2, #16
 8004f64:	4619      	mov	r1, r3
 8004f66:	4820      	ldr	r0, [pc, #128]	; (8004fe8 <wizchip_setnetinfo+0xe8>)
 8004f68:	f7fe f934 	bl	80031d4 <WIZCHIP_WRITE_BUF>
   setGUAR(pnetinfo->gua);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3322      	adds	r3, #34	; 0x22
 8004f70:	2210      	movs	r2, #16
 8004f72:	4619      	mov	r1, r3
 8004f74:	481d      	ldr	r0, [pc, #116]	; (8004fec <wizchip_setnetinfo+0xec>)
 8004f76:	f7fe f92d 	bl	80031d4 <WIZCHIP_WRITE_BUF>

   for(i=0; i<4; i++)  _DNS_[i]  = pnetinfo->dns[i];
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	73fb      	strb	r3, [r7, #15]
 8004f7e:	e00a      	b.n	8004f96 <wizchip_setnetinfo+0x96>
 8004f80:	7bfa      	ldrb	r2, [r7, #15]
 8004f82:	7bfb      	ldrb	r3, [r7, #15]
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	440a      	add	r2, r1
 8004f88:	f892 1052 	ldrb.w	r1, [r2, #82]	; 0x52
 8004f8c:	4a18      	ldr	r2, [pc, #96]	; (8004ff0 <wizchip_setnetinfo+0xf0>)
 8004f8e:	54d1      	strb	r1, [r2, r3]
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
 8004f92:	3301      	adds	r3, #1
 8004f94:	73fb      	strb	r3, [r7, #15]
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	d9f1      	bls.n	8004f80 <wizchip_setnetinfo+0x80>
   for(i=0; i<16; i++) _DNS6_[i] = pnetinfo->dns6[i];
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	73fb      	strb	r3, [r7, #15]
 8004fa0:	e00a      	b.n	8004fb8 <wizchip_setnetinfo+0xb8>
 8004fa2:	7bfa      	ldrb	r2, [r7, #15]
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
 8004fa6:	6879      	ldr	r1, [r7, #4]
 8004fa8:	440a      	add	r2, r1
 8004faa:	f892 1056 	ldrb.w	r1, [r2, #86]	; 0x56
 8004fae:	4a11      	ldr	r2, [pc, #68]	; (8004ff4 <wizchip_setnetinfo+0xf4>)
 8004fb0:	54d1      	strb	r1, [r2, r3]
 8004fb2:	7bfb      	ldrb	r3, [r7, #15]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	73fb      	strb	r3, [r7, #15]
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	2b0f      	cmp	r3, #15
 8004fbc:	d9f1      	bls.n	8004fa2 <wizchip_setnetinfo+0xa2>

   _IPMODE_   = pnetinfo->ipmode;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 8004fc4:	4b0c      	ldr	r3, [pc, #48]	; (8004ff8 <wizchip_setnetinfo+0xf8>)
 8004fc6:	701a      	strb	r2, [r3, #0]
}
 8004fc8:	bf00      	nop
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	00412000 	.word	0x00412000
 8004fd4:	00413000 	.word	0x00413000
 8004fd8:	00413400 	.word	0x00413400
 8004fdc:	00413800 	.word	0x00413800
 8004fe0:	00417000 	.word	0x00417000
 8004fe4:	00416000 	.word	0x00416000
 8004fe8:	00414000 	.word	0x00414000
 8004fec:	00415000 	.word	0x00415000
 8004ff0:	2000014c 	.word	0x2000014c
 8004ff4:	20000150 	.word	0x20000150
 8004ff8:	20000160 	.word	0x20000160

08004ffc <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
   uint8_t i = 0;
 8005004:	2300      	movs	r3, #0
 8005006:	73fb      	strb	r3, [r7, #15]
   getSHAR(pnetinfo->mac);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2206      	movs	r2, #6
 800500c:	4619      	mov	r1, r3
 800500e:	4830      	ldr	r0, [pc, #192]	; (80050d0 <wizchip_getnetinfo+0xd4>)
 8005010:	f7fe f918 	bl	8003244 <WIZCHIP_READ_BUF>

   getGAR(pnetinfo->gw);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	330e      	adds	r3, #14
 8005018:	2204      	movs	r2, #4
 800501a:	4619      	mov	r1, r3
 800501c:	482d      	ldr	r0, [pc, #180]	; (80050d4 <wizchip_getnetinfo+0xd8>)
 800501e:	f7fe f911 	bl	8003244 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	330a      	adds	r3, #10
 8005026:	2204      	movs	r2, #4
 8005028:	4619      	mov	r1, r3
 800502a:	482b      	ldr	r0, [pc, #172]	; (80050d8 <wizchip_getnetinfo+0xdc>)
 800502c:	f7fe f90a 	bl	8003244 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3306      	adds	r3, #6
 8005034:	2204      	movs	r2, #4
 8005036:	4619      	mov	r1, r3
 8005038:	4828      	ldr	r0, [pc, #160]	; (80050dc <wizchip_getnetinfo+0xe0>)
 800503a:	f7fe f903 	bl	8003244 <WIZCHIP_READ_BUF>
   
   getGA6R(pnetinfo->gw6);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	3342      	adds	r3, #66	; 0x42
 8005042:	2210      	movs	r2, #16
 8005044:	4619      	mov	r1, r3
 8005046:	4826      	ldr	r0, [pc, #152]	; (80050e0 <wizchip_getnetinfo+0xe4>)
 8005048:	f7fe f8fc 	bl	8003244 <WIZCHIP_READ_BUF>
   getSUB6R(pnetinfo->sn6);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3332      	adds	r3, #50	; 0x32
 8005050:	2210      	movs	r2, #16
 8005052:	4619      	mov	r1, r3
 8005054:	4823      	ldr	r0, [pc, #140]	; (80050e4 <wizchip_getnetinfo+0xe8>)
 8005056:	f7fe f8f5 	bl	8003244 <WIZCHIP_READ_BUF>
   getLLAR(pnetinfo->lla);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	3312      	adds	r3, #18
 800505e:	2210      	movs	r2, #16
 8005060:	4619      	mov	r1, r3
 8005062:	4821      	ldr	r0, [pc, #132]	; (80050e8 <wizchip_getnetinfo+0xec>)
 8005064:	f7fe f8ee 	bl	8003244 <WIZCHIP_READ_BUF>
   getGUAR(pnetinfo->gua);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3322      	adds	r3, #34	; 0x22
 800506c:	2210      	movs	r2, #16
 800506e:	4619      	mov	r1, r3
 8005070:	481e      	ldr	r0, [pc, #120]	; (80050ec <wizchip_getnetinfo+0xf0>)
 8005072:	f7fe f8e7 	bl	8003244 <WIZCHIP_READ_BUF>
   for(i=0; i<4; i++)  pnetinfo->dns[i] = _DNS_[i];
 8005076:	2300      	movs	r3, #0
 8005078:	73fb      	strb	r3, [r7, #15]
 800507a:	e00b      	b.n	8005094 <wizchip_getnetinfo+0x98>
 800507c:	7bfa      	ldrb	r2, [r7, #15]
 800507e:	7bfb      	ldrb	r3, [r7, #15]
 8005080:	491b      	ldr	r1, [pc, #108]	; (80050f0 <wizchip_getnetinfo+0xf4>)
 8005082:	5c89      	ldrb	r1, [r1, r2]
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	4413      	add	r3, r2
 8005088:	460a      	mov	r2, r1
 800508a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 800508e:	7bfb      	ldrb	r3, [r7, #15]
 8005090:	3301      	adds	r3, #1
 8005092:	73fb      	strb	r3, [r7, #15]
 8005094:	7bfb      	ldrb	r3, [r7, #15]
 8005096:	2b03      	cmp	r3, #3
 8005098:	d9f0      	bls.n	800507c <wizchip_getnetinfo+0x80>
   for(i=0; i<16; i++) pnetinfo->dns6[i]  = _DNS6_[i];
 800509a:	2300      	movs	r3, #0
 800509c:	73fb      	strb	r3, [r7, #15]
 800509e:	e00b      	b.n	80050b8 <wizchip_getnetinfo+0xbc>
 80050a0:	7bfa      	ldrb	r2, [r7, #15]
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
 80050a4:	4913      	ldr	r1, [pc, #76]	; (80050f4 <wizchip_getnetinfo+0xf8>)
 80050a6:	5c89      	ldrb	r1, [r1, r2]
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	4413      	add	r3, r2
 80050ac:	460a      	mov	r2, r1
 80050ae:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
 80050b4:	3301      	adds	r3, #1
 80050b6:	73fb      	strb	r3, [r7, #15]
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
 80050ba:	2b0f      	cmp	r3, #15
 80050bc:	d9f0      	bls.n	80050a0 <wizchip_getnetinfo+0xa4>

   pnetinfo->ipmode = _IPMODE_;
 80050be:	4b0e      	ldr	r3, [pc, #56]	; (80050f8 <wizchip_getnetinfo+0xfc>)
 80050c0:	781a      	ldrb	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
 80050c8:	bf00      	nop
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	00412000 	.word	0x00412000
 80050d4:	00413000 	.word	0x00413000
 80050d8:	00413400 	.word	0x00413400
 80050dc:	00413800 	.word	0x00413800
 80050e0:	00417000 	.word	0x00417000
 80050e4:	00416000 	.word	0x00416000
 80050e8:	00414000 	.word	0x00414000
 80050ec:	00415000 	.word	0x00415000
 80050f0:	2000014c 	.word	0x2000014c
 80050f4:	20000150 	.word	0x20000150
 80050f8:	20000160 	.word	0x20000160

080050fc <wizchip_setnetmode>:

void wizchip_setnetmode(netmode_type netmode)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
   uint32_t tmp = (uint32_t) netmode;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	60fb      	str	r3, [r7, #12]
   setNETMR ((uint8_t)tmp);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	b2db      	uxtb	r3, r3
 800510c:	4619      	mov	r1, r3
 800510e:	480e      	ldr	r0, [pc, #56]	; (8005148 <wizchip_setnetmode+0x4c>)
 8005110:	f7fd fffe 	bl	8003110 <WIZCHIP_WRITE>
   setNETMR2((uint8_t)(tmp>>8));
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	0a1b      	lsrs	r3, r3, #8
 8005118:	b2db      	uxtb	r3, r3
 800511a:	4619      	mov	r1, r3
 800511c:	480b      	ldr	r0, [pc, #44]	; (800514c <wizchip_setnetmode+0x50>)
 800511e:	f7fd fff7 	bl	8003110 <WIZCHIP_WRITE>
   setNET4MR((uint8_t)(tmp>>16));
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	0c1b      	lsrs	r3, r3, #16
 8005126:	b2db      	uxtb	r3, r3
 8005128:	4619      	mov	r1, r3
 800512a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800512e:	f7fd ffef 	bl	8003110 <WIZCHIP_WRITE>
   setNET6MR((uint8_t)(tmp>>24));
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	0e1b      	lsrs	r3, r3, #24
 8005136:	b2db      	uxtb	r3, r3
 8005138:	4619      	mov	r1, r3
 800513a:	4805      	ldr	r0, [pc, #20]	; (8005150 <wizchip_setnetmode+0x54>)
 800513c:	f7fd ffe8 	bl	8003110 <WIZCHIP_WRITE>
}
 8005140:	bf00      	nop
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	00400800 	.word	0x00400800
 800514c:	00400900 	.word	0x00400900
 8005150:	00400400 	.word	0x00400400

08005154 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8005154:	b590      	push	{r4, r7, lr}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
   uint32_t ret = 0;
 800515a:	2300      	movs	r3, #0
 800515c:	607b      	str	r3, [r7, #4]
   ret = getNETMR();
 800515e:	4811      	ldr	r0, [pc, #68]	; (80051a4 <wizchip_getnetmode+0x50>)
 8005160:	f7fe f808 	bl	8003174 <WIZCHIP_READ>
 8005164:	4603      	mov	r3, r0
 8005166:	607b      	str	r3, [r7, #4]
   ret = (ret << 8)  + getNETMR2();
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	021c      	lsls	r4, r3, #8
 800516c:	480e      	ldr	r0, [pc, #56]	; (80051a8 <wizchip_getnetmode+0x54>)
 800516e:	f7fe f801 	bl	8003174 <WIZCHIP_READ>
 8005172:	4603      	mov	r3, r0
 8005174:	4423      	add	r3, r4
 8005176:	607b      	str	r3, [r7, #4]
   ret = (ret << 16) + getNET4MR();
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	041c      	lsls	r4, r3, #16
 800517c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8005180:	f7fd fff8 	bl	8003174 <WIZCHIP_READ>
 8005184:	4603      	mov	r3, r0
 8005186:	4423      	add	r3, r4
 8005188:	607b      	str	r3, [r7, #4]
   ret = (ret << 24) + getNET6MR();
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	061c      	lsls	r4, r3, #24
 800518e:	4807      	ldr	r0, [pc, #28]	; (80051ac <wizchip_getnetmode+0x58>)
 8005190:	f7fd fff0 	bl	8003174 <WIZCHIP_READ>
 8005194:	4603      	mov	r3, r0
 8005196:	4423      	add	r3, r4
 8005198:	607b      	str	r3, [r7, #4]
   return (netmode_type)ret;
 800519a:	687b      	ldr	r3, [r7, #4]
}
 800519c:	4618      	mov	r0, r3
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd90      	pop	{r4, r7, pc}
 80051a4:	00400800 	.word	0x00400800
 80051a8:	00400900 	.word	0x00400900
 80051ac:	00400400 	.word	0x00400400

080051b0 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
   setRCR(nettime->s_retry_cnt);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	4619      	mov	r1, r3
 80051be:	4817      	ldr	r0, [pc, #92]	; (800521c <wizchip_settimeout+0x6c>)
 80051c0:	f7fd ffa6 	bl	8003110 <WIZCHIP_WRITE>
   setRTR(nettime->s_time_100us);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	885b      	ldrh	r3, [r3, #2]
 80051c8:	0a1b      	lsrs	r3, r3, #8
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	4619      	mov	r1, r3
 80051d0:	f44f 0084 	mov.w	r0, #4325376	; 0x420000
 80051d4:	f7fd ff9c 	bl	8003110 <WIZCHIP_WRITE>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	885b      	ldrh	r3, [r3, #2]
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	4619      	mov	r1, r3
 80051e0:	480f      	ldr	r0, [pc, #60]	; (8005220 <wizchip_settimeout+0x70>)
 80051e2:	f7fd ff95 	bl	8003110 <WIZCHIP_WRITE>
   setSLRCR(nettime->sl_retry_cnt);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	791b      	ldrb	r3, [r3, #4]
 80051ea:	4619      	mov	r1, r3
 80051ec:	480d      	ldr	r0, [pc, #52]	; (8005224 <wizchip_settimeout+0x74>)
 80051ee:	f7fd ff8f 	bl	8003110 <WIZCHIP_WRITE>
   setSLRTR(nettime->sl_time_100us);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	88db      	ldrh	r3, [r3, #6]
 80051f6:	0a1b      	lsrs	r3, r3, #8
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	4619      	mov	r1, r3
 80051fe:	480a      	ldr	r0, [pc, #40]	; (8005228 <wizchip_settimeout+0x78>)
 8005200:	f7fd ff86 	bl	8003110 <WIZCHIP_WRITE>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	88db      	ldrh	r3, [r3, #6]
 8005208:	b2db      	uxtb	r3, r3
 800520a:	4619      	mov	r1, r3
 800520c:	4807      	ldr	r0, [pc, #28]	; (800522c <wizchip_settimeout+0x7c>)
 800520e:	f7fd ff7f 	bl	8003110 <WIZCHIP_WRITE>
}
 8005212:	bf00      	nop
 8005214:	3708      	adds	r7, #8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	00420400 	.word	0x00420400
 8005220:	00420100 	.word	0x00420100
 8005224:	00420c00 	.word	0x00420c00
 8005228:	00420800 	.word	0x00420800
 800522c:	00420900 	.word	0x00420900

08005230 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8005230:	b590      	push	{r4, r7, lr}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
   nettime->s_retry_cnt   = getRCR();
 8005238:	4819      	ldr	r0, [pc, #100]	; (80052a0 <wizchip_gettimeout+0x70>)
 800523a:	f7fd ff9b 	bl	8003174 <WIZCHIP_READ>
 800523e:	4603      	mov	r3, r0
 8005240:	461a      	mov	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	701a      	strb	r2, [r3, #0]
   nettime->s_time_100us  = getRTR();
 8005246:	f44f 0084 	mov.w	r0, #4325376	; 0x420000
 800524a:	f7fd ff93 	bl	8003174 <WIZCHIP_READ>
 800524e:	4603      	mov	r3, r0
 8005250:	b29b      	uxth	r3, r3
 8005252:	021b      	lsls	r3, r3, #8
 8005254:	b29c      	uxth	r4, r3
 8005256:	4813      	ldr	r0, [pc, #76]	; (80052a4 <wizchip_gettimeout+0x74>)
 8005258:	f7fd ff8c 	bl	8003174 <WIZCHIP_READ>
 800525c:	4603      	mov	r3, r0
 800525e:	b29b      	uxth	r3, r3
 8005260:	4423      	add	r3, r4
 8005262:	b29a      	uxth	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	805a      	strh	r2, [r3, #2]
   nettime->sl_retry_cnt  = getSLRCR();
 8005268:	480f      	ldr	r0, [pc, #60]	; (80052a8 <wizchip_gettimeout+0x78>)
 800526a:	f7fd ff83 	bl	8003174 <WIZCHIP_READ>
 800526e:	4603      	mov	r3, r0
 8005270:	461a      	mov	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	711a      	strb	r2, [r3, #4]
   nettime->sl_time_100us = getSLRTR();
 8005276:	480d      	ldr	r0, [pc, #52]	; (80052ac <wizchip_gettimeout+0x7c>)
 8005278:	f7fd ff7c 	bl	8003174 <WIZCHIP_READ>
 800527c:	4603      	mov	r3, r0
 800527e:	b29b      	uxth	r3, r3
 8005280:	021b      	lsls	r3, r3, #8
 8005282:	b29c      	uxth	r4, r3
 8005284:	480a      	ldr	r0, [pc, #40]	; (80052b0 <wizchip_gettimeout+0x80>)
 8005286:	f7fd ff75 	bl	8003174 <WIZCHIP_READ>
 800528a:	4603      	mov	r3, r0
 800528c:	b29b      	uxth	r3, r3
 800528e:	4423      	add	r3, r4
 8005290:	b29a      	uxth	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	80da      	strh	r2, [r3, #6]
}
 8005296:	bf00      	nop
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	bd90      	pop	{r4, r7, pc}
 800529e:	bf00      	nop
 80052a0:	00420400 	.word	0x00420400
 80052a4:	00420100 	.word	0x00420100
 80052a8:	00420c00 	.word	0x00420c00
 80052ac:	00420800 	.word	0x00420800
 80052b0:	00420900 	.word	0x00420900

080052b4 <__errno>:
 80052b4:	4b01      	ldr	r3, [pc, #4]	; (80052bc <__errno+0x8>)
 80052b6:	6818      	ldr	r0, [r3, #0]
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	200000ac 	.word	0x200000ac

080052c0 <__libc_init_array>:
 80052c0:	b570      	push	{r4, r5, r6, lr}
 80052c2:	2600      	movs	r6, #0
 80052c4:	4d0c      	ldr	r5, [pc, #48]	; (80052f8 <__libc_init_array+0x38>)
 80052c6:	4c0d      	ldr	r4, [pc, #52]	; (80052fc <__libc_init_array+0x3c>)
 80052c8:	1b64      	subs	r4, r4, r5
 80052ca:	10a4      	asrs	r4, r4, #2
 80052cc:	42a6      	cmp	r6, r4
 80052ce:	d109      	bne.n	80052e4 <__libc_init_array+0x24>
 80052d0:	f000 fff8 	bl	80062c4 <_init>
 80052d4:	2600      	movs	r6, #0
 80052d6:	4d0a      	ldr	r5, [pc, #40]	; (8005300 <__libc_init_array+0x40>)
 80052d8:	4c0a      	ldr	r4, [pc, #40]	; (8005304 <__libc_init_array+0x44>)
 80052da:	1b64      	subs	r4, r4, r5
 80052dc:	10a4      	asrs	r4, r4, #2
 80052de:	42a6      	cmp	r6, r4
 80052e0:	d105      	bne.n	80052ee <__libc_init_array+0x2e>
 80052e2:	bd70      	pop	{r4, r5, r6, pc}
 80052e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80052e8:	4798      	blx	r3
 80052ea:	3601      	adds	r6, #1
 80052ec:	e7ee      	b.n	80052cc <__libc_init_array+0xc>
 80052ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80052f2:	4798      	blx	r3
 80052f4:	3601      	adds	r6, #1
 80052f6:	e7f2      	b.n	80052de <__libc_init_array+0x1e>
 80052f8:	080066ec 	.word	0x080066ec
 80052fc:	080066ec 	.word	0x080066ec
 8005300:	080066ec 	.word	0x080066ec
 8005304:	080066f0 	.word	0x080066f0

08005308 <memset>:
 8005308:	4603      	mov	r3, r0
 800530a:	4402      	add	r2, r0
 800530c:	4293      	cmp	r3, r2
 800530e:	d100      	bne.n	8005312 <memset+0xa>
 8005310:	4770      	bx	lr
 8005312:	f803 1b01 	strb.w	r1, [r3], #1
 8005316:	e7f9      	b.n	800530c <memset+0x4>

08005318 <iprintf>:
 8005318:	b40f      	push	{r0, r1, r2, r3}
 800531a:	4b0a      	ldr	r3, [pc, #40]	; (8005344 <iprintf+0x2c>)
 800531c:	b513      	push	{r0, r1, r4, lr}
 800531e:	681c      	ldr	r4, [r3, #0]
 8005320:	b124      	cbz	r4, 800532c <iprintf+0x14>
 8005322:	69a3      	ldr	r3, [r4, #24]
 8005324:	b913      	cbnz	r3, 800532c <iprintf+0x14>
 8005326:	4620      	mov	r0, r4
 8005328:	f000 fa5e 	bl	80057e8 <__sinit>
 800532c:	ab05      	add	r3, sp, #20
 800532e:	4620      	mov	r0, r4
 8005330:	9a04      	ldr	r2, [sp, #16]
 8005332:	68a1      	ldr	r1, [r4, #8]
 8005334:	9301      	str	r3, [sp, #4]
 8005336:	f000 fc29 	bl	8005b8c <_vfiprintf_r>
 800533a:	b002      	add	sp, #8
 800533c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005340:	b004      	add	sp, #16
 8005342:	4770      	bx	lr
 8005344:	200000ac 	.word	0x200000ac

08005348 <_puts_r>:
 8005348:	b570      	push	{r4, r5, r6, lr}
 800534a:	460e      	mov	r6, r1
 800534c:	4605      	mov	r5, r0
 800534e:	b118      	cbz	r0, 8005358 <_puts_r+0x10>
 8005350:	6983      	ldr	r3, [r0, #24]
 8005352:	b90b      	cbnz	r3, 8005358 <_puts_r+0x10>
 8005354:	f000 fa48 	bl	80057e8 <__sinit>
 8005358:	69ab      	ldr	r3, [r5, #24]
 800535a:	68ac      	ldr	r4, [r5, #8]
 800535c:	b913      	cbnz	r3, 8005364 <_puts_r+0x1c>
 800535e:	4628      	mov	r0, r5
 8005360:	f000 fa42 	bl	80057e8 <__sinit>
 8005364:	4b2c      	ldr	r3, [pc, #176]	; (8005418 <_puts_r+0xd0>)
 8005366:	429c      	cmp	r4, r3
 8005368:	d120      	bne.n	80053ac <_puts_r+0x64>
 800536a:	686c      	ldr	r4, [r5, #4]
 800536c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800536e:	07db      	lsls	r3, r3, #31
 8005370:	d405      	bmi.n	800537e <_puts_r+0x36>
 8005372:	89a3      	ldrh	r3, [r4, #12]
 8005374:	0598      	lsls	r0, r3, #22
 8005376:	d402      	bmi.n	800537e <_puts_r+0x36>
 8005378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800537a:	f000 fad3 	bl	8005924 <__retarget_lock_acquire_recursive>
 800537e:	89a3      	ldrh	r3, [r4, #12]
 8005380:	0719      	lsls	r1, r3, #28
 8005382:	d51d      	bpl.n	80053c0 <_puts_r+0x78>
 8005384:	6923      	ldr	r3, [r4, #16]
 8005386:	b1db      	cbz	r3, 80053c0 <_puts_r+0x78>
 8005388:	3e01      	subs	r6, #1
 800538a:	68a3      	ldr	r3, [r4, #8]
 800538c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005390:	3b01      	subs	r3, #1
 8005392:	60a3      	str	r3, [r4, #8]
 8005394:	bb39      	cbnz	r1, 80053e6 <_puts_r+0x9e>
 8005396:	2b00      	cmp	r3, #0
 8005398:	da38      	bge.n	800540c <_puts_r+0xc4>
 800539a:	4622      	mov	r2, r4
 800539c:	210a      	movs	r1, #10
 800539e:	4628      	mov	r0, r5
 80053a0:	f000 f848 	bl	8005434 <__swbuf_r>
 80053a4:	3001      	adds	r0, #1
 80053a6:	d011      	beq.n	80053cc <_puts_r+0x84>
 80053a8:	250a      	movs	r5, #10
 80053aa:	e011      	b.n	80053d0 <_puts_r+0x88>
 80053ac:	4b1b      	ldr	r3, [pc, #108]	; (800541c <_puts_r+0xd4>)
 80053ae:	429c      	cmp	r4, r3
 80053b0:	d101      	bne.n	80053b6 <_puts_r+0x6e>
 80053b2:	68ac      	ldr	r4, [r5, #8]
 80053b4:	e7da      	b.n	800536c <_puts_r+0x24>
 80053b6:	4b1a      	ldr	r3, [pc, #104]	; (8005420 <_puts_r+0xd8>)
 80053b8:	429c      	cmp	r4, r3
 80053ba:	bf08      	it	eq
 80053bc:	68ec      	ldreq	r4, [r5, #12]
 80053be:	e7d5      	b.n	800536c <_puts_r+0x24>
 80053c0:	4621      	mov	r1, r4
 80053c2:	4628      	mov	r0, r5
 80053c4:	f000 f888 	bl	80054d8 <__swsetup_r>
 80053c8:	2800      	cmp	r0, #0
 80053ca:	d0dd      	beq.n	8005388 <_puts_r+0x40>
 80053cc:	f04f 35ff 	mov.w	r5, #4294967295
 80053d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053d2:	07da      	lsls	r2, r3, #31
 80053d4:	d405      	bmi.n	80053e2 <_puts_r+0x9a>
 80053d6:	89a3      	ldrh	r3, [r4, #12]
 80053d8:	059b      	lsls	r3, r3, #22
 80053da:	d402      	bmi.n	80053e2 <_puts_r+0x9a>
 80053dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053de:	f000 faa2 	bl	8005926 <__retarget_lock_release_recursive>
 80053e2:	4628      	mov	r0, r5
 80053e4:	bd70      	pop	{r4, r5, r6, pc}
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	da04      	bge.n	80053f4 <_puts_r+0xac>
 80053ea:	69a2      	ldr	r2, [r4, #24]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	dc06      	bgt.n	80053fe <_puts_r+0xb6>
 80053f0:	290a      	cmp	r1, #10
 80053f2:	d004      	beq.n	80053fe <_puts_r+0xb6>
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	1c5a      	adds	r2, r3, #1
 80053f8:	6022      	str	r2, [r4, #0]
 80053fa:	7019      	strb	r1, [r3, #0]
 80053fc:	e7c5      	b.n	800538a <_puts_r+0x42>
 80053fe:	4622      	mov	r2, r4
 8005400:	4628      	mov	r0, r5
 8005402:	f000 f817 	bl	8005434 <__swbuf_r>
 8005406:	3001      	adds	r0, #1
 8005408:	d1bf      	bne.n	800538a <_puts_r+0x42>
 800540a:	e7df      	b.n	80053cc <_puts_r+0x84>
 800540c:	250a      	movs	r5, #10
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	6022      	str	r2, [r4, #0]
 8005414:	701d      	strb	r5, [r3, #0]
 8005416:	e7db      	b.n	80053d0 <_puts_r+0x88>
 8005418:	08006678 	.word	0x08006678
 800541c:	08006698 	.word	0x08006698
 8005420:	08006658 	.word	0x08006658

08005424 <puts>:
 8005424:	4b02      	ldr	r3, [pc, #8]	; (8005430 <puts+0xc>)
 8005426:	4601      	mov	r1, r0
 8005428:	6818      	ldr	r0, [r3, #0]
 800542a:	f7ff bf8d 	b.w	8005348 <_puts_r>
 800542e:	bf00      	nop
 8005430:	200000ac 	.word	0x200000ac

08005434 <__swbuf_r>:
 8005434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005436:	460e      	mov	r6, r1
 8005438:	4614      	mov	r4, r2
 800543a:	4605      	mov	r5, r0
 800543c:	b118      	cbz	r0, 8005446 <__swbuf_r+0x12>
 800543e:	6983      	ldr	r3, [r0, #24]
 8005440:	b90b      	cbnz	r3, 8005446 <__swbuf_r+0x12>
 8005442:	f000 f9d1 	bl	80057e8 <__sinit>
 8005446:	4b21      	ldr	r3, [pc, #132]	; (80054cc <__swbuf_r+0x98>)
 8005448:	429c      	cmp	r4, r3
 800544a:	d12b      	bne.n	80054a4 <__swbuf_r+0x70>
 800544c:	686c      	ldr	r4, [r5, #4]
 800544e:	69a3      	ldr	r3, [r4, #24]
 8005450:	60a3      	str	r3, [r4, #8]
 8005452:	89a3      	ldrh	r3, [r4, #12]
 8005454:	071a      	lsls	r2, r3, #28
 8005456:	d52f      	bpl.n	80054b8 <__swbuf_r+0x84>
 8005458:	6923      	ldr	r3, [r4, #16]
 800545a:	b36b      	cbz	r3, 80054b8 <__swbuf_r+0x84>
 800545c:	6923      	ldr	r3, [r4, #16]
 800545e:	6820      	ldr	r0, [r4, #0]
 8005460:	b2f6      	uxtb	r6, r6
 8005462:	1ac0      	subs	r0, r0, r3
 8005464:	6963      	ldr	r3, [r4, #20]
 8005466:	4637      	mov	r7, r6
 8005468:	4283      	cmp	r3, r0
 800546a:	dc04      	bgt.n	8005476 <__swbuf_r+0x42>
 800546c:	4621      	mov	r1, r4
 800546e:	4628      	mov	r0, r5
 8005470:	f000 f926 	bl	80056c0 <_fflush_r>
 8005474:	bb30      	cbnz	r0, 80054c4 <__swbuf_r+0x90>
 8005476:	68a3      	ldr	r3, [r4, #8]
 8005478:	3001      	adds	r0, #1
 800547a:	3b01      	subs	r3, #1
 800547c:	60a3      	str	r3, [r4, #8]
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	6022      	str	r2, [r4, #0]
 8005484:	701e      	strb	r6, [r3, #0]
 8005486:	6963      	ldr	r3, [r4, #20]
 8005488:	4283      	cmp	r3, r0
 800548a:	d004      	beq.n	8005496 <__swbuf_r+0x62>
 800548c:	89a3      	ldrh	r3, [r4, #12]
 800548e:	07db      	lsls	r3, r3, #31
 8005490:	d506      	bpl.n	80054a0 <__swbuf_r+0x6c>
 8005492:	2e0a      	cmp	r6, #10
 8005494:	d104      	bne.n	80054a0 <__swbuf_r+0x6c>
 8005496:	4621      	mov	r1, r4
 8005498:	4628      	mov	r0, r5
 800549a:	f000 f911 	bl	80056c0 <_fflush_r>
 800549e:	b988      	cbnz	r0, 80054c4 <__swbuf_r+0x90>
 80054a0:	4638      	mov	r0, r7
 80054a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054a4:	4b0a      	ldr	r3, [pc, #40]	; (80054d0 <__swbuf_r+0x9c>)
 80054a6:	429c      	cmp	r4, r3
 80054a8:	d101      	bne.n	80054ae <__swbuf_r+0x7a>
 80054aa:	68ac      	ldr	r4, [r5, #8]
 80054ac:	e7cf      	b.n	800544e <__swbuf_r+0x1a>
 80054ae:	4b09      	ldr	r3, [pc, #36]	; (80054d4 <__swbuf_r+0xa0>)
 80054b0:	429c      	cmp	r4, r3
 80054b2:	bf08      	it	eq
 80054b4:	68ec      	ldreq	r4, [r5, #12]
 80054b6:	e7ca      	b.n	800544e <__swbuf_r+0x1a>
 80054b8:	4621      	mov	r1, r4
 80054ba:	4628      	mov	r0, r5
 80054bc:	f000 f80c 	bl	80054d8 <__swsetup_r>
 80054c0:	2800      	cmp	r0, #0
 80054c2:	d0cb      	beq.n	800545c <__swbuf_r+0x28>
 80054c4:	f04f 37ff 	mov.w	r7, #4294967295
 80054c8:	e7ea      	b.n	80054a0 <__swbuf_r+0x6c>
 80054ca:	bf00      	nop
 80054cc:	08006678 	.word	0x08006678
 80054d0:	08006698 	.word	0x08006698
 80054d4:	08006658 	.word	0x08006658

080054d8 <__swsetup_r>:
 80054d8:	4b32      	ldr	r3, [pc, #200]	; (80055a4 <__swsetup_r+0xcc>)
 80054da:	b570      	push	{r4, r5, r6, lr}
 80054dc:	681d      	ldr	r5, [r3, #0]
 80054de:	4606      	mov	r6, r0
 80054e0:	460c      	mov	r4, r1
 80054e2:	b125      	cbz	r5, 80054ee <__swsetup_r+0x16>
 80054e4:	69ab      	ldr	r3, [r5, #24]
 80054e6:	b913      	cbnz	r3, 80054ee <__swsetup_r+0x16>
 80054e8:	4628      	mov	r0, r5
 80054ea:	f000 f97d 	bl	80057e8 <__sinit>
 80054ee:	4b2e      	ldr	r3, [pc, #184]	; (80055a8 <__swsetup_r+0xd0>)
 80054f0:	429c      	cmp	r4, r3
 80054f2:	d10f      	bne.n	8005514 <__swsetup_r+0x3c>
 80054f4:	686c      	ldr	r4, [r5, #4]
 80054f6:	89a3      	ldrh	r3, [r4, #12]
 80054f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054fc:	0719      	lsls	r1, r3, #28
 80054fe:	d42c      	bmi.n	800555a <__swsetup_r+0x82>
 8005500:	06dd      	lsls	r5, r3, #27
 8005502:	d411      	bmi.n	8005528 <__swsetup_r+0x50>
 8005504:	2309      	movs	r3, #9
 8005506:	6033      	str	r3, [r6, #0]
 8005508:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800550c:	f04f 30ff 	mov.w	r0, #4294967295
 8005510:	81a3      	strh	r3, [r4, #12]
 8005512:	e03e      	b.n	8005592 <__swsetup_r+0xba>
 8005514:	4b25      	ldr	r3, [pc, #148]	; (80055ac <__swsetup_r+0xd4>)
 8005516:	429c      	cmp	r4, r3
 8005518:	d101      	bne.n	800551e <__swsetup_r+0x46>
 800551a:	68ac      	ldr	r4, [r5, #8]
 800551c:	e7eb      	b.n	80054f6 <__swsetup_r+0x1e>
 800551e:	4b24      	ldr	r3, [pc, #144]	; (80055b0 <__swsetup_r+0xd8>)
 8005520:	429c      	cmp	r4, r3
 8005522:	bf08      	it	eq
 8005524:	68ec      	ldreq	r4, [r5, #12]
 8005526:	e7e6      	b.n	80054f6 <__swsetup_r+0x1e>
 8005528:	0758      	lsls	r0, r3, #29
 800552a:	d512      	bpl.n	8005552 <__swsetup_r+0x7a>
 800552c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800552e:	b141      	cbz	r1, 8005542 <__swsetup_r+0x6a>
 8005530:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005534:	4299      	cmp	r1, r3
 8005536:	d002      	beq.n	800553e <__swsetup_r+0x66>
 8005538:	4630      	mov	r0, r6
 800553a:	f000 fa59 	bl	80059f0 <_free_r>
 800553e:	2300      	movs	r3, #0
 8005540:	6363      	str	r3, [r4, #52]	; 0x34
 8005542:	89a3      	ldrh	r3, [r4, #12]
 8005544:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005548:	81a3      	strh	r3, [r4, #12]
 800554a:	2300      	movs	r3, #0
 800554c:	6063      	str	r3, [r4, #4]
 800554e:	6923      	ldr	r3, [r4, #16]
 8005550:	6023      	str	r3, [r4, #0]
 8005552:	89a3      	ldrh	r3, [r4, #12]
 8005554:	f043 0308 	orr.w	r3, r3, #8
 8005558:	81a3      	strh	r3, [r4, #12]
 800555a:	6923      	ldr	r3, [r4, #16]
 800555c:	b94b      	cbnz	r3, 8005572 <__swsetup_r+0x9a>
 800555e:	89a3      	ldrh	r3, [r4, #12]
 8005560:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005568:	d003      	beq.n	8005572 <__swsetup_r+0x9a>
 800556a:	4621      	mov	r1, r4
 800556c:	4630      	mov	r0, r6
 800556e:	f000 f9ff 	bl	8005970 <__smakebuf_r>
 8005572:	89a0      	ldrh	r0, [r4, #12]
 8005574:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005578:	f010 0301 	ands.w	r3, r0, #1
 800557c:	d00a      	beq.n	8005594 <__swsetup_r+0xbc>
 800557e:	2300      	movs	r3, #0
 8005580:	60a3      	str	r3, [r4, #8]
 8005582:	6963      	ldr	r3, [r4, #20]
 8005584:	425b      	negs	r3, r3
 8005586:	61a3      	str	r3, [r4, #24]
 8005588:	6923      	ldr	r3, [r4, #16]
 800558a:	b943      	cbnz	r3, 800559e <__swsetup_r+0xc6>
 800558c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005590:	d1ba      	bne.n	8005508 <__swsetup_r+0x30>
 8005592:	bd70      	pop	{r4, r5, r6, pc}
 8005594:	0781      	lsls	r1, r0, #30
 8005596:	bf58      	it	pl
 8005598:	6963      	ldrpl	r3, [r4, #20]
 800559a:	60a3      	str	r3, [r4, #8]
 800559c:	e7f4      	b.n	8005588 <__swsetup_r+0xb0>
 800559e:	2000      	movs	r0, #0
 80055a0:	e7f7      	b.n	8005592 <__swsetup_r+0xba>
 80055a2:	bf00      	nop
 80055a4:	200000ac 	.word	0x200000ac
 80055a8:	08006678 	.word	0x08006678
 80055ac:	08006698 	.word	0x08006698
 80055b0:	08006658 	.word	0x08006658

080055b4 <__sflush_r>:
 80055b4:	898a      	ldrh	r2, [r1, #12]
 80055b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055ba:	4605      	mov	r5, r0
 80055bc:	0710      	lsls	r0, r2, #28
 80055be:	460c      	mov	r4, r1
 80055c0:	d458      	bmi.n	8005674 <__sflush_r+0xc0>
 80055c2:	684b      	ldr	r3, [r1, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	dc05      	bgt.n	80055d4 <__sflush_r+0x20>
 80055c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	dc02      	bgt.n	80055d4 <__sflush_r+0x20>
 80055ce:	2000      	movs	r0, #0
 80055d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055d6:	2e00      	cmp	r6, #0
 80055d8:	d0f9      	beq.n	80055ce <__sflush_r+0x1a>
 80055da:	2300      	movs	r3, #0
 80055dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80055e0:	682f      	ldr	r7, [r5, #0]
 80055e2:	602b      	str	r3, [r5, #0]
 80055e4:	d032      	beq.n	800564c <__sflush_r+0x98>
 80055e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055e8:	89a3      	ldrh	r3, [r4, #12]
 80055ea:	075a      	lsls	r2, r3, #29
 80055ec:	d505      	bpl.n	80055fa <__sflush_r+0x46>
 80055ee:	6863      	ldr	r3, [r4, #4]
 80055f0:	1ac0      	subs	r0, r0, r3
 80055f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80055f4:	b10b      	cbz	r3, 80055fa <__sflush_r+0x46>
 80055f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055f8:	1ac0      	subs	r0, r0, r3
 80055fa:	2300      	movs	r3, #0
 80055fc:	4602      	mov	r2, r0
 80055fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005600:	4628      	mov	r0, r5
 8005602:	6a21      	ldr	r1, [r4, #32]
 8005604:	47b0      	blx	r6
 8005606:	1c43      	adds	r3, r0, #1
 8005608:	89a3      	ldrh	r3, [r4, #12]
 800560a:	d106      	bne.n	800561a <__sflush_r+0x66>
 800560c:	6829      	ldr	r1, [r5, #0]
 800560e:	291d      	cmp	r1, #29
 8005610:	d82c      	bhi.n	800566c <__sflush_r+0xb8>
 8005612:	4a2a      	ldr	r2, [pc, #168]	; (80056bc <__sflush_r+0x108>)
 8005614:	40ca      	lsrs	r2, r1
 8005616:	07d6      	lsls	r6, r2, #31
 8005618:	d528      	bpl.n	800566c <__sflush_r+0xb8>
 800561a:	2200      	movs	r2, #0
 800561c:	6062      	str	r2, [r4, #4]
 800561e:	6922      	ldr	r2, [r4, #16]
 8005620:	04d9      	lsls	r1, r3, #19
 8005622:	6022      	str	r2, [r4, #0]
 8005624:	d504      	bpl.n	8005630 <__sflush_r+0x7c>
 8005626:	1c42      	adds	r2, r0, #1
 8005628:	d101      	bne.n	800562e <__sflush_r+0x7a>
 800562a:	682b      	ldr	r3, [r5, #0]
 800562c:	b903      	cbnz	r3, 8005630 <__sflush_r+0x7c>
 800562e:	6560      	str	r0, [r4, #84]	; 0x54
 8005630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005632:	602f      	str	r7, [r5, #0]
 8005634:	2900      	cmp	r1, #0
 8005636:	d0ca      	beq.n	80055ce <__sflush_r+0x1a>
 8005638:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800563c:	4299      	cmp	r1, r3
 800563e:	d002      	beq.n	8005646 <__sflush_r+0x92>
 8005640:	4628      	mov	r0, r5
 8005642:	f000 f9d5 	bl	80059f0 <_free_r>
 8005646:	2000      	movs	r0, #0
 8005648:	6360      	str	r0, [r4, #52]	; 0x34
 800564a:	e7c1      	b.n	80055d0 <__sflush_r+0x1c>
 800564c:	6a21      	ldr	r1, [r4, #32]
 800564e:	2301      	movs	r3, #1
 8005650:	4628      	mov	r0, r5
 8005652:	47b0      	blx	r6
 8005654:	1c41      	adds	r1, r0, #1
 8005656:	d1c7      	bne.n	80055e8 <__sflush_r+0x34>
 8005658:	682b      	ldr	r3, [r5, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d0c4      	beq.n	80055e8 <__sflush_r+0x34>
 800565e:	2b1d      	cmp	r3, #29
 8005660:	d001      	beq.n	8005666 <__sflush_r+0xb2>
 8005662:	2b16      	cmp	r3, #22
 8005664:	d101      	bne.n	800566a <__sflush_r+0xb6>
 8005666:	602f      	str	r7, [r5, #0]
 8005668:	e7b1      	b.n	80055ce <__sflush_r+0x1a>
 800566a:	89a3      	ldrh	r3, [r4, #12]
 800566c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005670:	81a3      	strh	r3, [r4, #12]
 8005672:	e7ad      	b.n	80055d0 <__sflush_r+0x1c>
 8005674:	690f      	ldr	r7, [r1, #16]
 8005676:	2f00      	cmp	r7, #0
 8005678:	d0a9      	beq.n	80055ce <__sflush_r+0x1a>
 800567a:	0793      	lsls	r3, r2, #30
 800567c:	bf18      	it	ne
 800567e:	2300      	movne	r3, #0
 8005680:	680e      	ldr	r6, [r1, #0]
 8005682:	bf08      	it	eq
 8005684:	694b      	ldreq	r3, [r1, #20]
 8005686:	eba6 0807 	sub.w	r8, r6, r7
 800568a:	600f      	str	r7, [r1, #0]
 800568c:	608b      	str	r3, [r1, #8]
 800568e:	f1b8 0f00 	cmp.w	r8, #0
 8005692:	dd9c      	ble.n	80055ce <__sflush_r+0x1a>
 8005694:	4643      	mov	r3, r8
 8005696:	463a      	mov	r2, r7
 8005698:	4628      	mov	r0, r5
 800569a:	6a21      	ldr	r1, [r4, #32]
 800569c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800569e:	47b0      	blx	r6
 80056a0:	2800      	cmp	r0, #0
 80056a2:	dc06      	bgt.n	80056b2 <__sflush_r+0xfe>
 80056a4:	89a3      	ldrh	r3, [r4, #12]
 80056a6:	f04f 30ff 	mov.w	r0, #4294967295
 80056aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056ae:	81a3      	strh	r3, [r4, #12]
 80056b0:	e78e      	b.n	80055d0 <__sflush_r+0x1c>
 80056b2:	4407      	add	r7, r0
 80056b4:	eba8 0800 	sub.w	r8, r8, r0
 80056b8:	e7e9      	b.n	800568e <__sflush_r+0xda>
 80056ba:	bf00      	nop
 80056bc:	20400001 	.word	0x20400001

080056c0 <_fflush_r>:
 80056c0:	b538      	push	{r3, r4, r5, lr}
 80056c2:	690b      	ldr	r3, [r1, #16]
 80056c4:	4605      	mov	r5, r0
 80056c6:	460c      	mov	r4, r1
 80056c8:	b913      	cbnz	r3, 80056d0 <_fflush_r+0x10>
 80056ca:	2500      	movs	r5, #0
 80056cc:	4628      	mov	r0, r5
 80056ce:	bd38      	pop	{r3, r4, r5, pc}
 80056d0:	b118      	cbz	r0, 80056da <_fflush_r+0x1a>
 80056d2:	6983      	ldr	r3, [r0, #24]
 80056d4:	b90b      	cbnz	r3, 80056da <_fflush_r+0x1a>
 80056d6:	f000 f887 	bl	80057e8 <__sinit>
 80056da:	4b14      	ldr	r3, [pc, #80]	; (800572c <_fflush_r+0x6c>)
 80056dc:	429c      	cmp	r4, r3
 80056de:	d11b      	bne.n	8005718 <_fflush_r+0x58>
 80056e0:	686c      	ldr	r4, [r5, #4]
 80056e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0ef      	beq.n	80056ca <_fflush_r+0xa>
 80056ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80056ec:	07d0      	lsls	r0, r2, #31
 80056ee:	d404      	bmi.n	80056fa <_fflush_r+0x3a>
 80056f0:	0599      	lsls	r1, r3, #22
 80056f2:	d402      	bmi.n	80056fa <_fflush_r+0x3a>
 80056f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056f6:	f000 f915 	bl	8005924 <__retarget_lock_acquire_recursive>
 80056fa:	4628      	mov	r0, r5
 80056fc:	4621      	mov	r1, r4
 80056fe:	f7ff ff59 	bl	80055b4 <__sflush_r>
 8005702:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005704:	4605      	mov	r5, r0
 8005706:	07da      	lsls	r2, r3, #31
 8005708:	d4e0      	bmi.n	80056cc <_fflush_r+0xc>
 800570a:	89a3      	ldrh	r3, [r4, #12]
 800570c:	059b      	lsls	r3, r3, #22
 800570e:	d4dd      	bmi.n	80056cc <_fflush_r+0xc>
 8005710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005712:	f000 f908 	bl	8005926 <__retarget_lock_release_recursive>
 8005716:	e7d9      	b.n	80056cc <_fflush_r+0xc>
 8005718:	4b05      	ldr	r3, [pc, #20]	; (8005730 <_fflush_r+0x70>)
 800571a:	429c      	cmp	r4, r3
 800571c:	d101      	bne.n	8005722 <_fflush_r+0x62>
 800571e:	68ac      	ldr	r4, [r5, #8]
 8005720:	e7df      	b.n	80056e2 <_fflush_r+0x22>
 8005722:	4b04      	ldr	r3, [pc, #16]	; (8005734 <_fflush_r+0x74>)
 8005724:	429c      	cmp	r4, r3
 8005726:	bf08      	it	eq
 8005728:	68ec      	ldreq	r4, [r5, #12]
 800572a:	e7da      	b.n	80056e2 <_fflush_r+0x22>
 800572c:	08006678 	.word	0x08006678
 8005730:	08006698 	.word	0x08006698
 8005734:	08006658 	.word	0x08006658

08005738 <std>:
 8005738:	2300      	movs	r3, #0
 800573a:	b510      	push	{r4, lr}
 800573c:	4604      	mov	r4, r0
 800573e:	e9c0 3300 	strd	r3, r3, [r0]
 8005742:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005746:	6083      	str	r3, [r0, #8]
 8005748:	8181      	strh	r1, [r0, #12]
 800574a:	6643      	str	r3, [r0, #100]	; 0x64
 800574c:	81c2      	strh	r2, [r0, #14]
 800574e:	6183      	str	r3, [r0, #24]
 8005750:	4619      	mov	r1, r3
 8005752:	2208      	movs	r2, #8
 8005754:	305c      	adds	r0, #92	; 0x5c
 8005756:	f7ff fdd7 	bl	8005308 <memset>
 800575a:	4b05      	ldr	r3, [pc, #20]	; (8005770 <std+0x38>)
 800575c:	6224      	str	r4, [r4, #32]
 800575e:	6263      	str	r3, [r4, #36]	; 0x24
 8005760:	4b04      	ldr	r3, [pc, #16]	; (8005774 <std+0x3c>)
 8005762:	62a3      	str	r3, [r4, #40]	; 0x28
 8005764:	4b04      	ldr	r3, [pc, #16]	; (8005778 <std+0x40>)
 8005766:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005768:	4b04      	ldr	r3, [pc, #16]	; (800577c <std+0x44>)
 800576a:	6323      	str	r3, [r4, #48]	; 0x30
 800576c:	bd10      	pop	{r4, pc}
 800576e:	bf00      	nop
 8005770:	08006139 	.word	0x08006139
 8005774:	0800615b 	.word	0x0800615b
 8005778:	08006193 	.word	0x08006193
 800577c:	080061b7 	.word	0x080061b7

08005780 <_cleanup_r>:
 8005780:	4901      	ldr	r1, [pc, #4]	; (8005788 <_cleanup_r+0x8>)
 8005782:	f000 b8af 	b.w	80058e4 <_fwalk_reent>
 8005786:	bf00      	nop
 8005788:	080056c1 	.word	0x080056c1

0800578c <__sfmoreglue>:
 800578c:	b570      	push	{r4, r5, r6, lr}
 800578e:	2568      	movs	r5, #104	; 0x68
 8005790:	1e4a      	subs	r2, r1, #1
 8005792:	4355      	muls	r5, r2
 8005794:	460e      	mov	r6, r1
 8005796:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800579a:	f000 f975 	bl	8005a88 <_malloc_r>
 800579e:	4604      	mov	r4, r0
 80057a0:	b140      	cbz	r0, 80057b4 <__sfmoreglue+0x28>
 80057a2:	2100      	movs	r1, #0
 80057a4:	e9c0 1600 	strd	r1, r6, [r0]
 80057a8:	300c      	adds	r0, #12
 80057aa:	60a0      	str	r0, [r4, #8]
 80057ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80057b0:	f7ff fdaa 	bl	8005308 <memset>
 80057b4:	4620      	mov	r0, r4
 80057b6:	bd70      	pop	{r4, r5, r6, pc}

080057b8 <__sfp_lock_acquire>:
 80057b8:	4801      	ldr	r0, [pc, #4]	; (80057c0 <__sfp_lock_acquire+0x8>)
 80057ba:	f000 b8b3 	b.w	8005924 <__retarget_lock_acquire_recursive>
 80057be:	bf00      	nop
 80057c0:	20000a14 	.word	0x20000a14

080057c4 <__sfp_lock_release>:
 80057c4:	4801      	ldr	r0, [pc, #4]	; (80057cc <__sfp_lock_release+0x8>)
 80057c6:	f000 b8ae 	b.w	8005926 <__retarget_lock_release_recursive>
 80057ca:	bf00      	nop
 80057cc:	20000a14 	.word	0x20000a14

080057d0 <__sinit_lock_acquire>:
 80057d0:	4801      	ldr	r0, [pc, #4]	; (80057d8 <__sinit_lock_acquire+0x8>)
 80057d2:	f000 b8a7 	b.w	8005924 <__retarget_lock_acquire_recursive>
 80057d6:	bf00      	nop
 80057d8:	20000a0f 	.word	0x20000a0f

080057dc <__sinit_lock_release>:
 80057dc:	4801      	ldr	r0, [pc, #4]	; (80057e4 <__sinit_lock_release+0x8>)
 80057de:	f000 b8a2 	b.w	8005926 <__retarget_lock_release_recursive>
 80057e2:	bf00      	nop
 80057e4:	20000a0f 	.word	0x20000a0f

080057e8 <__sinit>:
 80057e8:	b510      	push	{r4, lr}
 80057ea:	4604      	mov	r4, r0
 80057ec:	f7ff fff0 	bl	80057d0 <__sinit_lock_acquire>
 80057f0:	69a3      	ldr	r3, [r4, #24]
 80057f2:	b11b      	cbz	r3, 80057fc <__sinit+0x14>
 80057f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057f8:	f7ff bff0 	b.w	80057dc <__sinit_lock_release>
 80057fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005800:	6523      	str	r3, [r4, #80]	; 0x50
 8005802:	4b13      	ldr	r3, [pc, #76]	; (8005850 <__sinit+0x68>)
 8005804:	4a13      	ldr	r2, [pc, #76]	; (8005854 <__sinit+0x6c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	62a2      	str	r2, [r4, #40]	; 0x28
 800580a:	42a3      	cmp	r3, r4
 800580c:	bf08      	it	eq
 800580e:	2301      	moveq	r3, #1
 8005810:	4620      	mov	r0, r4
 8005812:	bf08      	it	eq
 8005814:	61a3      	streq	r3, [r4, #24]
 8005816:	f000 f81f 	bl	8005858 <__sfp>
 800581a:	6060      	str	r0, [r4, #4]
 800581c:	4620      	mov	r0, r4
 800581e:	f000 f81b 	bl	8005858 <__sfp>
 8005822:	60a0      	str	r0, [r4, #8]
 8005824:	4620      	mov	r0, r4
 8005826:	f000 f817 	bl	8005858 <__sfp>
 800582a:	2200      	movs	r2, #0
 800582c:	2104      	movs	r1, #4
 800582e:	60e0      	str	r0, [r4, #12]
 8005830:	6860      	ldr	r0, [r4, #4]
 8005832:	f7ff ff81 	bl	8005738 <std>
 8005836:	2201      	movs	r2, #1
 8005838:	2109      	movs	r1, #9
 800583a:	68a0      	ldr	r0, [r4, #8]
 800583c:	f7ff ff7c 	bl	8005738 <std>
 8005840:	2202      	movs	r2, #2
 8005842:	2112      	movs	r1, #18
 8005844:	68e0      	ldr	r0, [r4, #12]
 8005846:	f7ff ff77 	bl	8005738 <std>
 800584a:	2301      	movs	r3, #1
 800584c:	61a3      	str	r3, [r4, #24]
 800584e:	e7d1      	b.n	80057f4 <__sinit+0xc>
 8005850:	08006654 	.word	0x08006654
 8005854:	08005781 	.word	0x08005781

08005858 <__sfp>:
 8005858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585a:	4607      	mov	r7, r0
 800585c:	f7ff ffac 	bl	80057b8 <__sfp_lock_acquire>
 8005860:	4b1e      	ldr	r3, [pc, #120]	; (80058dc <__sfp+0x84>)
 8005862:	681e      	ldr	r6, [r3, #0]
 8005864:	69b3      	ldr	r3, [r6, #24]
 8005866:	b913      	cbnz	r3, 800586e <__sfp+0x16>
 8005868:	4630      	mov	r0, r6
 800586a:	f7ff ffbd 	bl	80057e8 <__sinit>
 800586e:	3648      	adds	r6, #72	; 0x48
 8005870:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005874:	3b01      	subs	r3, #1
 8005876:	d503      	bpl.n	8005880 <__sfp+0x28>
 8005878:	6833      	ldr	r3, [r6, #0]
 800587a:	b30b      	cbz	r3, 80058c0 <__sfp+0x68>
 800587c:	6836      	ldr	r6, [r6, #0]
 800587e:	e7f7      	b.n	8005870 <__sfp+0x18>
 8005880:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005884:	b9d5      	cbnz	r5, 80058bc <__sfp+0x64>
 8005886:	4b16      	ldr	r3, [pc, #88]	; (80058e0 <__sfp+0x88>)
 8005888:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800588c:	60e3      	str	r3, [r4, #12]
 800588e:	6665      	str	r5, [r4, #100]	; 0x64
 8005890:	f000 f847 	bl	8005922 <__retarget_lock_init_recursive>
 8005894:	f7ff ff96 	bl	80057c4 <__sfp_lock_release>
 8005898:	2208      	movs	r2, #8
 800589a:	4629      	mov	r1, r5
 800589c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80058a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80058a4:	6025      	str	r5, [r4, #0]
 80058a6:	61a5      	str	r5, [r4, #24]
 80058a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80058ac:	f7ff fd2c 	bl	8005308 <memset>
 80058b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80058b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80058b8:	4620      	mov	r0, r4
 80058ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058bc:	3468      	adds	r4, #104	; 0x68
 80058be:	e7d9      	b.n	8005874 <__sfp+0x1c>
 80058c0:	2104      	movs	r1, #4
 80058c2:	4638      	mov	r0, r7
 80058c4:	f7ff ff62 	bl	800578c <__sfmoreglue>
 80058c8:	4604      	mov	r4, r0
 80058ca:	6030      	str	r0, [r6, #0]
 80058cc:	2800      	cmp	r0, #0
 80058ce:	d1d5      	bne.n	800587c <__sfp+0x24>
 80058d0:	f7ff ff78 	bl	80057c4 <__sfp_lock_release>
 80058d4:	230c      	movs	r3, #12
 80058d6:	603b      	str	r3, [r7, #0]
 80058d8:	e7ee      	b.n	80058b8 <__sfp+0x60>
 80058da:	bf00      	nop
 80058dc:	08006654 	.word	0x08006654
 80058e0:	ffff0001 	.word	0xffff0001

080058e4 <_fwalk_reent>:
 80058e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058e8:	4606      	mov	r6, r0
 80058ea:	4688      	mov	r8, r1
 80058ec:	2700      	movs	r7, #0
 80058ee:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80058f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058f6:	f1b9 0901 	subs.w	r9, r9, #1
 80058fa:	d505      	bpl.n	8005908 <_fwalk_reent+0x24>
 80058fc:	6824      	ldr	r4, [r4, #0]
 80058fe:	2c00      	cmp	r4, #0
 8005900:	d1f7      	bne.n	80058f2 <_fwalk_reent+0xe>
 8005902:	4638      	mov	r0, r7
 8005904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005908:	89ab      	ldrh	r3, [r5, #12]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d907      	bls.n	800591e <_fwalk_reent+0x3a>
 800590e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005912:	3301      	adds	r3, #1
 8005914:	d003      	beq.n	800591e <_fwalk_reent+0x3a>
 8005916:	4629      	mov	r1, r5
 8005918:	4630      	mov	r0, r6
 800591a:	47c0      	blx	r8
 800591c:	4307      	orrs	r7, r0
 800591e:	3568      	adds	r5, #104	; 0x68
 8005920:	e7e9      	b.n	80058f6 <_fwalk_reent+0x12>

08005922 <__retarget_lock_init_recursive>:
 8005922:	4770      	bx	lr

08005924 <__retarget_lock_acquire_recursive>:
 8005924:	4770      	bx	lr

08005926 <__retarget_lock_release_recursive>:
 8005926:	4770      	bx	lr

08005928 <__swhatbuf_r>:
 8005928:	b570      	push	{r4, r5, r6, lr}
 800592a:	460e      	mov	r6, r1
 800592c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005930:	4614      	mov	r4, r2
 8005932:	2900      	cmp	r1, #0
 8005934:	461d      	mov	r5, r3
 8005936:	b096      	sub	sp, #88	; 0x58
 8005938:	da07      	bge.n	800594a <__swhatbuf_r+0x22>
 800593a:	2300      	movs	r3, #0
 800593c:	602b      	str	r3, [r5, #0]
 800593e:	89b3      	ldrh	r3, [r6, #12]
 8005940:	061a      	lsls	r2, r3, #24
 8005942:	d410      	bmi.n	8005966 <__swhatbuf_r+0x3e>
 8005944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005948:	e00e      	b.n	8005968 <__swhatbuf_r+0x40>
 800594a:	466a      	mov	r2, sp
 800594c:	f000 fc5a 	bl	8006204 <_fstat_r>
 8005950:	2800      	cmp	r0, #0
 8005952:	dbf2      	blt.n	800593a <__swhatbuf_r+0x12>
 8005954:	9a01      	ldr	r2, [sp, #4]
 8005956:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800595a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800595e:	425a      	negs	r2, r3
 8005960:	415a      	adcs	r2, r3
 8005962:	602a      	str	r2, [r5, #0]
 8005964:	e7ee      	b.n	8005944 <__swhatbuf_r+0x1c>
 8005966:	2340      	movs	r3, #64	; 0x40
 8005968:	2000      	movs	r0, #0
 800596a:	6023      	str	r3, [r4, #0]
 800596c:	b016      	add	sp, #88	; 0x58
 800596e:	bd70      	pop	{r4, r5, r6, pc}

08005970 <__smakebuf_r>:
 8005970:	898b      	ldrh	r3, [r1, #12]
 8005972:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005974:	079d      	lsls	r5, r3, #30
 8005976:	4606      	mov	r6, r0
 8005978:	460c      	mov	r4, r1
 800597a:	d507      	bpl.n	800598c <__smakebuf_r+0x1c>
 800597c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005980:	6023      	str	r3, [r4, #0]
 8005982:	6123      	str	r3, [r4, #16]
 8005984:	2301      	movs	r3, #1
 8005986:	6163      	str	r3, [r4, #20]
 8005988:	b002      	add	sp, #8
 800598a:	bd70      	pop	{r4, r5, r6, pc}
 800598c:	466a      	mov	r2, sp
 800598e:	ab01      	add	r3, sp, #4
 8005990:	f7ff ffca 	bl	8005928 <__swhatbuf_r>
 8005994:	9900      	ldr	r1, [sp, #0]
 8005996:	4605      	mov	r5, r0
 8005998:	4630      	mov	r0, r6
 800599a:	f000 f875 	bl	8005a88 <_malloc_r>
 800599e:	b948      	cbnz	r0, 80059b4 <__smakebuf_r+0x44>
 80059a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059a4:	059a      	lsls	r2, r3, #22
 80059a6:	d4ef      	bmi.n	8005988 <__smakebuf_r+0x18>
 80059a8:	f023 0303 	bic.w	r3, r3, #3
 80059ac:	f043 0302 	orr.w	r3, r3, #2
 80059b0:	81a3      	strh	r3, [r4, #12]
 80059b2:	e7e3      	b.n	800597c <__smakebuf_r+0xc>
 80059b4:	4b0d      	ldr	r3, [pc, #52]	; (80059ec <__smakebuf_r+0x7c>)
 80059b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80059b8:	89a3      	ldrh	r3, [r4, #12]
 80059ba:	6020      	str	r0, [r4, #0]
 80059bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059c0:	81a3      	strh	r3, [r4, #12]
 80059c2:	9b00      	ldr	r3, [sp, #0]
 80059c4:	6120      	str	r0, [r4, #16]
 80059c6:	6163      	str	r3, [r4, #20]
 80059c8:	9b01      	ldr	r3, [sp, #4]
 80059ca:	b15b      	cbz	r3, 80059e4 <__smakebuf_r+0x74>
 80059cc:	4630      	mov	r0, r6
 80059ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059d2:	f000 fc29 	bl	8006228 <_isatty_r>
 80059d6:	b128      	cbz	r0, 80059e4 <__smakebuf_r+0x74>
 80059d8:	89a3      	ldrh	r3, [r4, #12]
 80059da:	f023 0303 	bic.w	r3, r3, #3
 80059de:	f043 0301 	orr.w	r3, r3, #1
 80059e2:	81a3      	strh	r3, [r4, #12]
 80059e4:	89a0      	ldrh	r0, [r4, #12]
 80059e6:	4305      	orrs	r5, r0
 80059e8:	81a5      	strh	r5, [r4, #12]
 80059ea:	e7cd      	b.n	8005988 <__smakebuf_r+0x18>
 80059ec:	08005781 	.word	0x08005781

080059f0 <_free_r>:
 80059f0:	b538      	push	{r3, r4, r5, lr}
 80059f2:	4605      	mov	r5, r0
 80059f4:	2900      	cmp	r1, #0
 80059f6:	d043      	beq.n	8005a80 <_free_r+0x90>
 80059f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059fc:	1f0c      	subs	r4, r1, #4
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	bfb8      	it	lt
 8005a02:	18e4      	addlt	r4, r4, r3
 8005a04:	f000 fc40 	bl	8006288 <__malloc_lock>
 8005a08:	4a1e      	ldr	r2, [pc, #120]	; (8005a84 <_free_r+0x94>)
 8005a0a:	6813      	ldr	r3, [r2, #0]
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	b933      	cbnz	r3, 8005a1e <_free_r+0x2e>
 8005a10:	6063      	str	r3, [r4, #4]
 8005a12:	6014      	str	r4, [r2, #0]
 8005a14:	4628      	mov	r0, r5
 8005a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a1a:	f000 bc3b 	b.w	8006294 <__malloc_unlock>
 8005a1e:	42a3      	cmp	r3, r4
 8005a20:	d90a      	bls.n	8005a38 <_free_r+0x48>
 8005a22:	6821      	ldr	r1, [r4, #0]
 8005a24:	1862      	adds	r2, r4, r1
 8005a26:	4293      	cmp	r3, r2
 8005a28:	bf01      	itttt	eq
 8005a2a:	681a      	ldreq	r2, [r3, #0]
 8005a2c:	685b      	ldreq	r3, [r3, #4]
 8005a2e:	1852      	addeq	r2, r2, r1
 8005a30:	6022      	streq	r2, [r4, #0]
 8005a32:	6063      	str	r3, [r4, #4]
 8005a34:	6004      	str	r4, [r0, #0]
 8005a36:	e7ed      	b.n	8005a14 <_free_r+0x24>
 8005a38:	461a      	mov	r2, r3
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	b10b      	cbz	r3, 8005a42 <_free_r+0x52>
 8005a3e:	42a3      	cmp	r3, r4
 8005a40:	d9fa      	bls.n	8005a38 <_free_r+0x48>
 8005a42:	6811      	ldr	r1, [r2, #0]
 8005a44:	1850      	adds	r0, r2, r1
 8005a46:	42a0      	cmp	r0, r4
 8005a48:	d10b      	bne.n	8005a62 <_free_r+0x72>
 8005a4a:	6820      	ldr	r0, [r4, #0]
 8005a4c:	4401      	add	r1, r0
 8005a4e:	1850      	adds	r0, r2, r1
 8005a50:	4283      	cmp	r3, r0
 8005a52:	6011      	str	r1, [r2, #0]
 8005a54:	d1de      	bne.n	8005a14 <_free_r+0x24>
 8005a56:	6818      	ldr	r0, [r3, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	4401      	add	r1, r0
 8005a5c:	6011      	str	r1, [r2, #0]
 8005a5e:	6053      	str	r3, [r2, #4]
 8005a60:	e7d8      	b.n	8005a14 <_free_r+0x24>
 8005a62:	d902      	bls.n	8005a6a <_free_r+0x7a>
 8005a64:	230c      	movs	r3, #12
 8005a66:	602b      	str	r3, [r5, #0]
 8005a68:	e7d4      	b.n	8005a14 <_free_r+0x24>
 8005a6a:	6820      	ldr	r0, [r4, #0]
 8005a6c:	1821      	adds	r1, r4, r0
 8005a6e:	428b      	cmp	r3, r1
 8005a70:	bf01      	itttt	eq
 8005a72:	6819      	ldreq	r1, [r3, #0]
 8005a74:	685b      	ldreq	r3, [r3, #4]
 8005a76:	1809      	addeq	r1, r1, r0
 8005a78:	6021      	streq	r1, [r4, #0]
 8005a7a:	6063      	str	r3, [r4, #4]
 8005a7c:	6054      	str	r4, [r2, #4]
 8005a7e:	e7c9      	b.n	8005a14 <_free_r+0x24>
 8005a80:	bd38      	pop	{r3, r4, r5, pc}
 8005a82:	bf00      	nop
 8005a84:	20000164 	.word	0x20000164

08005a88 <_malloc_r>:
 8005a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a8a:	1ccd      	adds	r5, r1, #3
 8005a8c:	f025 0503 	bic.w	r5, r5, #3
 8005a90:	3508      	adds	r5, #8
 8005a92:	2d0c      	cmp	r5, #12
 8005a94:	bf38      	it	cc
 8005a96:	250c      	movcc	r5, #12
 8005a98:	2d00      	cmp	r5, #0
 8005a9a:	4606      	mov	r6, r0
 8005a9c:	db01      	blt.n	8005aa2 <_malloc_r+0x1a>
 8005a9e:	42a9      	cmp	r1, r5
 8005aa0:	d903      	bls.n	8005aaa <_malloc_r+0x22>
 8005aa2:	230c      	movs	r3, #12
 8005aa4:	6033      	str	r3, [r6, #0]
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aaa:	f000 fbed 	bl	8006288 <__malloc_lock>
 8005aae:	4921      	ldr	r1, [pc, #132]	; (8005b34 <_malloc_r+0xac>)
 8005ab0:	680a      	ldr	r2, [r1, #0]
 8005ab2:	4614      	mov	r4, r2
 8005ab4:	b99c      	cbnz	r4, 8005ade <_malloc_r+0x56>
 8005ab6:	4f20      	ldr	r7, [pc, #128]	; (8005b38 <_malloc_r+0xb0>)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	b923      	cbnz	r3, 8005ac6 <_malloc_r+0x3e>
 8005abc:	4621      	mov	r1, r4
 8005abe:	4630      	mov	r0, r6
 8005ac0:	f000 fb2a 	bl	8006118 <_sbrk_r>
 8005ac4:	6038      	str	r0, [r7, #0]
 8005ac6:	4629      	mov	r1, r5
 8005ac8:	4630      	mov	r0, r6
 8005aca:	f000 fb25 	bl	8006118 <_sbrk_r>
 8005ace:	1c43      	adds	r3, r0, #1
 8005ad0:	d123      	bne.n	8005b1a <_malloc_r+0x92>
 8005ad2:	230c      	movs	r3, #12
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	6033      	str	r3, [r6, #0]
 8005ad8:	f000 fbdc 	bl	8006294 <__malloc_unlock>
 8005adc:	e7e3      	b.n	8005aa6 <_malloc_r+0x1e>
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	1b5b      	subs	r3, r3, r5
 8005ae2:	d417      	bmi.n	8005b14 <_malloc_r+0x8c>
 8005ae4:	2b0b      	cmp	r3, #11
 8005ae6:	d903      	bls.n	8005af0 <_malloc_r+0x68>
 8005ae8:	6023      	str	r3, [r4, #0]
 8005aea:	441c      	add	r4, r3
 8005aec:	6025      	str	r5, [r4, #0]
 8005aee:	e004      	b.n	8005afa <_malloc_r+0x72>
 8005af0:	6863      	ldr	r3, [r4, #4]
 8005af2:	42a2      	cmp	r2, r4
 8005af4:	bf0c      	ite	eq
 8005af6:	600b      	streq	r3, [r1, #0]
 8005af8:	6053      	strne	r3, [r2, #4]
 8005afa:	4630      	mov	r0, r6
 8005afc:	f000 fbca 	bl	8006294 <__malloc_unlock>
 8005b00:	f104 000b 	add.w	r0, r4, #11
 8005b04:	1d23      	adds	r3, r4, #4
 8005b06:	f020 0007 	bic.w	r0, r0, #7
 8005b0a:	1ac2      	subs	r2, r0, r3
 8005b0c:	d0cc      	beq.n	8005aa8 <_malloc_r+0x20>
 8005b0e:	1a1b      	subs	r3, r3, r0
 8005b10:	50a3      	str	r3, [r4, r2]
 8005b12:	e7c9      	b.n	8005aa8 <_malloc_r+0x20>
 8005b14:	4622      	mov	r2, r4
 8005b16:	6864      	ldr	r4, [r4, #4]
 8005b18:	e7cc      	b.n	8005ab4 <_malloc_r+0x2c>
 8005b1a:	1cc4      	adds	r4, r0, #3
 8005b1c:	f024 0403 	bic.w	r4, r4, #3
 8005b20:	42a0      	cmp	r0, r4
 8005b22:	d0e3      	beq.n	8005aec <_malloc_r+0x64>
 8005b24:	1a21      	subs	r1, r4, r0
 8005b26:	4630      	mov	r0, r6
 8005b28:	f000 faf6 	bl	8006118 <_sbrk_r>
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	d1dd      	bne.n	8005aec <_malloc_r+0x64>
 8005b30:	e7cf      	b.n	8005ad2 <_malloc_r+0x4a>
 8005b32:	bf00      	nop
 8005b34:	20000164 	.word	0x20000164
 8005b38:	20000168 	.word	0x20000168

08005b3c <__sfputc_r>:
 8005b3c:	6893      	ldr	r3, [r2, #8]
 8005b3e:	b410      	push	{r4}
 8005b40:	3b01      	subs	r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	6093      	str	r3, [r2, #8]
 8005b46:	da07      	bge.n	8005b58 <__sfputc_r+0x1c>
 8005b48:	6994      	ldr	r4, [r2, #24]
 8005b4a:	42a3      	cmp	r3, r4
 8005b4c:	db01      	blt.n	8005b52 <__sfputc_r+0x16>
 8005b4e:	290a      	cmp	r1, #10
 8005b50:	d102      	bne.n	8005b58 <__sfputc_r+0x1c>
 8005b52:	bc10      	pop	{r4}
 8005b54:	f7ff bc6e 	b.w	8005434 <__swbuf_r>
 8005b58:	6813      	ldr	r3, [r2, #0]
 8005b5a:	1c58      	adds	r0, r3, #1
 8005b5c:	6010      	str	r0, [r2, #0]
 8005b5e:	7019      	strb	r1, [r3, #0]
 8005b60:	4608      	mov	r0, r1
 8005b62:	bc10      	pop	{r4}
 8005b64:	4770      	bx	lr

08005b66 <__sfputs_r>:
 8005b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b68:	4606      	mov	r6, r0
 8005b6a:	460f      	mov	r7, r1
 8005b6c:	4614      	mov	r4, r2
 8005b6e:	18d5      	adds	r5, r2, r3
 8005b70:	42ac      	cmp	r4, r5
 8005b72:	d101      	bne.n	8005b78 <__sfputs_r+0x12>
 8005b74:	2000      	movs	r0, #0
 8005b76:	e007      	b.n	8005b88 <__sfputs_r+0x22>
 8005b78:	463a      	mov	r2, r7
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b80:	f7ff ffdc 	bl	8005b3c <__sfputc_r>
 8005b84:	1c43      	adds	r3, r0, #1
 8005b86:	d1f3      	bne.n	8005b70 <__sfputs_r+0xa>
 8005b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b8c <_vfiprintf_r>:
 8005b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b90:	460d      	mov	r5, r1
 8005b92:	4614      	mov	r4, r2
 8005b94:	4698      	mov	r8, r3
 8005b96:	4606      	mov	r6, r0
 8005b98:	b09d      	sub	sp, #116	; 0x74
 8005b9a:	b118      	cbz	r0, 8005ba4 <_vfiprintf_r+0x18>
 8005b9c:	6983      	ldr	r3, [r0, #24]
 8005b9e:	b90b      	cbnz	r3, 8005ba4 <_vfiprintf_r+0x18>
 8005ba0:	f7ff fe22 	bl	80057e8 <__sinit>
 8005ba4:	4b89      	ldr	r3, [pc, #548]	; (8005dcc <_vfiprintf_r+0x240>)
 8005ba6:	429d      	cmp	r5, r3
 8005ba8:	d11b      	bne.n	8005be2 <_vfiprintf_r+0x56>
 8005baa:	6875      	ldr	r5, [r6, #4]
 8005bac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bae:	07d9      	lsls	r1, r3, #31
 8005bb0:	d405      	bmi.n	8005bbe <_vfiprintf_r+0x32>
 8005bb2:	89ab      	ldrh	r3, [r5, #12]
 8005bb4:	059a      	lsls	r2, r3, #22
 8005bb6:	d402      	bmi.n	8005bbe <_vfiprintf_r+0x32>
 8005bb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bba:	f7ff feb3 	bl	8005924 <__retarget_lock_acquire_recursive>
 8005bbe:	89ab      	ldrh	r3, [r5, #12]
 8005bc0:	071b      	lsls	r3, r3, #28
 8005bc2:	d501      	bpl.n	8005bc8 <_vfiprintf_r+0x3c>
 8005bc4:	692b      	ldr	r3, [r5, #16]
 8005bc6:	b9eb      	cbnz	r3, 8005c04 <_vfiprintf_r+0x78>
 8005bc8:	4629      	mov	r1, r5
 8005bca:	4630      	mov	r0, r6
 8005bcc:	f7ff fc84 	bl	80054d8 <__swsetup_r>
 8005bd0:	b1c0      	cbz	r0, 8005c04 <_vfiprintf_r+0x78>
 8005bd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bd4:	07dc      	lsls	r4, r3, #31
 8005bd6:	d50e      	bpl.n	8005bf6 <_vfiprintf_r+0x6a>
 8005bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bdc:	b01d      	add	sp, #116	; 0x74
 8005bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be2:	4b7b      	ldr	r3, [pc, #492]	; (8005dd0 <_vfiprintf_r+0x244>)
 8005be4:	429d      	cmp	r5, r3
 8005be6:	d101      	bne.n	8005bec <_vfiprintf_r+0x60>
 8005be8:	68b5      	ldr	r5, [r6, #8]
 8005bea:	e7df      	b.n	8005bac <_vfiprintf_r+0x20>
 8005bec:	4b79      	ldr	r3, [pc, #484]	; (8005dd4 <_vfiprintf_r+0x248>)
 8005bee:	429d      	cmp	r5, r3
 8005bf0:	bf08      	it	eq
 8005bf2:	68f5      	ldreq	r5, [r6, #12]
 8005bf4:	e7da      	b.n	8005bac <_vfiprintf_r+0x20>
 8005bf6:	89ab      	ldrh	r3, [r5, #12]
 8005bf8:	0598      	lsls	r0, r3, #22
 8005bfa:	d4ed      	bmi.n	8005bd8 <_vfiprintf_r+0x4c>
 8005bfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bfe:	f7ff fe92 	bl	8005926 <__retarget_lock_release_recursive>
 8005c02:	e7e9      	b.n	8005bd8 <_vfiprintf_r+0x4c>
 8005c04:	2300      	movs	r3, #0
 8005c06:	9309      	str	r3, [sp, #36]	; 0x24
 8005c08:	2320      	movs	r3, #32
 8005c0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c0e:	2330      	movs	r3, #48	; 0x30
 8005c10:	f04f 0901 	mov.w	r9, #1
 8005c14:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c18:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005dd8 <_vfiprintf_r+0x24c>
 8005c1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c20:	4623      	mov	r3, r4
 8005c22:	469a      	mov	sl, r3
 8005c24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c28:	b10a      	cbz	r2, 8005c2e <_vfiprintf_r+0xa2>
 8005c2a:	2a25      	cmp	r2, #37	; 0x25
 8005c2c:	d1f9      	bne.n	8005c22 <_vfiprintf_r+0x96>
 8005c2e:	ebba 0b04 	subs.w	fp, sl, r4
 8005c32:	d00b      	beq.n	8005c4c <_vfiprintf_r+0xc0>
 8005c34:	465b      	mov	r3, fp
 8005c36:	4622      	mov	r2, r4
 8005c38:	4629      	mov	r1, r5
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	f7ff ff93 	bl	8005b66 <__sfputs_r>
 8005c40:	3001      	adds	r0, #1
 8005c42:	f000 80aa 	beq.w	8005d9a <_vfiprintf_r+0x20e>
 8005c46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c48:	445a      	add	r2, fp
 8005c4a:	9209      	str	r2, [sp, #36]	; 0x24
 8005c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 80a2 	beq.w	8005d9a <_vfiprintf_r+0x20e>
 8005c56:	2300      	movs	r3, #0
 8005c58:	f04f 32ff 	mov.w	r2, #4294967295
 8005c5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c60:	f10a 0a01 	add.w	sl, sl, #1
 8005c64:	9304      	str	r3, [sp, #16]
 8005c66:	9307      	str	r3, [sp, #28]
 8005c68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c6c:	931a      	str	r3, [sp, #104]	; 0x68
 8005c6e:	4654      	mov	r4, sl
 8005c70:	2205      	movs	r2, #5
 8005c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c76:	4858      	ldr	r0, [pc, #352]	; (8005dd8 <_vfiprintf_r+0x24c>)
 8005c78:	f000 faf8 	bl	800626c <memchr>
 8005c7c:	9a04      	ldr	r2, [sp, #16]
 8005c7e:	b9d8      	cbnz	r0, 8005cb8 <_vfiprintf_r+0x12c>
 8005c80:	06d1      	lsls	r1, r2, #27
 8005c82:	bf44      	itt	mi
 8005c84:	2320      	movmi	r3, #32
 8005c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c8a:	0713      	lsls	r3, r2, #28
 8005c8c:	bf44      	itt	mi
 8005c8e:	232b      	movmi	r3, #43	; 0x2b
 8005c90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c94:	f89a 3000 	ldrb.w	r3, [sl]
 8005c98:	2b2a      	cmp	r3, #42	; 0x2a
 8005c9a:	d015      	beq.n	8005cc8 <_vfiprintf_r+0x13c>
 8005c9c:	4654      	mov	r4, sl
 8005c9e:	2000      	movs	r0, #0
 8005ca0:	f04f 0c0a 	mov.w	ip, #10
 8005ca4:	9a07      	ldr	r2, [sp, #28]
 8005ca6:	4621      	mov	r1, r4
 8005ca8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cac:	3b30      	subs	r3, #48	; 0x30
 8005cae:	2b09      	cmp	r3, #9
 8005cb0:	d94e      	bls.n	8005d50 <_vfiprintf_r+0x1c4>
 8005cb2:	b1b0      	cbz	r0, 8005ce2 <_vfiprintf_r+0x156>
 8005cb4:	9207      	str	r2, [sp, #28]
 8005cb6:	e014      	b.n	8005ce2 <_vfiprintf_r+0x156>
 8005cb8:	eba0 0308 	sub.w	r3, r0, r8
 8005cbc:	fa09 f303 	lsl.w	r3, r9, r3
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	46a2      	mov	sl, r4
 8005cc4:	9304      	str	r3, [sp, #16]
 8005cc6:	e7d2      	b.n	8005c6e <_vfiprintf_r+0xe2>
 8005cc8:	9b03      	ldr	r3, [sp, #12]
 8005cca:	1d19      	adds	r1, r3, #4
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	9103      	str	r1, [sp, #12]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	bfbb      	ittet	lt
 8005cd4:	425b      	neglt	r3, r3
 8005cd6:	f042 0202 	orrlt.w	r2, r2, #2
 8005cda:	9307      	strge	r3, [sp, #28]
 8005cdc:	9307      	strlt	r3, [sp, #28]
 8005cde:	bfb8      	it	lt
 8005ce0:	9204      	strlt	r2, [sp, #16]
 8005ce2:	7823      	ldrb	r3, [r4, #0]
 8005ce4:	2b2e      	cmp	r3, #46	; 0x2e
 8005ce6:	d10c      	bne.n	8005d02 <_vfiprintf_r+0x176>
 8005ce8:	7863      	ldrb	r3, [r4, #1]
 8005cea:	2b2a      	cmp	r3, #42	; 0x2a
 8005cec:	d135      	bne.n	8005d5a <_vfiprintf_r+0x1ce>
 8005cee:	9b03      	ldr	r3, [sp, #12]
 8005cf0:	3402      	adds	r4, #2
 8005cf2:	1d1a      	adds	r2, r3, #4
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	9203      	str	r2, [sp, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	bfb8      	it	lt
 8005cfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d00:	9305      	str	r3, [sp, #20]
 8005d02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005de8 <_vfiprintf_r+0x25c>
 8005d06:	2203      	movs	r2, #3
 8005d08:	4650      	mov	r0, sl
 8005d0a:	7821      	ldrb	r1, [r4, #0]
 8005d0c:	f000 faae 	bl	800626c <memchr>
 8005d10:	b140      	cbz	r0, 8005d24 <_vfiprintf_r+0x198>
 8005d12:	2340      	movs	r3, #64	; 0x40
 8005d14:	eba0 000a 	sub.w	r0, r0, sl
 8005d18:	fa03 f000 	lsl.w	r0, r3, r0
 8005d1c:	9b04      	ldr	r3, [sp, #16]
 8005d1e:	3401      	adds	r4, #1
 8005d20:	4303      	orrs	r3, r0
 8005d22:	9304      	str	r3, [sp, #16]
 8005d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d28:	2206      	movs	r2, #6
 8005d2a:	482c      	ldr	r0, [pc, #176]	; (8005ddc <_vfiprintf_r+0x250>)
 8005d2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d30:	f000 fa9c 	bl	800626c <memchr>
 8005d34:	2800      	cmp	r0, #0
 8005d36:	d03f      	beq.n	8005db8 <_vfiprintf_r+0x22c>
 8005d38:	4b29      	ldr	r3, [pc, #164]	; (8005de0 <_vfiprintf_r+0x254>)
 8005d3a:	bb1b      	cbnz	r3, 8005d84 <_vfiprintf_r+0x1f8>
 8005d3c:	9b03      	ldr	r3, [sp, #12]
 8005d3e:	3307      	adds	r3, #7
 8005d40:	f023 0307 	bic.w	r3, r3, #7
 8005d44:	3308      	adds	r3, #8
 8005d46:	9303      	str	r3, [sp, #12]
 8005d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d4a:	443b      	add	r3, r7
 8005d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d4e:	e767      	b.n	8005c20 <_vfiprintf_r+0x94>
 8005d50:	460c      	mov	r4, r1
 8005d52:	2001      	movs	r0, #1
 8005d54:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d58:	e7a5      	b.n	8005ca6 <_vfiprintf_r+0x11a>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f04f 0c0a 	mov.w	ip, #10
 8005d60:	4619      	mov	r1, r3
 8005d62:	3401      	adds	r4, #1
 8005d64:	9305      	str	r3, [sp, #20]
 8005d66:	4620      	mov	r0, r4
 8005d68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d6c:	3a30      	subs	r2, #48	; 0x30
 8005d6e:	2a09      	cmp	r2, #9
 8005d70:	d903      	bls.n	8005d7a <_vfiprintf_r+0x1ee>
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0c5      	beq.n	8005d02 <_vfiprintf_r+0x176>
 8005d76:	9105      	str	r1, [sp, #20]
 8005d78:	e7c3      	b.n	8005d02 <_vfiprintf_r+0x176>
 8005d7a:	4604      	mov	r4, r0
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d82:	e7f0      	b.n	8005d66 <_vfiprintf_r+0x1da>
 8005d84:	ab03      	add	r3, sp, #12
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	462a      	mov	r2, r5
 8005d8a:	4630      	mov	r0, r6
 8005d8c:	4b15      	ldr	r3, [pc, #84]	; (8005de4 <_vfiprintf_r+0x258>)
 8005d8e:	a904      	add	r1, sp, #16
 8005d90:	f3af 8000 	nop.w
 8005d94:	4607      	mov	r7, r0
 8005d96:	1c78      	adds	r0, r7, #1
 8005d98:	d1d6      	bne.n	8005d48 <_vfiprintf_r+0x1bc>
 8005d9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d9c:	07d9      	lsls	r1, r3, #31
 8005d9e:	d405      	bmi.n	8005dac <_vfiprintf_r+0x220>
 8005da0:	89ab      	ldrh	r3, [r5, #12]
 8005da2:	059a      	lsls	r2, r3, #22
 8005da4:	d402      	bmi.n	8005dac <_vfiprintf_r+0x220>
 8005da6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005da8:	f7ff fdbd 	bl	8005926 <__retarget_lock_release_recursive>
 8005dac:	89ab      	ldrh	r3, [r5, #12]
 8005dae:	065b      	lsls	r3, r3, #25
 8005db0:	f53f af12 	bmi.w	8005bd8 <_vfiprintf_r+0x4c>
 8005db4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005db6:	e711      	b.n	8005bdc <_vfiprintf_r+0x50>
 8005db8:	ab03      	add	r3, sp, #12
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	462a      	mov	r2, r5
 8005dbe:	4630      	mov	r0, r6
 8005dc0:	4b08      	ldr	r3, [pc, #32]	; (8005de4 <_vfiprintf_r+0x258>)
 8005dc2:	a904      	add	r1, sp, #16
 8005dc4:	f000 f882 	bl	8005ecc <_printf_i>
 8005dc8:	e7e4      	b.n	8005d94 <_vfiprintf_r+0x208>
 8005dca:	bf00      	nop
 8005dcc:	08006678 	.word	0x08006678
 8005dd0:	08006698 	.word	0x08006698
 8005dd4:	08006658 	.word	0x08006658
 8005dd8:	080066b8 	.word	0x080066b8
 8005ddc:	080066c2 	.word	0x080066c2
 8005de0:	00000000 	.word	0x00000000
 8005de4:	08005b67 	.word	0x08005b67
 8005de8:	080066be 	.word	0x080066be

08005dec <_printf_common>:
 8005dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005df0:	4616      	mov	r6, r2
 8005df2:	4699      	mov	r9, r3
 8005df4:	688a      	ldr	r2, [r1, #8]
 8005df6:	690b      	ldr	r3, [r1, #16]
 8005df8:	4607      	mov	r7, r0
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	bfb8      	it	lt
 8005dfe:	4613      	movlt	r3, r2
 8005e00:	6033      	str	r3, [r6, #0]
 8005e02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e06:	460c      	mov	r4, r1
 8005e08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e0c:	b10a      	cbz	r2, 8005e12 <_printf_common+0x26>
 8005e0e:	3301      	adds	r3, #1
 8005e10:	6033      	str	r3, [r6, #0]
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	0699      	lsls	r1, r3, #26
 8005e16:	bf42      	ittt	mi
 8005e18:	6833      	ldrmi	r3, [r6, #0]
 8005e1a:	3302      	addmi	r3, #2
 8005e1c:	6033      	strmi	r3, [r6, #0]
 8005e1e:	6825      	ldr	r5, [r4, #0]
 8005e20:	f015 0506 	ands.w	r5, r5, #6
 8005e24:	d106      	bne.n	8005e34 <_printf_common+0x48>
 8005e26:	f104 0a19 	add.w	sl, r4, #25
 8005e2a:	68e3      	ldr	r3, [r4, #12]
 8005e2c:	6832      	ldr	r2, [r6, #0]
 8005e2e:	1a9b      	subs	r3, r3, r2
 8005e30:	42ab      	cmp	r3, r5
 8005e32:	dc28      	bgt.n	8005e86 <_printf_common+0x9a>
 8005e34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e38:	1e13      	subs	r3, r2, #0
 8005e3a:	6822      	ldr	r2, [r4, #0]
 8005e3c:	bf18      	it	ne
 8005e3e:	2301      	movne	r3, #1
 8005e40:	0692      	lsls	r2, r2, #26
 8005e42:	d42d      	bmi.n	8005ea0 <_printf_common+0xb4>
 8005e44:	4649      	mov	r1, r9
 8005e46:	4638      	mov	r0, r7
 8005e48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e4c:	47c0      	blx	r8
 8005e4e:	3001      	adds	r0, #1
 8005e50:	d020      	beq.n	8005e94 <_printf_common+0xa8>
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	68e5      	ldr	r5, [r4, #12]
 8005e56:	f003 0306 	and.w	r3, r3, #6
 8005e5a:	2b04      	cmp	r3, #4
 8005e5c:	bf18      	it	ne
 8005e5e:	2500      	movne	r5, #0
 8005e60:	6832      	ldr	r2, [r6, #0]
 8005e62:	f04f 0600 	mov.w	r6, #0
 8005e66:	68a3      	ldr	r3, [r4, #8]
 8005e68:	bf08      	it	eq
 8005e6a:	1aad      	subeq	r5, r5, r2
 8005e6c:	6922      	ldr	r2, [r4, #16]
 8005e6e:	bf08      	it	eq
 8005e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e74:	4293      	cmp	r3, r2
 8005e76:	bfc4      	itt	gt
 8005e78:	1a9b      	subgt	r3, r3, r2
 8005e7a:	18ed      	addgt	r5, r5, r3
 8005e7c:	341a      	adds	r4, #26
 8005e7e:	42b5      	cmp	r5, r6
 8005e80:	d11a      	bne.n	8005eb8 <_printf_common+0xcc>
 8005e82:	2000      	movs	r0, #0
 8005e84:	e008      	b.n	8005e98 <_printf_common+0xac>
 8005e86:	2301      	movs	r3, #1
 8005e88:	4652      	mov	r2, sl
 8005e8a:	4649      	mov	r1, r9
 8005e8c:	4638      	mov	r0, r7
 8005e8e:	47c0      	blx	r8
 8005e90:	3001      	adds	r0, #1
 8005e92:	d103      	bne.n	8005e9c <_printf_common+0xb0>
 8005e94:	f04f 30ff 	mov.w	r0, #4294967295
 8005e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e9c:	3501      	adds	r5, #1
 8005e9e:	e7c4      	b.n	8005e2a <_printf_common+0x3e>
 8005ea0:	2030      	movs	r0, #48	; 0x30
 8005ea2:	18e1      	adds	r1, r4, r3
 8005ea4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ea8:	1c5a      	adds	r2, r3, #1
 8005eaa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005eae:	4422      	add	r2, r4
 8005eb0:	3302      	adds	r3, #2
 8005eb2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005eb6:	e7c5      	b.n	8005e44 <_printf_common+0x58>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	4622      	mov	r2, r4
 8005ebc:	4649      	mov	r1, r9
 8005ebe:	4638      	mov	r0, r7
 8005ec0:	47c0      	blx	r8
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	d0e6      	beq.n	8005e94 <_printf_common+0xa8>
 8005ec6:	3601      	adds	r6, #1
 8005ec8:	e7d9      	b.n	8005e7e <_printf_common+0x92>
	...

08005ecc <_printf_i>:
 8005ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed0:	460c      	mov	r4, r1
 8005ed2:	7e27      	ldrb	r7, [r4, #24]
 8005ed4:	4691      	mov	r9, r2
 8005ed6:	2f78      	cmp	r7, #120	; 0x78
 8005ed8:	4680      	mov	r8, r0
 8005eda:	469a      	mov	sl, r3
 8005edc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005ede:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ee2:	d807      	bhi.n	8005ef4 <_printf_i+0x28>
 8005ee4:	2f62      	cmp	r7, #98	; 0x62
 8005ee6:	d80a      	bhi.n	8005efe <_printf_i+0x32>
 8005ee8:	2f00      	cmp	r7, #0
 8005eea:	f000 80d9 	beq.w	80060a0 <_printf_i+0x1d4>
 8005eee:	2f58      	cmp	r7, #88	; 0x58
 8005ef0:	f000 80a4 	beq.w	800603c <_printf_i+0x170>
 8005ef4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ef8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005efc:	e03a      	b.n	8005f74 <_printf_i+0xa8>
 8005efe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f02:	2b15      	cmp	r3, #21
 8005f04:	d8f6      	bhi.n	8005ef4 <_printf_i+0x28>
 8005f06:	a001      	add	r0, pc, #4	; (adr r0, 8005f0c <_printf_i+0x40>)
 8005f08:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005f0c:	08005f65 	.word	0x08005f65
 8005f10:	08005f79 	.word	0x08005f79
 8005f14:	08005ef5 	.word	0x08005ef5
 8005f18:	08005ef5 	.word	0x08005ef5
 8005f1c:	08005ef5 	.word	0x08005ef5
 8005f20:	08005ef5 	.word	0x08005ef5
 8005f24:	08005f79 	.word	0x08005f79
 8005f28:	08005ef5 	.word	0x08005ef5
 8005f2c:	08005ef5 	.word	0x08005ef5
 8005f30:	08005ef5 	.word	0x08005ef5
 8005f34:	08005ef5 	.word	0x08005ef5
 8005f38:	08006087 	.word	0x08006087
 8005f3c:	08005fa9 	.word	0x08005fa9
 8005f40:	08006069 	.word	0x08006069
 8005f44:	08005ef5 	.word	0x08005ef5
 8005f48:	08005ef5 	.word	0x08005ef5
 8005f4c:	080060a9 	.word	0x080060a9
 8005f50:	08005ef5 	.word	0x08005ef5
 8005f54:	08005fa9 	.word	0x08005fa9
 8005f58:	08005ef5 	.word	0x08005ef5
 8005f5c:	08005ef5 	.word	0x08005ef5
 8005f60:	08006071 	.word	0x08006071
 8005f64:	680b      	ldr	r3, [r1, #0]
 8005f66:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f6a:	1d1a      	adds	r2, r3, #4
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	600a      	str	r2, [r1, #0]
 8005f70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f74:	2301      	movs	r3, #1
 8005f76:	e0a4      	b.n	80060c2 <_printf_i+0x1f6>
 8005f78:	6825      	ldr	r5, [r4, #0]
 8005f7a:	6808      	ldr	r0, [r1, #0]
 8005f7c:	062e      	lsls	r6, r5, #24
 8005f7e:	f100 0304 	add.w	r3, r0, #4
 8005f82:	d50a      	bpl.n	8005f9a <_printf_i+0xce>
 8005f84:	6805      	ldr	r5, [r0, #0]
 8005f86:	600b      	str	r3, [r1, #0]
 8005f88:	2d00      	cmp	r5, #0
 8005f8a:	da03      	bge.n	8005f94 <_printf_i+0xc8>
 8005f8c:	232d      	movs	r3, #45	; 0x2d
 8005f8e:	426d      	negs	r5, r5
 8005f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f94:	230a      	movs	r3, #10
 8005f96:	485e      	ldr	r0, [pc, #376]	; (8006110 <_printf_i+0x244>)
 8005f98:	e019      	b.n	8005fce <_printf_i+0x102>
 8005f9a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005f9e:	6805      	ldr	r5, [r0, #0]
 8005fa0:	600b      	str	r3, [r1, #0]
 8005fa2:	bf18      	it	ne
 8005fa4:	b22d      	sxthne	r5, r5
 8005fa6:	e7ef      	b.n	8005f88 <_printf_i+0xbc>
 8005fa8:	680b      	ldr	r3, [r1, #0]
 8005faa:	6825      	ldr	r5, [r4, #0]
 8005fac:	1d18      	adds	r0, r3, #4
 8005fae:	6008      	str	r0, [r1, #0]
 8005fb0:	0628      	lsls	r0, r5, #24
 8005fb2:	d501      	bpl.n	8005fb8 <_printf_i+0xec>
 8005fb4:	681d      	ldr	r5, [r3, #0]
 8005fb6:	e002      	b.n	8005fbe <_printf_i+0xf2>
 8005fb8:	0669      	lsls	r1, r5, #25
 8005fba:	d5fb      	bpl.n	8005fb4 <_printf_i+0xe8>
 8005fbc:	881d      	ldrh	r5, [r3, #0]
 8005fbe:	2f6f      	cmp	r7, #111	; 0x6f
 8005fc0:	bf0c      	ite	eq
 8005fc2:	2308      	moveq	r3, #8
 8005fc4:	230a      	movne	r3, #10
 8005fc6:	4852      	ldr	r0, [pc, #328]	; (8006110 <_printf_i+0x244>)
 8005fc8:	2100      	movs	r1, #0
 8005fca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fce:	6866      	ldr	r6, [r4, #4]
 8005fd0:	2e00      	cmp	r6, #0
 8005fd2:	bfa8      	it	ge
 8005fd4:	6821      	ldrge	r1, [r4, #0]
 8005fd6:	60a6      	str	r6, [r4, #8]
 8005fd8:	bfa4      	itt	ge
 8005fda:	f021 0104 	bicge.w	r1, r1, #4
 8005fde:	6021      	strge	r1, [r4, #0]
 8005fe0:	b90d      	cbnz	r5, 8005fe6 <_printf_i+0x11a>
 8005fe2:	2e00      	cmp	r6, #0
 8005fe4:	d04d      	beq.n	8006082 <_printf_i+0x1b6>
 8005fe6:	4616      	mov	r6, r2
 8005fe8:	fbb5 f1f3 	udiv	r1, r5, r3
 8005fec:	fb03 5711 	mls	r7, r3, r1, r5
 8005ff0:	5dc7      	ldrb	r7, [r0, r7]
 8005ff2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ff6:	462f      	mov	r7, r5
 8005ff8:	42bb      	cmp	r3, r7
 8005ffa:	460d      	mov	r5, r1
 8005ffc:	d9f4      	bls.n	8005fe8 <_printf_i+0x11c>
 8005ffe:	2b08      	cmp	r3, #8
 8006000:	d10b      	bne.n	800601a <_printf_i+0x14e>
 8006002:	6823      	ldr	r3, [r4, #0]
 8006004:	07df      	lsls	r7, r3, #31
 8006006:	d508      	bpl.n	800601a <_printf_i+0x14e>
 8006008:	6923      	ldr	r3, [r4, #16]
 800600a:	6861      	ldr	r1, [r4, #4]
 800600c:	4299      	cmp	r1, r3
 800600e:	bfde      	ittt	le
 8006010:	2330      	movle	r3, #48	; 0x30
 8006012:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006016:	f106 36ff 	addle.w	r6, r6, #4294967295
 800601a:	1b92      	subs	r2, r2, r6
 800601c:	6122      	str	r2, [r4, #16]
 800601e:	464b      	mov	r3, r9
 8006020:	4621      	mov	r1, r4
 8006022:	4640      	mov	r0, r8
 8006024:	f8cd a000 	str.w	sl, [sp]
 8006028:	aa03      	add	r2, sp, #12
 800602a:	f7ff fedf 	bl	8005dec <_printf_common>
 800602e:	3001      	adds	r0, #1
 8006030:	d14c      	bne.n	80060cc <_printf_i+0x200>
 8006032:	f04f 30ff 	mov.w	r0, #4294967295
 8006036:	b004      	add	sp, #16
 8006038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800603c:	4834      	ldr	r0, [pc, #208]	; (8006110 <_printf_i+0x244>)
 800603e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006042:	680e      	ldr	r6, [r1, #0]
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	f856 5b04 	ldr.w	r5, [r6], #4
 800604a:	061f      	lsls	r7, r3, #24
 800604c:	600e      	str	r6, [r1, #0]
 800604e:	d514      	bpl.n	800607a <_printf_i+0x1ae>
 8006050:	07d9      	lsls	r1, r3, #31
 8006052:	bf44      	itt	mi
 8006054:	f043 0320 	orrmi.w	r3, r3, #32
 8006058:	6023      	strmi	r3, [r4, #0]
 800605a:	b91d      	cbnz	r5, 8006064 <_printf_i+0x198>
 800605c:	6823      	ldr	r3, [r4, #0]
 800605e:	f023 0320 	bic.w	r3, r3, #32
 8006062:	6023      	str	r3, [r4, #0]
 8006064:	2310      	movs	r3, #16
 8006066:	e7af      	b.n	8005fc8 <_printf_i+0xfc>
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	f043 0320 	orr.w	r3, r3, #32
 800606e:	6023      	str	r3, [r4, #0]
 8006070:	2378      	movs	r3, #120	; 0x78
 8006072:	4828      	ldr	r0, [pc, #160]	; (8006114 <_printf_i+0x248>)
 8006074:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006078:	e7e3      	b.n	8006042 <_printf_i+0x176>
 800607a:	065e      	lsls	r6, r3, #25
 800607c:	bf48      	it	mi
 800607e:	b2ad      	uxthmi	r5, r5
 8006080:	e7e6      	b.n	8006050 <_printf_i+0x184>
 8006082:	4616      	mov	r6, r2
 8006084:	e7bb      	b.n	8005ffe <_printf_i+0x132>
 8006086:	680b      	ldr	r3, [r1, #0]
 8006088:	6826      	ldr	r6, [r4, #0]
 800608a:	1d1d      	adds	r5, r3, #4
 800608c:	6960      	ldr	r0, [r4, #20]
 800608e:	600d      	str	r5, [r1, #0]
 8006090:	0635      	lsls	r5, r6, #24
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	d501      	bpl.n	800609a <_printf_i+0x1ce>
 8006096:	6018      	str	r0, [r3, #0]
 8006098:	e002      	b.n	80060a0 <_printf_i+0x1d4>
 800609a:	0671      	lsls	r1, r6, #25
 800609c:	d5fb      	bpl.n	8006096 <_printf_i+0x1ca>
 800609e:	8018      	strh	r0, [r3, #0]
 80060a0:	2300      	movs	r3, #0
 80060a2:	4616      	mov	r6, r2
 80060a4:	6123      	str	r3, [r4, #16]
 80060a6:	e7ba      	b.n	800601e <_printf_i+0x152>
 80060a8:	680b      	ldr	r3, [r1, #0]
 80060aa:	1d1a      	adds	r2, r3, #4
 80060ac:	600a      	str	r2, [r1, #0]
 80060ae:	681e      	ldr	r6, [r3, #0]
 80060b0:	2100      	movs	r1, #0
 80060b2:	4630      	mov	r0, r6
 80060b4:	6862      	ldr	r2, [r4, #4]
 80060b6:	f000 f8d9 	bl	800626c <memchr>
 80060ba:	b108      	cbz	r0, 80060c0 <_printf_i+0x1f4>
 80060bc:	1b80      	subs	r0, r0, r6
 80060be:	6060      	str	r0, [r4, #4]
 80060c0:	6863      	ldr	r3, [r4, #4]
 80060c2:	6123      	str	r3, [r4, #16]
 80060c4:	2300      	movs	r3, #0
 80060c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060ca:	e7a8      	b.n	800601e <_printf_i+0x152>
 80060cc:	4632      	mov	r2, r6
 80060ce:	4649      	mov	r1, r9
 80060d0:	4640      	mov	r0, r8
 80060d2:	6923      	ldr	r3, [r4, #16]
 80060d4:	47d0      	blx	sl
 80060d6:	3001      	adds	r0, #1
 80060d8:	d0ab      	beq.n	8006032 <_printf_i+0x166>
 80060da:	6823      	ldr	r3, [r4, #0]
 80060dc:	079b      	lsls	r3, r3, #30
 80060de:	d413      	bmi.n	8006108 <_printf_i+0x23c>
 80060e0:	68e0      	ldr	r0, [r4, #12]
 80060e2:	9b03      	ldr	r3, [sp, #12]
 80060e4:	4298      	cmp	r0, r3
 80060e6:	bfb8      	it	lt
 80060e8:	4618      	movlt	r0, r3
 80060ea:	e7a4      	b.n	8006036 <_printf_i+0x16a>
 80060ec:	2301      	movs	r3, #1
 80060ee:	4632      	mov	r2, r6
 80060f0:	4649      	mov	r1, r9
 80060f2:	4640      	mov	r0, r8
 80060f4:	47d0      	blx	sl
 80060f6:	3001      	adds	r0, #1
 80060f8:	d09b      	beq.n	8006032 <_printf_i+0x166>
 80060fa:	3501      	adds	r5, #1
 80060fc:	68e3      	ldr	r3, [r4, #12]
 80060fe:	9903      	ldr	r1, [sp, #12]
 8006100:	1a5b      	subs	r3, r3, r1
 8006102:	42ab      	cmp	r3, r5
 8006104:	dcf2      	bgt.n	80060ec <_printf_i+0x220>
 8006106:	e7eb      	b.n	80060e0 <_printf_i+0x214>
 8006108:	2500      	movs	r5, #0
 800610a:	f104 0619 	add.w	r6, r4, #25
 800610e:	e7f5      	b.n	80060fc <_printf_i+0x230>
 8006110:	080066c9 	.word	0x080066c9
 8006114:	080066da 	.word	0x080066da

08006118 <_sbrk_r>:
 8006118:	b538      	push	{r3, r4, r5, lr}
 800611a:	2300      	movs	r3, #0
 800611c:	4d05      	ldr	r5, [pc, #20]	; (8006134 <_sbrk_r+0x1c>)
 800611e:	4604      	mov	r4, r0
 8006120:	4608      	mov	r0, r1
 8006122:	602b      	str	r3, [r5, #0]
 8006124:	f7fc fd32 	bl	8002b8c <_sbrk>
 8006128:	1c43      	adds	r3, r0, #1
 800612a:	d102      	bne.n	8006132 <_sbrk_r+0x1a>
 800612c:	682b      	ldr	r3, [r5, #0]
 800612e:	b103      	cbz	r3, 8006132 <_sbrk_r+0x1a>
 8006130:	6023      	str	r3, [r4, #0]
 8006132:	bd38      	pop	{r3, r4, r5, pc}
 8006134:	20000a18 	.word	0x20000a18

08006138 <__sread>:
 8006138:	b510      	push	{r4, lr}
 800613a:	460c      	mov	r4, r1
 800613c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006140:	f000 f8ae 	bl	80062a0 <_read_r>
 8006144:	2800      	cmp	r0, #0
 8006146:	bfab      	itete	ge
 8006148:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800614a:	89a3      	ldrhlt	r3, [r4, #12]
 800614c:	181b      	addge	r3, r3, r0
 800614e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006152:	bfac      	ite	ge
 8006154:	6563      	strge	r3, [r4, #84]	; 0x54
 8006156:	81a3      	strhlt	r3, [r4, #12]
 8006158:	bd10      	pop	{r4, pc}

0800615a <__swrite>:
 800615a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800615e:	461f      	mov	r7, r3
 8006160:	898b      	ldrh	r3, [r1, #12]
 8006162:	4605      	mov	r5, r0
 8006164:	05db      	lsls	r3, r3, #23
 8006166:	460c      	mov	r4, r1
 8006168:	4616      	mov	r6, r2
 800616a:	d505      	bpl.n	8006178 <__swrite+0x1e>
 800616c:	2302      	movs	r3, #2
 800616e:	2200      	movs	r2, #0
 8006170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006174:	f000 f868 	bl	8006248 <_lseek_r>
 8006178:	89a3      	ldrh	r3, [r4, #12]
 800617a:	4632      	mov	r2, r6
 800617c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006180:	81a3      	strh	r3, [r4, #12]
 8006182:	4628      	mov	r0, r5
 8006184:	463b      	mov	r3, r7
 8006186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800618a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800618e:	f000 b817 	b.w	80061c0 <_write_r>

08006192 <__sseek>:
 8006192:	b510      	push	{r4, lr}
 8006194:	460c      	mov	r4, r1
 8006196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800619a:	f000 f855 	bl	8006248 <_lseek_r>
 800619e:	1c43      	adds	r3, r0, #1
 80061a0:	89a3      	ldrh	r3, [r4, #12]
 80061a2:	bf15      	itete	ne
 80061a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80061a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061ae:	81a3      	strheq	r3, [r4, #12]
 80061b0:	bf18      	it	ne
 80061b2:	81a3      	strhne	r3, [r4, #12]
 80061b4:	bd10      	pop	{r4, pc}

080061b6 <__sclose>:
 80061b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ba:	f000 b813 	b.w	80061e4 <_close_r>
	...

080061c0 <_write_r>:
 80061c0:	b538      	push	{r3, r4, r5, lr}
 80061c2:	4604      	mov	r4, r0
 80061c4:	4608      	mov	r0, r1
 80061c6:	4611      	mov	r1, r2
 80061c8:	2200      	movs	r2, #0
 80061ca:	4d05      	ldr	r5, [pc, #20]	; (80061e0 <_write_r+0x20>)
 80061cc:	602a      	str	r2, [r5, #0]
 80061ce:	461a      	mov	r2, r3
 80061d0:	f7fb ffee 	bl	80021b0 <_write>
 80061d4:	1c43      	adds	r3, r0, #1
 80061d6:	d102      	bne.n	80061de <_write_r+0x1e>
 80061d8:	682b      	ldr	r3, [r5, #0]
 80061da:	b103      	cbz	r3, 80061de <_write_r+0x1e>
 80061dc:	6023      	str	r3, [r4, #0]
 80061de:	bd38      	pop	{r3, r4, r5, pc}
 80061e0:	20000a18 	.word	0x20000a18

080061e4 <_close_r>:
 80061e4:	b538      	push	{r3, r4, r5, lr}
 80061e6:	2300      	movs	r3, #0
 80061e8:	4d05      	ldr	r5, [pc, #20]	; (8006200 <_close_r+0x1c>)
 80061ea:	4604      	mov	r4, r0
 80061ec:	4608      	mov	r0, r1
 80061ee:	602b      	str	r3, [r5, #0]
 80061f0:	f7fc fc9b 	bl	8002b2a <_close>
 80061f4:	1c43      	adds	r3, r0, #1
 80061f6:	d102      	bne.n	80061fe <_close_r+0x1a>
 80061f8:	682b      	ldr	r3, [r5, #0]
 80061fa:	b103      	cbz	r3, 80061fe <_close_r+0x1a>
 80061fc:	6023      	str	r3, [r4, #0]
 80061fe:	bd38      	pop	{r3, r4, r5, pc}
 8006200:	20000a18 	.word	0x20000a18

08006204 <_fstat_r>:
 8006204:	b538      	push	{r3, r4, r5, lr}
 8006206:	2300      	movs	r3, #0
 8006208:	4d06      	ldr	r5, [pc, #24]	; (8006224 <_fstat_r+0x20>)
 800620a:	4604      	mov	r4, r0
 800620c:	4608      	mov	r0, r1
 800620e:	4611      	mov	r1, r2
 8006210:	602b      	str	r3, [r5, #0]
 8006212:	f7fc fc95 	bl	8002b40 <_fstat>
 8006216:	1c43      	adds	r3, r0, #1
 8006218:	d102      	bne.n	8006220 <_fstat_r+0x1c>
 800621a:	682b      	ldr	r3, [r5, #0]
 800621c:	b103      	cbz	r3, 8006220 <_fstat_r+0x1c>
 800621e:	6023      	str	r3, [r4, #0]
 8006220:	bd38      	pop	{r3, r4, r5, pc}
 8006222:	bf00      	nop
 8006224:	20000a18 	.word	0x20000a18

08006228 <_isatty_r>:
 8006228:	b538      	push	{r3, r4, r5, lr}
 800622a:	2300      	movs	r3, #0
 800622c:	4d05      	ldr	r5, [pc, #20]	; (8006244 <_isatty_r+0x1c>)
 800622e:	4604      	mov	r4, r0
 8006230:	4608      	mov	r0, r1
 8006232:	602b      	str	r3, [r5, #0]
 8006234:	f7fc fc93 	bl	8002b5e <_isatty>
 8006238:	1c43      	adds	r3, r0, #1
 800623a:	d102      	bne.n	8006242 <_isatty_r+0x1a>
 800623c:	682b      	ldr	r3, [r5, #0]
 800623e:	b103      	cbz	r3, 8006242 <_isatty_r+0x1a>
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	bd38      	pop	{r3, r4, r5, pc}
 8006244:	20000a18 	.word	0x20000a18

08006248 <_lseek_r>:
 8006248:	b538      	push	{r3, r4, r5, lr}
 800624a:	4604      	mov	r4, r0
 800624c:	4608      	mov	r0, r1
 800624e:	4611      	mov	r1, r2
 8006250:	2200      	movs	r2, #0
 8006252:	4d05      	ldr	r5, [pc, #20]	; (8006268 <_lseek_r+0x20>)
 8006254:	602a      	str	r2, [r5, #0]
 8006256:	461a      	mov	r2, r3
 8006258:	f7fc fc8b 	bl	8002b72 <_lseek>
 800625c:	1c43      	adds	r3, r0, #1
 800625e:	d102      	bne.n	8006266 <_lseek_r+0x1e>
 8006260:	682b      	ldr	r3, [r5, #0]
 8006262:	b103      	cbz	r3, 8006266 <_lseek_r+0x1e>
 8006264:	6023      	str	r3, [r4, #0]
 8006266:	bd38      	pop	{r3, r4, r5, pc}
 8006268:	20000a18 	.word	0x20000a18

0800626c <memchr>:
 800626c:	4603      	mov	r3, r0
 800626e:	b510      	push	{r4, lr}
 8006270:	b2c9      	uxtb	r1, r1
 8006272:	4402      	add	r2, r0
 8006274:	4293      	cmp	r3, r2
 8006276:	4618      	mov	r0, r3
 8006278:	d101      	bne.n	800627e <memchr+0x12>
 800627a:	2000      	movs	r0, #0
 800627c:	e003      	b.n	8006286 <memchr+0x1a>
 800627e:	7804      	ldrb	r4, [r0, #0]
 8006280:	3301      	adds	r3, #1
 8006282:	428c      	cmp	r4, r1
 8006284:	d1f6      	bne.n	8006274 <memchr+0x8>
 8006286:	bd10      	pop	{r4, pc}

08006288 <__malloc_lock>:
 8006288:	4801      	ldr	r0, [pc, #4]	; (8006290 <__malloc_lock+0x8>)
 800628a:	f7ff bb4b 	b.w	8005924 <__retarget_lock_acquire_recursive>
 800628e:	bf00      	nop
 8006290:	20000a10 	.word	0x20000a10

08006294 <__malloc_unlock>:
 8006294:	4801      	ldr	r0, [pc, #4]	; (800629c <__malloc_unlock+0x8>)
 8006296:	f7ff bb46 	b.w	8005926 <__retarget_lock_release_recursive>
 800629a:	bf00      	nop
 800629c:	20000a10 	.word	0x20000a10

080062a0 <_read_r>:
 80062a0:	b538      	push	{r3, r4, r5, lr}
 80062a2:	4604      	mov	r4, r0
 80062a4:	4608      	mov	r0, r1
 80062a6:	4611      	mov	r1, r2
 80062a8:	2200      	movs	r2, #0
 80062aa:	4d05      	ldr	r5, [pc, #20]	; (80062c0 <_read_r+0x20>)
 80062ac:	602a      	str	r2, [r5, #0]
 80062ae:	461a      	mov	r2, r3
 80062b0:	f7fc fc1e 	bl	8002af0 <_read>
 80062b4:	1c43      	adds	r3, r0, #1
 80062b6:	d102      	bne.n	80062be <_read_r+0x1e>
 80062b8:	682b      	ldr	r3, [r5, #0]
 80062ba:	b103      	cbz	r3, 80062be <_read_r+0x1e>
 80062bc:	6023      	str	r3, [r4, #0]
 80062be:	bd38      	pop	{r3, r4, r5, pc}
 80062c0:	20000a18 	.word	0x20000a18

080062c4 <_init>:
 80062c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062c6:	bf00      	nop
 80062c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ca:	bc08      	pop	{r3}
 80062cc:	469e      	mov	lr, r3
 80062ce:	4770      	bx	lr

080062d0 <_fini>:
 80062d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d2:	bf00      	nop
 80062d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062d6:	bc08      	pop	{r3}
 80062d8:	469e      	mov	lr, r3
 80062da:	4770      	bx	lr
